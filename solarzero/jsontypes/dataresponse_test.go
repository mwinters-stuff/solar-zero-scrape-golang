package jsontypes_test

import (
	"encoding/json"
	"reflect"
	"testing"

	"github.com/mwinters-stuff/solar-zero-scrape-golang/solarzero/jsontypes"
)

func TestUnmarshalDataResponseData(t *testing.T) {
	jsonData := `{
		"cards": {
			"homeUsage": {"value": 16},
			"solarUtilization": {"value": 97},
			"homeUsageTotal": {"value": 7.05},
			"solarUtilTotal": {"value": 1.2},
			"gridImportTotal": {"value": 6.16},
			"gridExportTotal": {"value": 0.05}
		},
		"monitor": {
			"home": {
				"comments": "16% of your home’s electricity consumption came from the solar energy generated through your panels or had stored in the battery.",
				"value1": {"value": 16},
				"value2": {"value": 84}
			},
			"solar": {
				"comments": "97% of the electricity generated by your solar system is used to power your home and charge your battery.",
				"value1": {"value": 97},
				"value2": {"value": 3}
			},
			"battery": {
				"capacity": 5.37,
				"charged": 30,
				"series": [20,20,20,20,20,19,19,19,19,21,21,30,0,0,0,0,0,0,0,0,0,0,0,0]
			},
			"carbon": {
				"value": 0.12,
				"desc": "kg of CO2",
				"comments": "On this day you've saved an estimated 0.12 kg of CO2 released into the atmosphere. That's equivalent to not driving your car for 1 km"
			}
		},
		"hotwater": {
			"state": "standBy",
			"energySavingStatus": "Disabled",
			"stateTitle": "Standby",
			"voltage": 0,
			"current": 0,
			"wattage": 0,
			"plan": "alwaysOn",
			"hourlyUsage": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			"isAvailable": false,
			"total": 0,
			"averageDailyUsage": 0,
			"comment": "Energy saving mode save money by heating your hot water during off-peak periods, typically from 11am to 5pm when your solar generation peaks, and from 9pm to 7am when grid energy is cheapest.",
			"morningPeakFrom": "7",
			"morningPeakTo": "10",
			"eveningPeakFrom": "5 ",
			"eveningPeakTo": "8 ",
			"circuitOn": false,
			"heatingOn": false,
			"troubleshooting": {
				"title": "Troubleshooting",
				"reminder": {
					"title": "Check hot water control",
					"note": "Check If your hot water control is working properly",
					"description": "Go to your solar system switchboard, make sure the Hot water control relay switch is set to ‘Auto’. This will ensure you can control the hot water through the app.",
					"acknowledgementAction": {"title": "Yes, it’s set to Auto"},
					"deferAction": {"title": "Remind me later"}
				},
				"faqs": [
					{"id": "mode", "question": "How do I make sure my Hot Water Energy Saving mode work properly?", "type": "sunnyPrompt"},
					{"id": "bypass", "question": "What if my hot water relay switch is set to 'Bypass'?", "type": "sunnyPrompt"}
				]
			}
		},
		"energyFlow": {
			"lastUpdate": 1725666370000,
			"operation": {
				"mode": "solarToBatterySolarToHome",
				"comment": "You’re using and saving the solar power",
				"title": "Stream solar and store sunshine",
				"description": "You’re currently using the solar your home is generating, and anything extra is being stored in your battery."
			},
			"home": 1.01,
			"solar": 1.65,
			"grid": 1.2,
			"battery": 0.63,
			"gridImport": false,
			"gridExport": true,
			"batteryUsed": false,
			"batteryCharged": true,
			"flows": {
				"threshold": 50,
				"solartohome": 1.01,
				"solartobattery": 0.63,
				"solartogrid": 1.2,
				"gridtohome": 1.1,
				"batterytohome": 2.1,
				"batterytogrid": 3.1,
				"gridtobattery": 6.1
			}
		},
		"tou": {
			"title": "Grid energy is currently at a lower rate",
			"description": "You’re using and saving the solar power",
			"moreDescription": "You’re currently using the solar your home is generating, and anything extra is being stored in your battery. Grid energy’s at a lower rate until midnight. Tip: Enjoy using energy efficiently before peak rates kick in. Now’s a good time to run your energy-hungry appliances.",
			"grid": {
				"title": "Shoulder • $$",
				"subTitle": "",
				"state": "shoulder"
			},
			"battery": {
				"title": "Charging",
				"subTitle": "",
				"state": "charging"
			},
			"distribution": true,
			"offPeak": 72.1,
			"shoulder": 28.3,
			"peak": 0.2
		}
	}`

	// Unmarshal the JSON into the struct
	var data jsontypes.DataResponseData
	err := json.Unmarshal([]byte(jsonData), &data)
	if err != nil {
		t.Fatalf("Error unmarshaling JSON: %v", err)
	}

	// Marshal the struct back to JSON
	marshaledData, err := json.Marshal(&data)
	if err != nil {
		t.Fatalf("Error marshaling data: %v", err)
	}

	// Unmarshal the marshaled JSON back to the struct and compare with the original
	var unmarshaledData jsontypes.DataResponseData
	err = json.Unmarshal(marshaledData, &unmarshaledData)
	if err != nil {
		t.Fatalf("Error unmarshaling marshaled JSON: %v", err)
	}

	// Use reflection to compare the original and unmarshaled data
	if !reflect.DeepEqual(data, unmarshaledData) {
		t.Errorf("Original and unmarshaled data do not match. Got: %+v, Want: %+v", unmarshaledData, data)
	}
}
