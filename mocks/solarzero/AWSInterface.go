// Code generated by mockery v2.35.1. DO NOT EDIT.

package solarzero

import mock "github.com/stretchr/testify/mock"

// AWSInterface is an autogenerated mock type for the AWSInterface type
type AWSInterface struct {
	mock.Mock
}

type AWSInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AWSInterface) EXPECT() *AWSInterface_Expecter {
	return &AWSInterface_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields:
func (_m *AWSInterface) Authenticate() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AWSInterface_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type AWSInterface_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
func (_e *AWSInterface_Expecter) Authenticate() *AWSInterface_Authenticate_Call {
	return &AWSInterface_Authenticate_Call{Call: _e.mock.On("Authenticate")}
}

func (_c *AWSInterface_Authenticate_Call) Run(run func()) *AWSInterface_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AWSInterface_Authenticate_Call) Return(_a0 bool) *AWSInterface_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AWSInterface_Authenticate_Call) RunAndReturn(run func() bool) *AWSInterface_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields:
func (_m *AWSInterface) GetUser() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AWSInterface_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type AWSInterface_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
func (_e *AWSInterface_Expecter) GetUser() *AWSInterface_GetUser_Call {
	return &AWSInterface_GetUser_Call{Call: _e.mock.On("GetUser")}
}

func (_c *AWSInterface_GetUser_Call) Run(run func()) *AWSInterface_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AWSInterface_GetUser_Call) Return(_a0 bool) *AWSInterface_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AWSInterface_GetUser_Call) RunAndReturn(run func() bool) *AWSInterface_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UserAttributes provides a mock function with given fields:
func (_m *AWSInterface) UserAttributes() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// AWSInterface_UserAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserAttributes'
type AWSInterface_UserAttributes_Call struct {
	*mock.Call
}

// UserAttributes is a helper method to define mock.On call
func (_e *AWSInterface_Expecter) UserAttributes() *AWSInterface_UserAttributes_Call {
	return &AWSInterface_UserAttributes_Call{Call: _e.mock.On("UserAttributes")}
}

func (_c *AWSInterface_UserAttributes_Call) Run(run func()) *AWSInterface_UserAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AWSInterface_UserAttributes_Call) Return(_a0 map[string]string) *AWSInterface_UserAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AWSInterface_UserAttributes_Call) RunAndReturn(run func() map[string]string) *AWSInterface_UserAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// NewAWSInterface creates a new instance of AWSInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAWSInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AWSInterface {
	mock := &AWSInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
