// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/influxdata/influxdb-client-go/v2/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthorizationsAPI is an autogenerated mock type for the AuthorizationsAPI type
type AuthorizationsAPI struct {
	mock.Mock
}

type AuthorizationsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizationsAPI) EXPECT() *AuthorizationsAPI_Expecter {
	return &AuthorizationsAPI_Expecter{mock: &_m.Mock}
}

// CreateAuthorization provides a mock function with given fields: ctx, authorization
func (_m *AuthorizationsAPI) CreateAuthorization(ctx context.Context, authorization *domain.Authorization) (*domain.Authorization, error) {
	ret := _m.Called(ctx, authorization)

	var r0 *domain.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Authorization) *domain.Authorization); ok {
		r0 = rf(ctx, authorization)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Authorization) error); ok {
		r1 = rf(ctx, authorization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationsAPI_CreateAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthorization'
type AuthorizationsAPI_CreateAuthorization_Call struct {
	*mock.Call
}

// CreateAuthorization is a helper method to define mock.On call
//  - ctx context.Context
//  - authorization *domain.Authorization
func (_e *AuthorizationsAPI_Expecter) CreateAuthorization(ctx interface{}, authorization interface{}) *AuthorizationsAPI_CreateAuthorization_Call {
	return &AuthorizationsAPI_CreateAuthorization_Call{Call: _e.mock.On("CreateAuthorization", ctx, authorization)}
}

func (_c *AuthorizationsAPI_CreateAuthorization_Call) Run(run func(ctx context.Context, authorization *domain.Authorization)) *AuthorizationsAPI_CreateAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Authorization))
	})
	return _c
}

func (_c *AuthorizationsAPI_CreateAuthorization_Call) Return(_a0 *domain.Authorization, _a1 error) *AuthorizationsAPI_CreateAuthorization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateAuthorizationWithOrgID provides a mock function with given fields: ctx, orgID, permissions
func (_m *AuthorizationsAPI) CreateAuthorizationWithOrgID(ctx context.Context, orgID string, permissions []domain.Permission) (*domain.Authorization, error) {
	ret := _m.Called(ctx, orgID, permissions)

	var r0 *domain.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.Permission) *domain.Authorization); ok {
		r0 = rf(ctx, orgID, permissions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []domain.Permission) error); ok {
		r1 = rf(ctx, orgID, permissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationsAPI_CreateAuthorizationWithOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthorizationWithOrgID'
type AuthorizationsAPI_CreateAuthorizationWithOrgID_Call struct {
	*mock.Call
}

// CreateAuthorizationWithOrgID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - permissions []domain.Permission
func (_e *AuthorizationsAPI_Expecter) CreateAuthorizationWithOrgID(ctx interface{}, orgID interface{}, permissions interface{}) *AuthorizationsAPI_CreateAuthorizationWithOrgID_Call {
	return &AuthorizationsAPI_CreateAuthorizationWithOrgID_Call{Call: _e.mock.On("CreateAuthorizationWithOrgID", ctx, orgID, permissions)}
}

func (_c *AuthorizationsAPI_CreateAuthorizationWithOrgID_Call) Run(run func(ctx context.Context, orgID string, permissions []domain.Permission)) *AuthorizationsAPI_CreateAuthorizationWithOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]domain.Permission))
	})
	return _c
}

func (_c *AuthorizationsAPI_CreateAuthorizationWithOrgID_Call) Return(_a0 *domain.Authorization, _a1 error) *AuthorizationsAPI_CreateAuthorizationWithOrgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteAuthorization provides a mock function with given fields: ctx, authorization
func (_m *AuthorizationsAPI) DeleteAuthorization(ctx context.Context, authorization *domain.Authorization) error {
	ret := _m.Called(ctx, authorization)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Authorization) error); ok {
		r0 = rf(ctx, authorization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizationsAPI_DeleteAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthorization'
type AuthorizationsAPI_DeleteAuthorization_Call struct {
	*mock.Call
}

// DeleteAuthorization is a helper method to define mock.On call
//  - ctx context.Context
//  - authorization *domain.Authorization
func (_e *AuthorizationsAPI_Expecter) DeleteAuthorization(ctx interface{}, authorization interface{}) *AuthorizationsAPI_DeleteAuthorization_Call {
	return &AuthorizationsAPI_DeleteAuthorization_Call{Call: _e.mock.On("DeleteAuthorization", ctx, authorization)}
}

func (_c *AuthorizationsAPI_DeleteAuthorization_Call) Run(run func(ctx context.Context, authorization *domain.Authorization)) *AuthorizationsAPI_DeleteAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Authorization))
	})
	return _c
}

func (_c *AuthorizationsAPI_DeleteAuthorization_Call) Return(_a0 error) *AuthorizationsAPI_DeleteAuthorization_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteAuthorizationWithID provides a mock function with given fields: ctx, authID
func (_m *AuthorizationsAPI) DeleteAuthorizationWithID(ctx context.Context, authID string) error {
	ret := _m.Called(ctx, authID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, authID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizationsAPI_DeleteAuthorizationWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthorizationWithID'
type AuthorizationsAPI_DeleteAuthorizationWithID_Call struct {
	*mock.Call
}

// DeleteAuthorizationWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
func (_e *AuthorizationsAPI_Expecter) DeleteAuthorizationWithID(ctx interface{}, authID interface{}) *AuthorizationsAPI_DeleteAuthorizationWithID_Call {
	return &AuthorizationsAPI_DeleteAuthorizationWithID_Call{Call: _e.mock.On("DeleteAuthorizationWithID", ctx, authID)}
}

func (_c *AuthorizationsAPI_DeleteAuthorizationWithID_Call) Run(run func(ctx context.Context, authID string)) *AuthorizationsAPI_DeleteAuthorizationWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthorizationsAPI_DeleteAuthorizationWithID_Call) Return(_a0 error) *AuthorizationsAPI_DeleteAuthorizationWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindAuthorizationsByOrgID provides a mock function with given fields: ctx, orgID
func (_m *AuthorizationsAPI) FindAuthorizationsByOrgID(ctx context.Context, orgID string) (*[]domain.Authorization, error) {
	ret := _m.Called(ctx, orgID)

	var r0 *[]domain.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.Authorization); ok {
		r0 = rf(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationsAPI_FindAuthorizationsByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAuthorizationsByOrgID'
type AuthorizationsAPI_FindAuthorizationsByOrgID_Call struct {
	*mock.Call
}

// FindAuthorizationsByOrgID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
func (_e *AuthorizationsAPI_Expecter) FindAuthorizationsByOrgID(ctx interface{}, orgID interface{}) *AuthorizationsAPI_FindAuthorizationsByOrgID_Call {
	return &AuthorizationsAPI_FindAuthorizationsByOrgID_Call{Call: _e.mock.On("FindAuthorizationsByOrgID", ctx, orgID)}
}

func (_c *AuthorizationsAPI_FindAuthorizationsByOrgID_Call) Run(run func(ctx context.Context, orgID string)) *AuthorizationsAPI_FindAuthorizationsByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthorizationsAPI_FindAuthorizationsByOrgID_Call) Return(_a0 *[]domain.Authorization, _a1 error) *AuthorizationsAPI_FindAuthorizationsByOrgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindAuthorizationsByOrgName provides a mock function with given fields: ctx, orgName
func (_m *AuthorizationsAPI) FindAuthorizationsByOrgName(ctx context.Context, orgName string) (*[]domain.Authorization, error) {
	ret := _m.Called(ctx, orgName)

	var r0 *[]domain.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.Authorization); ok {
		r0 = rf(ctx, orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationsAPI_FindAuthorizationsByOrgName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAuthorizationsByOrgName'
type AuthorizationsAPI_FindAuthorizationsByOrgName_Call struct {
	*mock.Call
}

// FindAuthorizationsByOrgName is a helper method to define mock.On call
//  - ctx context.Context
//  - orgName string
func (_e *AuthorizationsAPI_Expecter) FindAuthorizationsByOrgName(ctx interface{}, orgName interface{}) *AuthorizationsAPI_FindAuthorizationsByOrgName_Call {
	return &AuthorizationsAPI_FindAuthorizationsByOrgName_Call{Call: _e.mock.On("FindAuthorizationsByOrgName", ctx, orgName)}
}

func (_c *AuthorizationsAPI_FindAuthorizationsByOrgName_Call) Run(run func(ctx context.Context, orgName string)) *AuthorizationsAPI_FindAuthorizationsByOrgName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthorizationsAPI_FindAuthorizationsByOrgName_Call) Return(_a0 *[]domain.Authorization, _a1 error) *AuthorizationsAPI_FindAuthorizationsByOrgName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindAuthorizationsByUserID provides a mock function with given fields: ctx, userID
func (_m *AuthorizationsAPI) FindAuthorizationsByUserID(ctx context.Context, userID string) (*[]domain.Authorization, error) {
	ret := _m.Called(ctx, userID)

	var r0 *[]domain.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.Authorization); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationsAPI_FindAuthorizationsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAuthorizationsByUserID'
type AuthorizationsAPI_FindAuthorizationsByUserID_Call struct {
	*mock.Call
}

// FindAuthorizationsByUserID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
func (_e *AuthorizationsAPI_Expecter) FindAuthorizationsByUserID(ctx interface{}, userID interface{}) *AuthorizationsAPI_FindAuthorizationsByUserID_Call {
	return &AuthorizationsAPI_FindAuthorizationsByUserID_Call{Call: _e.mock.On("FindAuthorizationsByUserID", ctx, userID)}
}

func (_c *AuthorizationsAPI_FindAuthorizationsByUserID_Call) Run(run func(ctx context.Context, userID string)) *AuthorizationsAPI_FindAuthorizationsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthorizationsAPI_FindAuthorizationsByUserID_Call) Return(_a0 *[]domain.Authorization, _a1 error) *AuthorizationsAPI_FindAuthorizationsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindAuthorizationsByUserName provides a mock function with given fields: ctx, userName
func (_m *AuthorizationsAPI) FindAuthorizationsByUserName(ctx context.Context, userName string) (*[]domain.Authorization, error) {
	ret := _m.Called(ctx, userName)

	var r0 *[]domain.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.Authorization); ok {
		r0 = rf(ctx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationsAPI_FindAuthorizationsByUserName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAuthorizationsByUserName'
type AuthorizationsAPI_FindAuthorizationsByUserName_Call struct {
	*mock.Call
}

// FindAuthorizationsByUserName is a helper method to define mock.On call
//  - ctx context.Context
//  - userName string
func (_e *AuthorizationsAPI_Expecter) FindAuthorizationsByUserName(ctx interface{}, userName interface{}) *AuthorizationsAPI_FindAuthorizationsByUserName_Call {
	return &AuthorizationsAPI_FindAuthorizationsByUserName_Call{Call: _e.mock.On("FindAuthorizationsByUserName", ctx, userName)}
}

func (_c *AuthorizationsAPI_FindAuthorizationsByUserName_Call) Run(run func(ctx context.Context, userName string)) *AuthorizationsAPI_FindAuthorizationsByUserName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthorizationsAPI_FindAuthorizationsByUserName_Call) Return(_a0 *[]domain.Authorization, _a1 error) *AuthorizationsAPI_FindAuthorizationsByUserName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAuthorizations provides a mock function with given fields: ctx
func (_m *AuthorizationsAPI) GetAuthorizations(ctx context.Context) (*[]domain.Authorization, error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.Authorization
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Authorization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationsAPI_GetAuthorizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizations'
type AuthorizationsAPI_GetAuthorizations_Call struct {
	*mock.Call
}

// GetAuthorizations is a helper method to define mock.On call
//  - ctx context.Context
func (_e *AuthorizationsAPI_Expecter) GetAuthorizations(ctx interface{}) *AuthorizationsAPI_GetAuthorizations_Call {
	return &AuthorizationsAPI_GetAuthorizations_Call{Call: _e.mock.On("GetAuthorizations", ctx)}
}

func (_c *AuthorizationsAPI_GetAuthorizations_Call) Run(run func(ctx context.Context)) *AuthorizationsAPI_GetAuthorizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AuthorizationsAPI_GetAuthorizations_Call) Return(_a0 *[]domain.Authorization, _a1 error) *AuthorizationsAPI_GetAuthorizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateAuthorizationStatus provides a mock function with given fields: ctx, authorization, status
func (_m *AuthorizationsAPI) UpdateAuthorizationStatus(ctx context.Context, authorization *domain.Authorization, status domain.AuthorizationUpdateRequestStatus) (*domain.Authorization, error) {
	ret := _m.Called(ctx, authorization, status)

	var r0 *domain.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Authorization, domain.AuthorizationUpdateRequestStatus) *domain.Authorization); ok {
		r0 = rf(ctx, authorization, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Authorization, domain.AuthorizationUpdateRequestStatus) error); ok {
		r1 = rf(ctx, authorization, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationsAPI_UpdateAuthorizationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthorizationStatus'
type AuthorizationsAPI_UpdateAuthorizationStatus_Call struct {
	*mock.Call
}

// UpdateAuthorizationStatus is a helper method to define mock.On call
//  - ctx context.Context
//  - authorization *domain.Authorization
//  - status domain.AuthorizationUpdateRequestStatus
func (_e *AuthorizationsAPI_Expecter) UpdateAuthorizationStatus(ctx interface{}, authorization interface{}, status interface{}) *AuthorizationsAPI_UpdateAuthorizationStatus_Call {
	return &AuthorizationsAPI_UpdateAuthorizationStatus_Call{Call: _e.mock.On("UpdateAuthorizationStatus", ctx, authorization, status)}
}

func (_c *AuthorizationsAPI_UpdateAuthorizationStatus_Call) Run(run func(ctx context.Context, authorization *domain.Authorization, status domain.AuthorizationUpdateRequestStatus)) *AuthorizationsAPI_UpdateAuthorizationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Authorization), args[2].(domain.AuthorizationUpdateRequestStatus))
	})
	return _c
}

func (_c *AuthorizationsAPI_UpdateAuthorizationStatus_Call) Return(_a0 *domain.Authorization, _a1 error) *AuthorizationsAPI_UpdateAuthorizationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateAuthorizationStatusWithID provides a mock function with given fields: ctx, authID, status
func (_m *AuthorizationsAPI) UpdateAuthorizationStatusWithID(ctx context.Context, authID string, status domain.AuthorizationUpdateRequestStatus) (*domain.Authorization, error) {
	ret := _m.Called(ctx, authID, status)

	var r0 *domain.Authorization
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.AuthorizationUpdateRequestStatus) *domain.Authorization); ok {
		r0 = rf(ctx, authID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Authorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, domain.AuthorizationUpdateRequestStatus) error); ok {
		r1 = rf(ctx, authID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizationsAPI_UpdateAuthorizationStatusWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthorizationStatusWithID'
type AuthorizationsAPI_UpdateAuthorizationStatusWithID_Call struct {
	*mock.Call
}

// UpdateAuthorizationStatusWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - status domain.AuthorizationUpdateRequestStatus
func (_e *AuthorizationsAPI_Expecter) UpdateAuthorizationStatusWithID(ctx interface{}, authID interface{}, status interface{}) *AuthorizationsAPI_UpdateAuthorizationStatusWithID_Call {
	return &AuthorizationsAPI_UpdateAuthorizationStatusWithID_Call{Call: _e.mock.On("UpdateAuthorizationStatusWithID", ctx, authID, status)}
}

func (_c *AuthorizationsAPI_UpdateAuthorizationStatusWithID_Call) Run(run func(ctx context.Context, authID string, status domain.AuthorizationUpdateRequestStatus)) *AuthorizationsAPI_UpdateAuthorizationStatusWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.AuthorizationUpdateRequestStatus))
	})
	return _c
}

func (_c *AuthorizationsAPI_UpdateAuthorizationStatusWithID_Call) Return(_a0 *domain.Authorization, _a1 error) *AuthorizationsAPI_UpdateAuthorizationStatusWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewAuthorizationsAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorizationsAPI creates a new instance of AuthorizationsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorizationsAPI(t mockConstructorTestingTNewAuthorizationsAPI) *AuthorizationsAPI {
	mock := &AuthorizationsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
