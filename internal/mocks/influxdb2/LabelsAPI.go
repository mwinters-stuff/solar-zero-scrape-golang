// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/influxdata/influxdb-client-go/v2/domain"
	mock "github.com/stretchr/testify/mock"
)

// LabelsAPI is an autogenerated mock type for the LabelsAPI type
type LabelsAPI struct {
	mock.Mock
}

type LabelsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *LabelsAPI) EXPECT() *LabelsAPI_Expecter {
	return &LabelsAPI_Expecter{mock: &_m.Mock}
}

// CreateLabel provides a mock function with given fields: ctx, label
func (_m *LabelsAPI) CreateLabel(ctx context.Context, label *domain.LabelCreateRequest) (*domain.Label, error) {
	ret := _m.Called(ctx, label)

	var r0 *domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, *domain.LabelCreateRequest) *domain.Label); ok {
		r0 = rf(ctx, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.LabelCreateRequest) error); ok {
		r1 = rf(ctx, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsAPI_CreateLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLabel'
type LabelsAPI_CreateLabel_Call struct {
	*mock.Call
}

// CreateLabel is a helper method to define mock.On call
//  - ctx context.Context
//  - label *domain.LabelCreateRequest
func (_e *LabelsAPI_Expecter) CreateLabel(ctx interface{}, label interface{}) *LabelsAPI_CreateLabel_Call {
	return &LabelsAPI_CreateLabel_Call{Call: _e.mock.On("CreateLabel", ctx, label)}
}

func (_c *LabelsAPI_CreateLabel_Call) Run(run func(ctx context.Context, label *domain.LabelCreateRequest)) *LabelsAPI_CreateLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.LabelCreateRequest))
	})
	return _c
}

func (_c *LabelsAPI_CreateLabel_Call) Return(_a0 *domain.Label, _a1 error) *LabelsAPI_CreateLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateLabelWithName provides a mock function with given fields: ctx, org, labelName, properties
func (_m *LabelsAPI) CreateLabelWithName(ctx context.Context, org *domain.Organization, labelName string, properties map[string]string) (*domain.Label, error) {
	ret := _m.Called(ctx, org, labelName, properties)

	var r0 *domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Organization, string, map[string]string) *domain.Label); ok {
		r0 = rf(ctx, org, labelName, properties)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Organization, string, map[string]string) error); ok {
		r1 = rf(ctx, org, labelName, properties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsAPI_CreateLabelWithName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLabelWithName'
type LabelsAPI_CreateLabelWithName_Call struct {
	*mock.Call
}

// CreateLabelWithName is a helper method to define mock.On call
//  - ctx context.Context
//  - org *domain.Organization
//  - labelName string
//  - properties map[string]string
func (_e *LabelsAPI_Expecter) CreateLabelWithName(ctx interface{}, org interface{}, labelName interface{}, properties interface{}) *LabelsAPI_CreateLabelWithName_Call {
	return &LabelsAPI_CreateLabelWithName_Call{Call: _e.mock.On("CreateLabelWithName", ctx, org, labelName, properties)}
}

func (_c *LabelsAPI_CreateLabelWithName_Call) Run(run func(ctx context.Context, org *domain.Organization, labelName string, properties map[string]string)) *LabelsAPI_CreateLabelWithName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Organization), args[2].(string), args[3].(map[string]string))
	})
	return _c
}

func (_c *LabelsAPI_CreateLabelWithName_Call) Return(_a0 *domain.Label, _a1 error) *LabelsAPI_CreateLabelWithName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateLabelWithNameWithID provides a mock function with given fields: ctx, orgID, labelName, properties
func (_m *LabelsAPI) CreateLabelWithNameWithID(ctx context.Context, orgID string, labelName string, properties map[string]string) (*domain.Label, error) {
	ret := _m.Called(ctx, orgID, labelName, properties)

	var r0 *domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) *domain.Label); ok {
		r0 = rf(ctx, orgID, labelName, properties)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string) error); ok {
		r1 = rf(ctx, orgID, labelName, properties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsAPI_CreateLabelWithNameWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLabelWithNameWithID'
type LabelsAPI_CreateLabelWithNameWithID_Call struct {
	*mock.Call
}

// CreateLabelWithNameWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - labelName string
//  - properties map[string]string
func (_e *LabelsAPI_Expecter) CreateLabelWithNameWithID(ctx interface{}, orgID interface{}, labelName interface{}, properties interface{}) *LabelsAPI_CreateLabelWithNameWithID_Call {
	return &LabelsAPI_CreateLabelWithNameWithID_Call{Call: _e.mock.On("CreateLabelWithNameWithID", ctx, orgID, labelName, properties)}
}

func (_c *LabelsAPI_CreateLabelWithNameWithID_Call) Run(run func(ctx context.Context, orgID string, labelName string, properties map[string]string)) *LabelsAPI_CreateLabelWithNameWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]string))
	})
	return _c
}

func (_c *LabelsAPI_CreateLabelWithNameWithID_Call) Return(_a0 *domain.Label, _a1 error) *LabelsAPI_CreateLabelWithNameWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteLabel provides a mock function with given fields: ctx, label
func (_m *LabelsAPI) DeleteLabel(ctx context.Context, label *domain.Label) error {
	ret := _m.Called(ctx, label)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Label) error); ok {
		r0 = rf(ctx, label)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LabelsAPI_DeleteLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLabel'
type LabelsAPI_DeleteLabel_Call struct {
	*mock.Call
}

// DeleteLabel is a helper method to define mock.On call
//  - ctx context.Context
//  - label *domain.Label
func (_e *LabelsAPI_Expecter) DeleteLabel(ctx interface{}, label interface{}) *LabelsAPI_DeleteLabel_Call {
	return &LabelsAPI_DeleteLabel_Call{Call: _e.mock.On("DeleteLabel", ctx, label)}
}

func (_c *LabelsAPI_DeleteLabel_Call) Run(run func(ctx context.Context, label *domain.Label)) *LabelsAPI_DeleteLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Label))
	})
	return _c
}

func (_c *LabelsAPI_DeleteLabel_Call) Return(_a0 error) *LabelsAPI_DeleteLabel_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteLabelWithID provides a mock function with given fields: ctx, labelID
func (_m *LabelsAPI) DeleteLabelWithID(ctx context.Context, labelID string) error {
	ret := _m.Called(ctx, labelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, labelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LabelsAPI_DeleteLabelWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLabelWithID'
type LabelsAPI_DeleteLabelWithID_Call struct {
	*mock.Call
}

// DeleteLabelWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
func (_e *LabelsAPI_Expecter) DeleteLabelWithID(ctx interface{}, labelID interface{}) *LabelsAPI_DeleteLabelWithID_Call {
	return &LabelsAPI_DeleteLabelWithID_Call{Call: _e.mock.On("DeleteLabelWithID", ctx, labelID)}
}

func (_c *LabelsAPI_DeleteLabelWithID_Call) Run(run func(ctx context.Context, labelID string)) *LabelsAPI_DeleteLabelWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LabelsAPI_DeleteLabelWithID_Call) Return(_a0 error) *LabelsAPI_DeleteLabelWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindLabelByID provides a mock function with given fields: ctx, labelID
func (_m *LabelsAPI) FindLabelByID(ctx context.Context, labelID string) (*domain.Label, error) {
	ret := _m.Called(ctx, labelID)

	var r0 *domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Label); ok {
		r0 = rf(ctx, labelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, labelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsAPI_FindLabelByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLabelByID'
type LabelsAPI_FindLabelByID_Call struct {
	*mock.Call
}

// FindLabelByID is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
func (_e *LabelsAPI_Expecter) FindLabelByID(ctx interface{}, labelID interface{}) *LabelsAPI_FindLabelByID_Call {
	return &LabelsAPI_FindLabelByID_Call{Call: _e.mock.On("FindLabelByID", ctx, labelID)}
}

func (_c *LabelsAPI_FindLabelByID_Call) Run(run func(ctx context.Context, labelID string)) *LabelsAPI_FindLabelByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LabelsAPI_FindLabelByID_Call) Return(_a0 *domain.Label, _a1 error) *LabelsAPI_FindLabelByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindLabelByName provides a mock function with given fields: ctx, orgID, labelName
func (_m *LabelsAPI) FindLabelByName(ctx context.Context, orgID string, labelName string) (*domain.Label, error) {
	ret := _m.Called(ctx, orgID, labelName)

	var r0 *domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Label); ok {
		r0 = rf(ctx, orgID, labelName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orgID, labelName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsAPI_FindLabelByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLabelByName'
type LabelsAPI_FindLabelByName_Call struct {
	*mock.Call
}

// FindLabelByName is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - labelName string
func (_e *LabelsAPI_Expecter) FindLabelByName(ctx interface{}, orgID interface{}, labelName interface{}) *LabelsAPI_FindLabelByName_Call {
	return &LabelsAPI_FindLabelByName_Call{Call: _e.mock.On("FindLabelByName", ctx, orgID, labelName)}
}

func (_c *LabelsAPI_FindLabelByName_Call) Run(run func(ctx context.Context, orgID string, labelName string)) *LabelsAPI_FindLabelByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LabelsAPI_FindLabelByName_Call) Return(_a0 *domain.Label, _a1 error) *LabelsAPI_FindLabelByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindLabelsByOrg provides a mock function with given fields: ctx, org
func (_m *LabelsAPI) FindLabelsByOrg(ctx context.Context, org *domain.Organization) (*[]domain.Label, error) {
	ret := _m.Called(ctx, org)

	var r0 *[]domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Organization) *[]domain.Label); ok {
		r0 = rf(ctx, org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Organization) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsAPI_FindLabelsByOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLabelsByOrg'
type LabelsAPI_FindLabelsByOrg_Call struct {
	*mock.Call
}

// FindLabelsByOrg is a helper method to define mock.On call
//  - ctx context.Context
//  - org *domain.Organization
func (_e *LabelsAPI_Expecter) FindLabelsByOrg(ctx interface{}, org interface{}) *LabelsAPI_FindLabelsByOrg_Call {
	return &LabelsAPI_FindLabelsByOrg_Call{Call: _e.mock.On("FindLabelsByOrg", ctx, org)}
}

func (_c *LabelsAPI_FindLabelsByOrg_Call) Run(run func(ctx context.Context, org *domain.Organization)) *LabelsAPI_FindLabelsByOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Organization))
	})
	return _c
}

func (_c *LabelsAPI_FindLabelsByOrg_Call) Return(_a0 *[]domain.Label, _a1 error) *LabelsAPI_FindLabelsByOrg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindLabelsByOrgID provides a mock function with given fields: ctx, orgID
func (_m *LabelsAPI) FindLabelsByOrgID(ctx context.Context, orgID string) (*[]domain.Label, error) {
	ret := _m.Called(ctx, orgID)

	var r0 *[]domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.Label); ok {
		r0 = rf(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsAPI_FindLabelsByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLabelsByOrgID'
type LabelsAPI_FindLabelsByOrgID_Call struct {
	*mock.Call
}

// FindLabelsByOrgID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
func (_e *LabelsAPI_Expecter) FindLabelsByOrgID(ctx interface{}, orgID interface{}) *LabelsAPI_FindLabelsByOrgID_Call {
	return &LabelsAPI_FindLabelsByOrgID_Call{Call: _e.mock.On("FindLabelsByOrgID", ctx, orgID)}
}

func (_c *LabelsAPI_FindLabelsByOrgID_Call) Run(run func(ctx context.Context, orgID string)) *LabelsAPI_FindLabelsByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LabelsAPI_FindLabelsByOrgID_Call) Return(_a0 *[]domain.Label, _a1 error) *LabelsAPI_FindLabelsByOrgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLabels provides a mock function with given fields: ctx
func (_m *LabelsAPI) GetLabels(ctx context.Context) (*[]domain.Label, error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.Label
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Label); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsAPI_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type LabelsAPI_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
//  - ctx context.Context
func (_e *LabelsAPI_Expecter) GetLabels(ctx interface{}) *LabelsAPI_GetLabels_Call {
	return &LabelsAPI_GetLabels_Call{Call: _e.mock.On("GetLabels", ctx)}
}

func (_c *LabelsAPI_GetLabels_Call) Run(run func(ctx context.Context)) *LabelsAPI_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LabelsAPI_GetLabels_Call) Return(_a0 *[]domain.Label, _a1 error) *LabelsAPI_GetLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateLabel provides a mock function with given fields: ctx, label
func (_m *LabelsAPI) UpdateLabel(ctx context.Context, label *domain.Label) (*domain.Label, error) {
	ret := _m.Called(ctx, label)

	var r0 *domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Label) *domain.Label); ok {
		r0 = rf(ctx, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Label) error); ok {
		r1 = rf(ctx, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LabelsAPI_UpdateLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLabel'
type LabelsAPI_UpdateLabel_Call struct {
	*mock.Call
}

// UpdateLabel is a helper method to define mock.On call
//  - ctx context.Context
//  - label *domain.Label
func (_e *LabelsAPI_Expecter) UpdateLabel(ctx interface{}, label interface{}) *LabelsAPI_UpdateLabel_Call {
	return &LabelsAPI_UpdateLabel_Call{Call: _e.mock.On("UpdateLabel", ctx, label)}
}

func (_c *LabelsAPI_UpdateLabel_Call) Run(run func(ctx context.Context, label *domain.Label)) *LabelsAPI_UpdateLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Label))
	})
	return _c
}

func (_c *LabelsAPI_UpdateLabel_Call) Return(_a0 *domain.Label, _a1 error) *LabelsAPI_UpdateLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewLabelsAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewLabelsAPI creates a new instance of LabelsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLabelsAPI(t mockConstructorTestingTNewLabelsAPI) *LabelsAPI {
	mock := &LabelsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
