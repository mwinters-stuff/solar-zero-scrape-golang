// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	http "github.com/influxdata/influxdb-client-go/v2/api/http"

	mock "github.com/stretchr/testify/mock"

	nethttp "net/http"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Authorization provides a mock function with given fields:
func (_m *Service) Authorization() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Service_Authorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorization'
type Service_Authorization_Call struct {
	*mock.Call
}

// Authorization is a helper method to define mock.On call
func (_e *Service_Expecter) Authorization() *Service_Authorization_Call {
	return &Service_Authorization_Call{Call: _e.mock.On("Authorization")}
}

func (_c *Service_Authorization_Call) Run(run func()) *Service_Authorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_Authorization_Call) Return(_a0 string) *Service_Authorization_Call {
	_c.Call.Return(_a0)
	return _c
}

// DoHTTPRequest provides a mock function with given fields: req, requestCallback, responseCallback
func (_m *Service) DoHTTPRequest(req *nethttp.Request, requestCallback http.RequestCallback, responseCallback http.ResponseCallback) *http.Error {
	ret := _m.Called(req, requestCallback, responseCallback)

	var r0 *http.Error
	if rf, ok := ret.Get(0).(func(*nethttp.Request, http.RequestCallback, http.ResponseCallback) *http.Error); ok {
		r0 = rf(req, requestCallback, responseCallback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Error)
		}
	}

	return r0
}

// Service_DoHTTPRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoHTTPRequest'
type Service_DoHTTPRequest_Call struct {
	*mock.Call
}

// DoHTTPRequest is a helper method to define mock.On call
//  - req *nethttp.Request
//  - requestCallback http.RequestCallback
//  - responseCallback http.ResponseCallback
func (_e *Service_Expecter) DoHTTPRequest(req interface{}, requestCallback interface{}, responseCallback interface{}) *Service_DoHTTPRequest_Call {
	return &Service_DoHTTPRequest_Call{Call: _e.mock.On("DoHTTPRequest", req, requestCallback, responseCallback)}
}

func (_c *Service_DoHTTPRequest_Call) Run(run func(req *nethttp.Request, requestCallback http.RequestCallback, responseCallback http.ResponseCallback)) *Service_DoHTTPRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*nethttp.Request), args[1].(http.RequestCallback), args[2].(http.ResponseCallback))
	})
	return _c
}

func (_c *Service_DoHTTPRequest_Call) Return(_a0 *http.Error) *Service_DoHTTPRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

// DoHTTPRequestWithResponse provides a mock function with given fields: req, requestCallback
func (_m *Service) DoHTTPRequestWithResponse(req *nethttp.Request, requestCallback http.RequestCallback) (*nethttp.Response, error) {
	ret := _m.Called(req, requestCallback)

	var r0 *nethttp.Response
	if rf, ok := ret.Get(0).(func(*nethttp.Request, http.RequestCallback) *nethttp.Response); ok {
		r0 = rf(req, requestCallback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*nethttp.Request, http.RequestCallback) error); ok {
		r1 = rf(req, requestCallback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_DoHTTPRequestWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoHTTPRequestWithResponse'
type Service_DoHTTPRequestWithResponse_Call struct {
	*mock.Call
}

// DoHTTPRequestWithResponse is a helper method to define mock.On call
//  - req *nethttp.Request
//  - requestCallback http.RequestCallback
func (_e *Service_Expecter) DoHTTPRequestWithResponse(req interface{}, requestCallback interface{}) *Service_DoHTTPRequestWithResponse_Call {
	return &Service_DoHTTPRequestWithResponse_Call{Call: _e.mock.On("DoHTTPRequestWithResponse", req, requestCallback)}
}

func (_c *Service_DoHTTPRequestWithResponse_Call) Run(run func(req *nethttp.Request, requestCallback http.RequestCallback)) *Service_DoHTTPRequestWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*nethttp.Request), args[1].(http.RequestCallback))
	})
	return _c
}

func (_c *Service_DoHTTPRequestWithResponse_Call) Return(_a0 *nethttp.Response, _a1 error) *Service_DoHTTPRequestWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DoPostRequest provides a mock function with given fields: ctx, url, body, requestCallback, responseCallback
func (_m *Service) DoPostRequest(ctx context.Context, url string, body io.Reader, requestCallback http.RequestCallback, responseCallback http.ResponseCallback) *http.Error {
	ret := _m.Called(ctx, url, body, requestCallback, responseCallback)

	var r0 *http.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, http.RequestCallback, http.ResponseCallback) *http.Error); ok {
		r0 = rf(ctx, url, body, requestCallback, responseCallback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Error)
		}
	}

	return r0
}

// Service_DoPostRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoPostRequest'
type Service_DoPostRequest_Call struct {
	*mock.Call
}

// DoPostRequest is a helper method to define mock.On call
//  - ctx context.Context
//  - url string
//  - body io.Reader
//  - requestCallback http.RequestCallback
//  - responseCallback http.ResponseCallback
func (_e *Service_Expecter) DoPostRequest(ctx interface{}, url interface{}, body interface{}, requestCallback interface{}, responseCallback interface{}) *Service_DoPostRequest_Call {
	return &Service_DoPostRequest_Call{Call: _e.mock.On("DoPostRequest", ctx, url, body, requestCallback, responseCallback)}
}

func (_c *Service_DoPostRequest_Call) Run(run func(ctx context.Context, url string, body io.Reader, requestCallback http.RequestCallback, responseCallback http.ResponseCallback)) *Service_DoPostRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), args[3].(http.RequestCallback), args[4].(http.ResponseCallback))
	})
	return _c
}

func (_c *Service_DoPostRequest_Call) Return(_a0 *http.Error) *Service_DoPostRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

// ServerAPIURL provides a mock function with given fields:
func (_m *Service) ServerAPIURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Service_ServerAPIURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerAPIURL'
type Service_ServerAPIURL_Call struct {
	*mock.Call
}

// ServerAPIURL is a helper method to define mock.On call
func (_e *Service_Expecter) ServerAPIURL() *Service_ServerAPIURL_Call {
	return &Service_ServerAPIURL_Call{Call: _e.mock.On("ServerAPIURL")}
}

func (_c *Service_ServerAPIURL_Call) Run(run func()) *Service_ServerAPIURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_ServerAPIURL_Call) Return(_a0 string) *Service_ServerAPIURL_Call {
	_c.Call.Return(_a0)
	return _c
}

// ServerURL provides a mock function with given fields:
func (_m *Service) ServerURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Service_ServerURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerURL'
type Service_ServerURL_Call struct {
	*mock.Call
}

// ServerURL is a helper method to define mock.On call
func (_e *Service_Expecter) ServerURL() *Service_ServerURL_Call {
	return &Service_ServerURL_Call{Call: _e.mock.On("ServerURL")}
}

func (_c *Service_ServerURL_Call) Run(run func()) *Service_ServerURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_ServerURL_Call) Return(_a0 string) *Service_ServerURL_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetAuthorization provides a mock function with given fields: authorization
func (_m *Service) SetAuthorization(authorization string) {
	_m.Called(authorization)
}

// Service_SetAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAuthorization'
type Service_SetAuthorization_Call struct {
	*mock.Call
}

// SetAuthorization is a helper method to define mock.On call
//  - authorization string
func (_e *Service_Expecter) SetAuthorization(authorization interface{}) *Service_SetAuthorization_Call {
	return &Service_SetAuthorization_Call{Call: _e.mock.On("SetAuthorization", authorization)}
}

func (_c *Service_SetAuthorization_Call) Run(run func(authorization string)) *Service_SetAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Service_SetAuthorization_Call) Return() *Service_SetAuthorization_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
