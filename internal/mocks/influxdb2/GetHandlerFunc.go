// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	middleware "github.com/go-openapi/runtime/middleware"
	http_api "github.com/mwinters-stuff/solar-zero-scrape-golang/api/restapi/operations/http_api"

	mock "github.com/stretchr/testify/mock"
)

// GetHandlerFunc is an autogenerated mock type for the GetHandlerFunc type
type GetHandlerFunc struct {
	mock.Mock
}

type GetHandlerFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *GetHandlerFunc) EXPECT() *GetHandlerFunc_Expecter {
	return &GetHandlerFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *GetHandlerFunc) Execute(_a0 http_api.GetParams) middleware.Responder {
	ret := _m.Called(_a0)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(http_api.GetParams) middleware.Responder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GetHandlerFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type GetHandlerFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - _a0 http_api.GetParams
func (_e *GetHandlerFunc_Expecter) Execute(_a0 interface{}) *GetHandlerFunc_Execute_Call {
	return &GetHandlerFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *GetHandlerFunc_Execute_Call) Run(run func(_a0 http_api.GetParams)) *GetHandlerFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http_api.GetParams))
	})
	return _c
}

func (_c *GetHandlerFunc_Execute_Call) Return(_a0 middleware.Responder) *GetHandlerFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewGetHandlerFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetHandlerFunc creates a new instance of GetHandlerFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetHandlerFunc(t mockConstructorTestingTNewGetHandlerFunc) *GetHandlerFunc {
	mock := &GetHandlerFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
