// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "github.com/influxdata/influxdb-client-go/v2/api/http"
	mock "github.com/stretchr/testify/mock"
)

// WriteFailedCallback is an autogenerated mock type for the WriteFailedCallback type
type WriteFailedCallback struct {
	mock.Mock
}

type WriteFailedCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *WriteFailedCallback) EXPECT() *WriteFailedCallback_Expecter {
	return &WriteFailedCallback_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: batch, error, retryAttempts
func (_m *WriteFailedCallback) Execute(batch string, error http.Error, retryAttempts uint) bool {
	ret := _m.Called(batch, error, retryAttempts)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, http.Error, uint) bool); ok {
		r0 = rf(batch, error, retryAttempts)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// WriteFailedCallback_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type WriteFailedCallback_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - batch string
//  - error http.Error
//  - retryAttempts uint
func (_e *WriteFailedCallback_Expecter) Execute(batch interface{}, error interface{}, retryAttempts interface{}) *WriteFailedCallback_Execute_Call {
	return &WriteFailedCallback_Execute_Call{Call: _e.mock.On("Execute", batch, error, retryAttempts)}
}

func (_c *WriteFailedCallback_Execute_Call) Run(run func(batch string, error http.Error, retryAttempts uint)) *WriteFailedCallback_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.Error), args[2].(uint))
	})
	return _c
}

func (_c *WriteFailedCallback_Execute_Call) Return(_a0 bool) *WriteFailedCallback_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewWriteFailedCallback interface {
	mock.TestingT
	Cleanup(func())
}

// NewWriteFailedCallback creates a new instance of WriteFailedCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWriteFailedCallback(t mockConstructorTestingTNewWriteFailedCallback) *WriteFailedCallback {
	mock := &WriteFailedCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
