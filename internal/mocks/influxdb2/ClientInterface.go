// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	domain "github.com/influxdata/influxdb-client-go/v2/domain"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

type ClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientInterface) EXPECT() *ClientInterface_Expecter {
	return &ClientInterface_Expecter{mock: &_m.Mock}
}

// ApplyTemplate provides a mock function with given fields: ctx, body
func (_m *ClientInterface) ApplyTemplate(ctx context.Context, body domain.ApplyTemplateJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, domain.ApplyTemplateJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ApplyTemplateJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_ApplyTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyTemplate'
type ClientInterface_ApplyTemplate_Call struct {
	*mock.Call
}

// ApplyTemplate is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.ApplyTemplateJSONRequestBody
func (_e *ClientInterface_Expecter) ApplyTemplate(ctx interface{}, body interface{}) *ClientInterface_ApplyTemplate_Call {
	return &ClientInterface_ApplyTemplate_Call{Call: _e.mock.On("ApplyTemplate", ctx, body)}
}

func (_c *ClientInterface_ApplyTemplate_Call) Run(run func(ctx context.Context, body domain.ApplyTemplateJSONRequestBody)) *ClientInterface_ApplyTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ApplyTemplateJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_ApplyTemplate_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_ApplyTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ApplyTemplateWithBody provides a mock function with given fields: ctx, contentType, body
func (_m *ClientInterface) ApplyTemplateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_ApplyTemplateWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyTemplateWithBody'
type ClientInterface_ApplyTemplateWithBody_Call struct {
	*mock.Call
}

// ApplyTemplateWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) ApplyTemplateWithBody(ctx interface{}, contentType interface{}, body interface{}) *ClientInterface_ApplyTemplateWithBody_Call {
	return &ClientInterface_ApplyTemplateWithBody_Call{Call: _e.mock.On("ApplyTemplateWithBody", ctx, contentType, body)}
}

func (_c *ClientInterface_ApplyTemplateWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientInterface_ApplyTemplateWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_ApplyTemplateWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_ApplyTemplateWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateCheck provides a mock function with given fields: ctx, body
func (_m *ClientInterface) CreateCheck(ctx context.Context, body domain.CreateCheckJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCheckJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateCheckJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_CreateCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheck'
type ClientInterface_CreateCheck_Call struct {
	*mock.Call
}

// CreateCheck is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.CreateCheckJSONRequestBody
func (_e *ClientInterface_Expecter) CreateCheck(ctx interface{}, body interface{}) *ClientInterface_CreateCheck_Call {
	return &ClientInterface_CreateCheck_Call{Call: _e.mock.On("CreateCheck", ctx, body)}
}

func (_c *ClientInterface_CreateCheck_Call) Run(run func(ctx context.Context, body domain.CreateCheckJSONRequestBody)) *ClientInterface_CreateCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateCheckJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_CreateCheck_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_CreateCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateCheckWithBody provides a mock function with given fields: ctx, contentType, body
func (_m *ClientInterface) CreateCheckWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_CreateCheckWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheckWithBody'
type ClientInterface_CreateCheckWithBody_Call struct {
	*mock.Call
}

// CreateCheckWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) CreateCheckWithBody(ctx interface{}, contentType interface{}, body interface{}) *ClientInterface_CreateCheckWithBody_Call {
	return &ClientInterface_CreateCheckWithBody_Call{Call: _e.mock.On("CreateCheckWithBody", ctx, contentType, body)}
}

func (_c *ClientInterface_CreateCheckWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientInterface_CreateCheckWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_CreateCheckWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_CreateCheckWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateNotificationEndpoint provides a mock function with given fields: ctx, body
func (_m *ClientInterface) CreateNotificationEndpoint(ctx context.Context, body domain.CreateNotificationEndpointJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateNotificationEndpointJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateNotificationEndpointJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_CreateNotificationEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationEndpoint'
type ClientInterface_CreateNotificationEndpoint_Call struct {
	*mock.Call
}

// CreateNotificationEndpoint is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.CreateNotificationEndpointJSONRequestBody
func (_e *ClientInterface_Expecter) CreateNotificationEndpoint(ctx interface{}, body interface{}) *ClientInterface_CreateNotificationEndpoint_Call {
	return &ClientInterface_CreateNotificationEndpoint_Call{Call: _e.mock.On("CreateNotificationEndpoint", ctx, body)}
}

func (_c *ClientInterface_CreateNotificationEndpoint_Call) Run(run func(ctx context.Context, body domain.CreateNotificationEndpointJSONRequestBody)) *ClientInterface_CreateNotificationEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateNotificationEndpointJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_CreateNotificationEndpoint_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_CreateNotificationEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateNotificationEndpointWithBody provides a mock function with given fields: ctx, contentType, body
func (_m *ClientInterface) CreateNotificationEndpointWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_CreateNotificationEndpointWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationEndpointWithBody'
type ClientInterface_CreateNotificationEndpointWithBody_Call struct {
	*mock.Call
}

// CreateNotificationEndpointWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) CreateNotificationEndpointWithBody(ctx interface{}, contentType interface{}, body interface{}) *ClientInterface_CreateNotificationEndpointWithBody_Call {
	return &ClientInterface_CreateNotificationEndpointWithBody_Call{Call: _e.mock.On("CreateNotificationEndpointWithBody", ctx, contentType, body)}
}

func (_c *ClientInterface_CreateNotificationEndpointWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientInterface_CreateNotificationEndpointWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_CreateNotificationEndpointWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_CreateNotificationEndpointWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateNotificationRule provides a mock function with given fields: ctx, body
func (_m *ClientInterface) CreateNotificationRule(ctx context.Context, body domain.CreateNotificationRuleJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateNotificationRuleJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateNotificationRuleJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_CreateNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationRule'
type ClientInterface_CreateNotificationRule_Call struct {
	*mock.Call
}

// CreateNotificationRule is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.CreateNotificationRuleJSONRequestBody
func (_e *ClientInterface_Expecter) CreateNotificationRule(ctx interface{}, body interface{}) *ClientInterface_CreateNotificationRule_Call {
	return &ClientInterface_CreateNotificationRule_Call{Call: _e.mock.On("CreateNotificationRule", ctx, body)}
}

func (_c *ClientInterface_CreateNotificationRule_Call) Run(run func(ctx context.Context, body domain.CreateNotificationRuleJSONRequestBody)) *ClientInterface_CreateNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateNotificationRuleJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_CreateNotificationRule_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_CreateNotificationRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateNotificationRuleWithBody provides a mock function with given fields: ctx, contentType, body
func (_m *ClientInterface) CreateNotificationRuleWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_CreateNotificationRuleWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationRuleWithBody'
type ClientInterface_CreateNotificationRuleWithBody_Call struct {
	*mock.Call
}

// CreateNotificationRuleWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) CreateNotificationRuleWithBody(ctx interface{}, contentType interface{}, body interface{}) *ClientInterface_CreateNotificationRuleWithBody_Call {
	return &ClientInterface_CreateNotificationRuleWithBody_Call{Call: _e.mock.On("CreateNotificationRuleWithBody", ctx, contentType, body)}
}

func (_c *ClientInterface_CreateNotificationRuleWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientInterface_CreateNotificationRuleWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_CreateNotificationRuleWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_CreateNotificationRuleWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateStack provides a mock function with given fields: ctx, body
func (_m *ClientInterface) CreateStack(ctx context.Context, body domain.CreateStackJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateStackJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateStackJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_CreateStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStack'
type ClientInterface_CreateStack_Call struct {
	*mock.Call
}

// CreateStack is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.CreateStackJSONRequestBody
func (_e *ClientInterface_Expecter) CreateStack(ctx interface{}, body interface{}) *ClientInterface_CreateStack_Call {
	return &ClientInterface_CreateStack_Call{Call: _e.mock.On("CreateStack", ctx, body)}
}

func (_c *ClientInterface_CreateStack_Call) Run(run func(ctx context.Context, body domain.CreateStackJSONRequestBody)) *ClientInterface_CreateStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateStackJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_CreateStack_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_CreateStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateStackWithBody provides a mock function with given fields: ctx, contentType, body
func (_m *ClientInterface) CreateStackWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_CreateStackWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStackWithBody'
type ClientInterface_CreateStackWithBody_Call struct {
	*mock.Call
}

// CreateStackWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) CreateStackWithBody(ctx interface{}, contentType interface{}, body interface{}) *ClientInterface_CreateStackWithBody_Call {
	return &ClientInterface_CreateStackWithBody_Call{Call: _e.mock.On("CreateStackWithBody", ctx, contentType, body)}
}

func (_c *ClientInterface_CreateStackWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientInterface_CreateStackWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_CreateStackWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_CreateStackWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteAuthorizationsID provides a mock function with given fields: ctx, authID, params
func (_m *ClientInterface) DeleteAuthorizationsID(ctx context.Context, authID string, params *domain.DeleteAuthorizationsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteAuthorizationsIDParams) *http.Response); ok {
		r0 = rf(ctx, authID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteAuthorizationsIDParams) error); ok {
		r1 = rf(ctx, authID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteAuthorizationsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthorizationsID'
type ClientInterface_DeleteAuthorizationsID_Call struct {
	*mock.Call
}

// DeleteAuthorizationsID is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.DeleteAuthorizationsIDParams
func (_e *ClientInterface_Expecter) DeleteAuthorizationsID(ctx interface{}, authID interface{}, params interface{}) *ClientInterface_DeleteAuthorizationsID_Call {
	return &ClientInterface_DeleteAuthorizationsID_Call{Call: _e.mock.On("DeleteAuthorizationsID", ctx, authID, params)}
}

func (_c *ClientInterface_DeleteAuthorizationsID_Call) Run(run func(ctx context.Context, authID string, params *domain.DeleteAuthorizationsIDParams)) *ClientInterface_DeleteAuthorizationsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteAuthorizationsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteAuthorizationsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteAuthorizationsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteBucketsID provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientInterface) DeleteBucketsID(ctx context.Context, bucketID string, params *domain.DeleteBucketsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteBucketsIDParams) *http.Response); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteBucketsIDParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteBucketsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucketsID'
type ClientInterface_DeleteBucketsID_Call struct {
	*mock.Call
}

// DeleteBucketsID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.DeleteBucketsIDParams
func (_e *ClientInterface_Expecter) DeleteBucketsID(ctx interface{}, bucketID interface{}, params interface{}) *ClientInterface_DeleteBucketsID_Call {
	return &ClientInterface_DeleteBucketsID_Call{Call: _e.mock.On("DeleteBucketsID", ctx, bucketID, params)}
}

func (_c *ClientInterface_DeleteBucketsID_Call) Run(run func(ctx context.Context, bucketID string, params *domain.DeleteBucketsIDParams)) *ClientInterface_DeleteBucketsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteBucketsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteBucketsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteBucketsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteBucketsIDLabelsID provides a mock function with given fields: ctx, bucketID, labelID, params
func (_m *ClientInterface) DeleteBucketsIDLabelsID(ctx context.Context, bucketID string, labelID string, params *domain.DeleteBucketsIDLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteBucketsIDLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, bucketID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteBucketsIDLabelsIDParams) error); ok {
		r1 = rf(ctx, bucketID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteBucketsIDLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucketsIDLabelsID'
type ClientInterface_DeleteBucketsIDLabelsID_Call struct {
	*mock.Call
}

// DeleteBucketsIDLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - labelID string
//  - params *domain.DeleteBucketsIDLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteBucketsIDLabelsID(ctx interface{}, bucketID interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteBucketsIDLabelsID_Call {
	return &ClientInterface_DeleteBucketsIDLabelsID_Call{Call: _e.mock.On("DeleteBucketsIDLabelsID", ctx, bucketID, labelID, params)}
}

func (_c *ClientInterface_DeleteBucketsIDLabelsID_Call) Run(run func(ctx context.Context, bucketID string, labelID string, params *domain.DeleteBucketsIDLabelsIDParams)) *ClientInterface_DeleteBucketsIDLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteBucketsIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteBucketsIDLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteBucketsIDLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteBucketsIDMembersID provides a mock function with given fields: ctx, bucketID, userID, params
func (_m *ClientInterface) DeleteBucketsIDMembersID(ctx context.Context, bucketID string, userID string, params *domain.DeleteBucketsIDMembersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteBucketsIDMembersIDParams) *http.Response); ok {
		r0 = rf(ctx, bucketID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteBucketsIDMembersIDParams) error); ok {
		r1 = rf(ctx, bucketID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteBucketsIDMembersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucketsIDMembersID'
type ClientInterface_DeleteBucketsIDMembersID_Call struct {
	*mock.Call
}

// DeleteBucketsIDMembersID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - userID string
//  - params *domain.DeleteBucketsIDMembersIDParams
func (_e *ClientInterface_Expecter) DeleteBucketsIDMembersID(ctx interface{}, bucketID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteBucketsIDMembersID_Call {
	return &ClientInterface_DeleteBucketsIDMembersID_Call{Call: _e.mock.On("DeleteBucketsIDMembersID", ctx, bucketID, userID, params)}
}

func (_c *ClientInterface_DeleteBucketsIDMembersID_Call) Run(run func(ctx context.Context, bucketID string, userID string, params *domain.DeleteBucketsIDMembersIDParams)) *ClientInterface_DeleteBucketsIDMembersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteBucketsIDMembersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteBucketsIDMembersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteBucketsIDMembersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteBucketsIDOwnersID provides a mock function with given fields: ctx, bucketID, userID, params
func (_m *ClientInterface) DeleteBucketsIDOwnersID(ctx context.Context, bucketID string, userID string, params *domain.DeleteBucketsIDOwnersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteBucketsIDOwnersIDParams) *http.Response); ok {
		r0 = rf(ctx, bucketID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteBucketsIDOwnersIDParams) error); ok {
		r1 = rf(ctx, bucketID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteBucketsIDOwnersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucketsIDOwnersID'
type ClientInterface_DeleteBucketsIDOwnersID_Call struct {
	*mock.Call
}

// DeleteBucketsIDOwnersID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - userID string
//  - params *domain.DeleteBucketsIDOwnersIDParams
func (_e *ClientInterface_Expecter) DeleteBucketsIDOwnersID(ctx interface{}, bucketID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteBucketsIDOwnersID_Call {
	return &ClientInterface_DeleteBucketsIDOwnersID_Call{Call: _e.mock.On("DeleteBucketsIDOwnersID", ctx, bucketID, userID, params)}
}

func (_c *ClientInterface_DeleteBucketsIDOwnersID_Call) Run(run func(ctx context.Context, bucketID string, userID string, params *domain.DeleteBucketsIDOwnersIDParams)) *ClientInterface_DeleteBucketsIDOwnersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteBucketsIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteBucketsIDOwnersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteBucketsIDOwnersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteChecksID provides a mock function with given fields: ctx, checkID, params
func (_m *ClientInterface) DeleteChecksID(ctx context.Context, checkID string, params *domain.DeleteChecksIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteChecksIDParams) *http.Response); ok {
		r0 = rf(ctx, checkID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteChecksIDParams) error); ok {
		r1 = rf(ctx, checkID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteChecksID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChecksID'
type ClientInterface_DeleteChecksID_Call struct {
	*mock.Call
}

// DeleteChecksID is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.DeleteChecksIDParams
func (_e *ClientInterface_Expecter) DeleteChecksID(ctx interface{}, checkID interface{}, params interface{}) *ClientInterface_DeleteChecksID_Call {
	return &ClientInterface_DeleteChecksID_Call{Call: _e.mock.On("DeleteChecksID", ctx, checkID, params)}
}

func (_c *ClientInterface_DeleteChecksID_Call) Run(run func(ctx context.Context, checkID string, params *domain.DeleteChecksIDParams)) *ClientInterface_DeleteChecksID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteChecksIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteChecksID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteChecksID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteChecksIDLabelsID provides a mock function with given fields: ctx, checkID, labelID, params
func (_m *ClientInterface) DeleteChecksIDLabelsID(ctx context.Context, checkID string, labelID string, params *domain.DeleteChecksIDLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteChecksIDLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, checkID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteChecksIDLabelsIDParams) error); ok {
		r1 = rf(ctx, checkID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteChecksIDLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChecksIDLabelsID'
type ClientInterface_DeleteChecksIDLabelsID_Call struct {
	*mock.Call
}

// DeleteChecksIDLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - labelID string
//  - params *domain.DeleteChecksIDLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteChecksIDLabelsID(ctx interface{}, checkID interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteChecksIDLabelsID_Call {
	return &ClientInterface_DeleteChecksIDLabelsID_Call{Call: _e.mock.On("DeleteChecksIDLabelsID", ctx, checkID, labelID, params)}
}

func (_c *ClientInterface_DeleteChecksIDLabelsID_Call) Run(run func(ctx context.Context, checkID string, labelID string, params *domain.DeleteChecksIDLabelsIDParams)) *ClientInterface_DeleteChecksIDLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteChecksIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteChecksIDLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteChecksIDLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDBRPID provides a mock function with given fields: ctx, dbrpID, params
func (_m *ClientInterface) DeleteDBRPID(ctx context.Context, dbrpID string, params *domain.DeleteDBRPIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, dbrpID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteDBRPIDParams) *http.Response); ok {
		r0 = rf(ctx, dbrpID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteDBRPIDParams) error); ok {
		r1 = rf(ctx, dbrpID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteDBRPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDBRPID'
type ClientInterface_DeleteDBRPID_Call struct {
	*mock.Call
}

// DeleteDBRPID is a helper method to define mock.On call
//  - ctx context.Context
//  - dbrpID string
//  - params *domain.DeleteDBRPIDParams
func (_e *ClientInterface_Expecter) DeleteDBRPID(ctx interface{}, dbrpID interface{}, params interface{}) *ClientInterface_DeleteDBRPID_Call {
	return &ClientInterface_DeleteDBRPID_Call{Call: _e.mock.On("DeleteDBRPID", ctx, dbrpID, params)}
}

func (_c *ClientInterface_DeleteDBRPID_Call) Run(run func(ctx context.Context, dbrpID string, params *domain.DeleteDBRPIDParams)) *ClientInterface_DeleteDBRPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteDBRPIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteDBRPID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteDBRPID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsID provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientInterface) DeleteDashboardsID(ctx context.Context, dashboardID string, params *domain.DeleteDashboardsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteDashboardsIDParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteDashboardsIDParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteDashboardsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsID'
type ClientInterface_DeleteDashboardsID_Call struct {
	*mock.Call
}

// DeleteDashboardsID is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.DeleteDashboardsIDParams
func (_e *ClientInterface_Expecter) DeleteDashboardsID(ctx interface{}, dashboardID interface{}, params interface{}) *ClientInterface_DeleteDashboardsID_Call {
	return &ClientInterface_DeleteDashboardsID_Call{Call: _e.mock.On("DeleteDashboardsID", ctx, dashboardID, params)}
}

func (_c *ClientInterface_DeleteDashboardsID_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.DeleteDashboardsIDParams)) *ClientInterface_DeleteDashboardsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteDashboardsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteDashboardsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteDashboardsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsIDCellsID provides a mock function with given fields: ctx, dashboardID, cellID, params
func (_m *ClientInterface) DeleteDashboardsIDCellsID(ctx context.Context, dashboardID string, cellID string, params *domain.DeleteDashboardsIDCellsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteDashboardsIDCellsIDParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, cellID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteDashboardsIDCellsIDParams) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteDashboardsIDCellsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsIDCellsID'
type ClientInterface_DeleteDashboardsIDCellsID_Call struct {
	*mock.Call
}

// DeleteDashboardsIDCellsID is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.DeleteDashboardsIDCellsIDParams
func (_e *ClientInterface_Expecter) DeleteDashboardsIDCellsID(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}) *ClientInterface_DeleteDashboardsIDCellsID_Call {
	return &ClientInterface_DeleteDashboardsIDCellsID_Call{Call: _e.mock.On("DeleteDashboardsIDCellsID", ctx, dashboardID, cellID, params)}
}

func (_c *ClientInterface_DeleteDashboardsIDCellsID_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.DeleteDashboardsIDCellsIDParams)) *ClientInterface_DeleteDashboardsIDCellsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteDashboardsIDCellsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteDashboardsIDCellsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteDashboardsIDCellsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsIDLabelsID provides a mock function with given fields: ctx, dashboardID, labelID, params
func (_m *ClientInterface) DeleteDashboardsIDLabelsID(ctx context.Context, dashboardID string, labelID string, params *domain.DeleteDashboardsIDLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteDashboardsIDLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteDashboardsIDLabelsIDParams) error); ok {
		r1 = rf(ctx, dashboardID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteDashboardsIDLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsIDLabelsID'
type ClientInterface_DeleteDashboardsIDLabelsID_Call struct {
	*mock.Call
}

// DeleteDashboardsIDLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - labelID string
//  - params *domain.DeleteDashboardsIDLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteDashboardsIDLabelsID(ctx interface{}, dashboardID interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteDashboardsIDLabelsID_Call {
	return &ClientInterface_DeleteDashboardsIDLabelsID_Call{Call: _e.mock.On("DeleteDashboardsIDLabelsID", ctx, dashboardID, labelID, params)}
}

func (_c *ClientInterface_DeleteDashboardsIDLabelsID_Call) Run(run func(ctx context.Context, dashboardID string, labelID string, params *domain.DeleteDashboardsIDLabelsIDParams)) *ClientInterface_DeleteDashboardsIDLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteDashboardsIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteDashboardsIDLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteDashboardsIDLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsIDMembersID provides a mock function with given fields: ctx, dashboardID, userID, params
func (_m *ClientInterface) DeleteDashboardsIDMembersID(ctx context.Context, dashboardID string, userID string, params *domain.DeleteDashboardsIDMembersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteDashboardsIDMembersIDParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteDashboardsIDMembersIDParams) error); ok {
		r1 = rf(ctx, dashboardID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteDashboardsIDMembersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsIDMembersID'
type ClientInterface_DeleteDashboardsIDMembersID_Call struct {
	*mock.Call
}

// DeleteDashboardsIDMembersID is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - userID string
//  - params *domain.DeleteDashboardsIDMembersIDParams
func (_e *ClientInterface_Expecter) DeleteDashboardsIDMembersID(ctx interface{}, dashboardID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteDashboardsIDMembersID_Call {
	return &ClientInterface_DeleteDashboardsIDMembersID_Call{Call: _e.mock.On("DeleteDashboardsIDMembersID", ctx, dashboardID, userID, params)}
}

func (_c *ClientInterface_DeleteDashboardsIDMembersID_Call) Run(run func(ctx context.Context, dashboardID string, userID string, params *domain.DeleteDashboardsIDMembersIDParams)) *ClientInterface_DeleteDashboardsIDMembersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteDashboardsIDMembersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteDashboardsIDMembersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteDashboardsIDMembersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsIDOwnersID provides a mock function with given fields: ctx, dashboardID, userID, params
func (_m *ClientInterface) DeleteDashboardsIDOwnersID(ctx context.Context, dashboardID string, userID string, params *domain.DeleteDashboardsIDOwnersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteDashboardsIDOwnersIDParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteDashboardsIDOwnersIDParams) error); ok {
		r1 = rf(ctx, dashboardID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteDashboardsIDOwnersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsIDOwnersID'
type ClientInterface_DeleteDashboardsIDOwnersID_Call struct {
	*mock.Call
}

// DeleteDashboardsIDOwnersID is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - userID string
//  - params *domain.DeleteDashboardsIDOwnersIDParams
func (_e *ClientInterface_Expecter) DeleteDashboardsIDOwnersID(ctx interface{}, dashboardID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteDashboardsIDOwnersID_Call {
	return &ClientInterface_DeleteDashboardsIDOwnersID_Call{Call: _e.mock.On("DeleteDashboardsIDOwnersID", ctx, dashboardID, userID, params)}
}

func (_c *ClientInterface_DeleteDashboardsIDOwnersID_Call) Run(run func(ctx context.Context, dashboardID string, userID string, params *domain.DeleteDashboardsIDOwnersIDParams)) *ClientInterface_DeleteDashboardsIDOwnersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteDashboardsIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteDashboardsIDOwnersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteDashboardsIDOwnersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteLabelsID provides a mock function with given fields: ctx, labelID, params
func (_m *ClientInterface) DeleteLabelsID(ctx context.Context, labelID string, params *domain.DeleteLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteLabelsIDParams) error); ok {
		r1 = rf(ctx, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLabelsID'
type ClientInterface_DeleteLabelsID_Call struct {
	*mock.Call
}

// DeleteLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
//  - params *domain.DeleteLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteLabelsID(ctx interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteLabelsID_Call {
	return &ClientInterface_DeleteLabelsID_Call{Call: _e.mock.On("DeleteLabelsID", ctx, labelID, params)}
}

func (_c *ClientInterface_DeleteLabelsID_Call) Run(run func(ctx context.Context, labelID string, params *domain.DeleteLabelsIDParams)) *ClientInterface_DeleteLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteLegacyAuthorizationsID provides a mock function with given fields: ctx, authID, params
func (_m *ClientInterface) DeleteLegacyAuthorizationsID(ctx context.Context, authID string, params *domain.DeleteLegacyAuthorizationsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteLegacyAuthorizationsIDParams) *http.Response); ok {
		r0 = rf(ctx, authID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteLegacyAuthorizationsIDParams) error); ok {
		r1 = rf(ctx, authID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteLegacyAuthorizationsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLegacyAuthorizationsID'
type ClientInterface_DeleteLegacyAuthorizationsID_Call struct {
	*mock.Call
}

// DeleteLegacyAuthorizationsID is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.DeleteLegacyAuthorizationsIDParams
func (_e *ClientInterface_Expecter) DeleteLegacyAuthorizationsID(ctx interface{}, authID interface{}, params interface{}) *ClientInterface_DeleteLegacyAuthorizationsID_Call {
	return &ClientInterface_DeleteLegacyAuthorizationsID_Call{Call: _e.mock.On("DeleteLegacyAuthorizationsID", ctx, authID, params)}
}

func (_c *ClientInterface_DeleteLegacyAuthorizationsID_Call) Run(run func(ctx context.Context, authID string, params *domain.DeleteLegacyAuthorizationsIDParams)) *ClientInterface_DeleteLegacyAuthorizationsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteLegacyAuthorizationsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteLegacyAuthorizationsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteLegacyAuthorizationsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteNotificationEndpointsID provides a mock function with given fields: ctx, endpointID, params
func (_m *ClientInterface) DeleteNotificationEndpointsID(ctx context.Context, endpointID string, params *domain.DeleteNotificationEndpointsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteNotificationEndpointsIDParams) *http.Response); ok {
		r0 = rf(ctx, endpointID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteNotificationEndpointsIDParams) error); ok {
		r1 = rf(ctx, endpointID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteNotificationEndpointsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationEndpointsID'
type ClientInterface_DeleteNotificationEndpointsID_Call struct {
	*mock.Call
}

// DeleteNotificationEndpointsID is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.DeleteNotificationEndpointsIDParams
func (_e *ClientInterface_Expecter) DeleteNotificationEndpointsID(ctx interface{}, endpointID interface{}, params interface{}) *ClientInterface_DeleteNotificationEndpointsID_Call {
	return &ClientInterface_DeleteNotificationEndpointsID_Call{Call: _e.mock.On("DeleteNotificationEndpointsID", ctx, endpointID, params)}
}

func (_c *ClientInterface_DeleteNotificationEndpointsID_Call) Run(run func(ctx context.Context, endpointID string, params *domain.DeleteNotificationEndpointsIDParams)) *ClientInterface_DeleteNotificationEndpointsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteNotificationEndpointsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteNotificationEndpointsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteNotificationEndpointsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteNotificationEndpointsIDLabelsID provides a mock function with given fields: ctx, endpointID, labelID, params
func (_m *ClientInterface) DeleteNotificationEndpointsIDLabelsID(ctx context.Context, endpointID string, labelID string, params *domain.DeleteNotificationEndpointsIDLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteNotificationEndpointsIDLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, endpointID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteNotificationEndpointsIDLabelsIDParams) error); ok {
		r1 = rf(ctx, endpointID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteNotificationEndpointsIDLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationEndpointsIDLabelsID'
type ClientInterface_DeleteNotificationEndpointsIDLabelsID_Call struct {
	*mock.Call
}

// DeleteNotificationEndpointsIDLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - labelID string
//  - params *domain.DeleteNotificationEndpointsIDLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteNotificationEndpointsIDLabelsID(ctx interface{}, endpointID interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteNotificationEndpointsIDLabelsID_Call {
	return &ClientInterface_DeleteNotificationEndpointsIDLabelsID_Call{Call: _e.mock.On("DeleteNotificationEndpointsIDLabelsID", ctx, endpointID, labelID, params)}
}

func (_c *ClientInterface_DeleteNotificationEndpointsIDLabelsID_Call) Run(run func(ctx context.Context, endpointID string, labelID string, params *domain.DeleteNotificationEndpointsIDLabelsIDParams)) *ClientInterface_DeleteNotificationEndpointsIDLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteNotificationEndpointsIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteNotificationEndpointsIDLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteNotificationEndpointsIDLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteNotificationRulesID provides a mock function with given fields: ctx, ruleID, params
func (_m *ClientInterface) DeleteNotificationRulesID(ctx context.Context, ruleID string, params *domain.DeleteNotificationRulesIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteNotificationRulesIDParams) *http.Response); ok {
		r0 = rf(ctx, ruleID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteNotificationRulesIDParams) error); ok {
		r1 = rf(ctx, ruleID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteNotificationRulesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRulesID'
type ClientInterface_DeleteNotificationRulesID_Call struct {
	*mock.Call
}

// DeleteNotificationRulesID is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.DeleteNotificationRulesIDParams
func (_e *ClientInterface_Expecter) DeleteNotificationRulesID(ctx interface{}, ruleID interface{}, params interface{}) *ClientInterface_DeleteNotificationRulesID_Call {
	return &ClientInterface_DeleteNotificationRulesID_Call{Call: _e.mock.On("DeleteNotificationRulesID", ctx, ruleID, params)}
}

func (_c *ClientInterface_DeleteNotificationRulesID_Call) Run(run func(ctx context.Context, ruleID string, params *domain.DeleteNotificationRulesIDParams)) *ClientInterface_DeleteNotificationRulesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteNotificationRulesIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteNotificationRulesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteNotificationRulesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteNotificationRulesIDLabelsID provides a mock function with given fields: ctx, ruleID, labelID, params
func (_m *ClientInterface) DeleteNotificationRulesIDLabelsID(ctx context.Context, ruleID string, labelID string, params *domain.DeleteNotificationRulesIDLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteNotificationRulesIDLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, ruleID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteNotificationRulesIDLabelsIDParams) error); ok {
		r1 = rf(ctx, ruleID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteNotificationRulesIDLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRulesIDLabelsID'
type ClientInterface_DeleteNotificationRulesIDLabelsID_Call struct {
	*mock.Call
}

// DeleteNotificationRulesIDLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - labelID string
//  - params *domain.DeleteNotificationRulesIDLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteNotificationRulesIDLabelsID(ctx interface{}, ruleID interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteNotificationRulesIDLabelsID_Call {
	return &ClientInterface_DeleteNotificationRulesIDLabelsID_Call{Call: _e.mock.On("DeleteNotificationRulesIDLabelsID", ctx, ruleID, labelID, params)}
}

func (_c *ClientInterface_DeleteNotificationRulesIDLabelsID_Call) Run(run func(ctx context.Context, ruleID string, labelID string, params *domain.DeleteNotificationRulesIDLabelsIDParams)) *ClientInterface_DeleteNotificationRulesIDLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteNotificationRulesIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteNotificationRulesIDLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteNotificationRulesIDLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteOrgsID provides a mock function with given fields: ctx, orgID, params
func (_m *ClientInterface) DeleteOrgsID(ctx context.Context, orgID string, params *domain.DeleteOrgsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteOrgsIDParams) *http.Response); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteOrgsIDParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteOrgsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsID'
type ClientInterface_DeleteOrgsID_Call struct {
	*mock.Call
}

// DeleteOrgsID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.DeleteOrgsIDParams
func (_e *ClientInterface_Expecter) DeleteOrgsID(ctx interface{}, orgID interface{}, params interface{}) *ClientInterface_DeleteOrgsID_Call {
	return &ClientInterface_DeleteOrgsID_Call{Call: _e.mock.On("DeleteOrgsID", ctx, orgID, params)}
}

func (_c *ClientInterface_DeleteOrgsID_Call) Run(run func(ctx context.Context, orgID string, params *domain.DeleteOrgsIDParams)) *ClientInterface_DeleteOrgsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteOrgsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteOrgsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteOrgsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteOrgsIDMembersID provides a mock function with given fields: ctx, orgID, userID, params
func (_m *ClientInterface) DeleteOrgsIDMembersID(ctx context.Context, orgID string, userID string, params *domain.DeleteOrgsIDMembersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteOrgsIDMembersIDParams) *http.Response); ok {
		r0 = rf(ctx, orgID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteOrgsIDMembersIDParams) error); ok {
		r1 = rf(ctx, orgID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteOrgsIDMembersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsIDMembersID'
type ClientInterface_DeleteOrgsIDMembersID_Call struct {
	*mock.Call
}

// DeleteOrgsIDMembersID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - userID string
//  - params *domain.DeleteOrgsIDMembersIDParams
func (_e *ClientInterface_Expecter) DeleteOrgsIDMembersID(ctx interface{}, orgID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteOrgsIDMembersID_Call {
	return &ClientInterface_DeleteOrgsIDMembersID_Call{Call: _e.mock.On("DeleteOrgsIDMembersID", ctx, orgID, userID, params)}
}

func (_c *ClientInterface_DeleteOrgsIDMembersID_Call) Run(run func(ctx context.Context, orgID string, userID string, params *domain.DeleteOrgsIDMembersIDParams)) *ClientInterface_DeleteOrgsIDMembersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteOrgsIDMembersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteOrgsIDMembersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteOrgsIDMembersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteOrgsIDOwnersID provides a mock function with given fields: ctx, orgID, userID, params
func (_m *ClientInterface) DeleteOrgsIDOwnersID(ctx context.Context, orgID string, userID string, params *domain.DeleteOrgsIDOwnersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteOrgsIDOwnersIDParams) *http.Response); ok {
		r0 = rf(ctx, orgID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteOrgsIDOwnersIDParams) error); ok {
		r1 = rf(ctx, orgID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteOrgsIDOwnersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsIDOwnersID'
type ClientInterface_DeleteOrgsIDOwnersID_Call struct {
	*mock.Call
}

// DeleteOrgsIDOwnersID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - userID string
//  - params *domain.DeleteOrgsIDOwnersIDParams
func (_e *ClientInterface_Expecter) DeleteOrgsIDOwnersID(ctx interface{}, orgID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteOrgsIDOwnersID_Call {
	return &ClientInterface_DeleteOrgsIDOwnersID_Call{Call: _e.mock.On("DeleteOrgsIDOwnersID", ctx, orgID, userID, params)}
}

func (_c *ClientInterface_DeleteOrgsIDOwnersID_Call) Run(run func(ctx context.Context, orgID string, userID string, params *domain.DeleteOrgsIDOwnersIDParams)) *ClientInterface_DeleteOrgsIDOwnersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteOrgsIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteOrgsIDOwnersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteOrgsIDOwnersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteOrgsIDSecretsID provides a mock function with given fields: ctx, orgID, secretID, params
func (_m *ClientInterface) DeleteOrgsIDSecretsID(ctx context.Context, orgID string, secretID string, params *domain.DeleteOrgsIDSecretsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, secretID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteOrgsIDSecretsIDParams) *http.Response); ok {
		r0 = rf(ctx, orgID, secretID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteOrgsIDSecretsIDParams) error); ok {
		r1 = rf(ctx, orgID, secretID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteOrgsIDSecretsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsIDSecretsID'
type ClientInterface_DeleteOrgsIDSecretsID_Call struct {
	*mock.Call
}

// DeleteOrgsIDSecretsID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - secretID string
//  - params *domain.DeleteOrgsIDSecretsIDParams
func (_e *ClientInterface_Expecter) DeleteOrgsIDSecretsID(ctx interface{}, orgID interface{}, secretID interface{}, params interface{}) *ClientInterface_DeleteOrgsIDSecretsID_Call {
	return &ClientInterface_DeleteOrgsIDSecretsID_Call{Call: _e.mock.On("DeleteOrgsIDSecretsID", ctx, orgID, secretID, params)}
}

func (_c *ClientInterface_DeleteOrgsIDSecretsID_Call) Run(run func(ctx context.Context, orgID string, secretID string, params *domain.DeleteOrgsIDSecretsIDParams)) *ClientInterface_DeleteOrgsIDSecretsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteOrgsIDSecretsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteOrgsIDSecretsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteOrgsIDSecretsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteRemoteConnectionByID provides a mock function with given fields: ctx, remoteID, params
func (_m *ClientInterface) DeleteRemoteConnectionByID(ctx context.Context, remoteID string, params *domain.DeleteRemoteConnectionByIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, remoteID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteRemoteConnectionByIDParams) *http.Response); ok {
		r0 = rf(ctx, remoteID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteRemoteConnectionByIDParams) error); ok {
		r1 = rf(ctx, remoteID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteRemoteConnectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRemoteConnectionByID'
type ClientInterface_DeleteRemoteConnectionByID_Call struct {
	*mock.Call
}

// DeleteRemoteConnectionByID is a helper method to define mock.On call
//  - ctx context.Context
//  - remoteID string
//  - params *domain.DeleteRemoteConnectionByIDParams
func (_e *ClientInterface_Expecter) DeleteRemoteConnectionByID(ctx interface{}, remoteID interface{}, params interface{}) *ClientInterface_DeleteRemoteConnectionByID_Call {
	return &ClientInterface_DeleteRemoteConnectionByID_Call{Call: _e.mock.On("DeleteRemoteConnectionByID", ctx, remoteID, params)}
}

func (_c *ClientInterface_DeleteRemoteConnectionByID_Call) Run(run func(ctx context.Context, remoteID string, params *domain.DeleteRemoteConnectionByIDParams)) *ClientInterface_DeleteRemoteConnectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteRemoteConnectionByIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteRemoteConnectionByID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteRemoteConnectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteReplicationByID provides a mock function with given fields: ctx, replicationID, params
func (_m *ClientInterface) DeleteReplicationByID(ctx context.Context, replicationID string, params *domain.DeleteReplicationByIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, replicationID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteReplicationByIDParams) *http.Response); ok {
		r0 = rf(ctx, replicationID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteReplicationByIDParams) error); ok {
		r1 = rf(ctx, replicationID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteReplicationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReplicationByID'
type ClientInterface_DeleteReplicationByID_Call struct {
	*mock.Call
}

// DeleteReplicationByID is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.DeleteReplicationByIDParams
func (_e *ClientInterface_Expecter) DeleteReplicationByID(ctx interface{}, replicationID interface{}, params interface{}) *ClientInterface_DeleteReplicationByID_Call {
	return &ClientInterface_DeleteReplicationByID_Call{Call: _e.mock.On("DeleteReplicationByID", ctx, replicationID, params)}
}

func (_c *ClientInterface_DeleteReplicationByID_Call) Run(run func(ctx context.Context, replicationID string, params *domain.DeleteReplicationByIDParams)) *ClientInterface_DeleteReplicationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteReplicationByIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteReplicationByID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteReplicationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteScrapersID provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientInterface) DeleteScrapersID(ctx context.Context, scraperTargetID string, params *domain.DeleteScrapersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteScrapersIDParams) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteScrapersIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteScrapersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScrapersID'
type ClientInterface_DeleteScrapersID_Call struct {
	*mock.Call
}

// DeleteScrapersID is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.DeleteScrapersIDParams
func (_e *ClientInterface_Expecter) DeleteScrapersID(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientInterface_DeleteScrapersID_Call {
	return &ClientInterface_DeleteScrapersID_Call{Call: _e.mock.On("DeleteScrapersID", ctx, scraperTargetID, params)}
}

func (_c *ClientInterface_DeleteScrapersID_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.DeleteScrapersIDParams)) *ClientInterface_DeleteScrapersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteScrapersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteScrapersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteScrapersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteScrapersIDLabelsID provides a mock function with given fields: ctx, scraperTargetID, labelID, params
func (_m *ClientInterface) DeleteScrapersIDLabelsID(ctx context.Context, scraperTargetID string, labelID string, params *domain.DeleteScrapersIDLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteScrapersIDLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteScrapersIDLabelsIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteScrapersIDLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScrapersIDLabelsID'
type ClientInterface_DeleteScrapersIDLabelsID_Call struct {
	*mock.Call
}

// DeleteScrapersIDLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - labelID string
//  - params *domain.DeleteScrapersIDLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteScrapersIDLabelsID(ctx interface{}, scraperTargetID interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteScrapersIDLabelsID_Call {
	return &ClientInterface_DeleteScrapersIDLabelsID_Call{Call: _e.mock.On("DeleteScrapersIDLabelsID", ctx, scraperTargetID, labelID, params)}
}

func (_c *ClientInterface_DeleteScrapersIDLabelsID_Call) Run(run func(ctx context.Context, scraperTargetID string, labelID string, params *domain.DeleteScrapersIDLabelsIDParams)) *ClientInterface_DeleteScrapersIDLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteScrapersIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteScrapersIDLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteScrapersIDLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteScrapersIDMembersID provides a mock function with given fields: ctx, scraperTargetID, userID, params
func (_m *ClientInterface) DeleteScrapersIDMembersID(ctx context.Context, scraperTargetID string, userID string, params *domain.DeleteScrapersIDMembersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteScrapersIDMembersIDParams) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteScrapersIDMembersIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteScrapersIDMembersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScrapersIDMembersID'
type ClientInterface_DeleteScrapersIDMembersID_Call struct {
	*mock.Call
}

// DeleteScrapersIDMembersID is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - userID string
//  - params *domain.DeleteScrapersIDMembersIDParams
func (_e *ClientInterface_Expecter) DeleteScrapersIDMembersID(ctx interface{}, scraperTargetID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteScrapersIDMembersID_Call {
	return &ClientInterface_DeleteScrapersIDMembersID_Call{Call: _e.mock.On("DeleteScrapersIDMembersID", ctx, scraperTargetID, userID, params)}
}

func (_c *ClientInterface_DeleteScrapersIDMembersID_Call) Run(run func(ctx context.Context, scraperTargetID string, userID string, params *domain.DeleteScrapersIDMembersIDParams)) *ClientInterface_DeleteScrapersIDMembersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteScrapersIDMembersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteScrapersIDMembersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteScrapersIDMembersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteScrapersIDOwnersID provides a mock function with given fields: ctx, scraperTargetID, userID, params
func (_m *ClientInterface) DeleteScrapersIDOwnersID(ctx context.Context, scraperTargetID string, userID string, params *domain.DeleteScrapersIDOwnersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteScrapersIDOwnersIDParams) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteScrapersIDOwnersIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteScrapersIDOwnersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScrapersIDOwnersID'
type ClientInterface_DeleteScrapersIDOwnersID_Call struct {
	*mock.Call
}

// DeleteScrapersIDOwnersID is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - userID string
//  - params *domain.DeleteScrapersIDOwnersIDParams
func (_e *ClientInterface_Expecter) DeleteScrapersIDOwnersID(ctx interface{}, scraperTargetID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteScrapersIDOwnersID_Call {
	return &ClientInterface_DeleteScrapersIDOwnersID_Call{Call: _e.mock.On("DeleteScrapersIDOwnersID", ctx, scraperTargetID, userID, params)}
}

func (_c *ClientInterface_DeleteScrapersIDOwnersID_Call) Run(run func(ctx context.Context, scraperTargetID string, userID string, params *domain.DeleteScrapersIDOwnersIDParams)) *ClientInterface_DeleteScrapersIDOwnersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteScrapersIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteScrapersIDOwnersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteScrapersIDOwnersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteSourcesID provides a mock function with given fields: ctx, sourceID, params
func (_m *ClientInterface) DeleteSourcesID(ctx context.Context, sourceID string, params *domain.DeleteSourcesIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, sourceID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteSourcesIDParams) *http.Response); ok {
		r0 = rf(ctx, sourceID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteSourcesIDParams) error); ok {
		r1 = rf(ctx, sourceID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteSourcesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSourcesID'
type ClientInterface_DeleteSourcesID_Call struct {
	*mock.Call
}

// DeleteSourcesID is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.DeleteSourcesIDParams
func (_e *ClientInterface_Expecter) DeleteSourcesID(ctx interface{}, sourceID interface{}, params interface{}) *ClientInterface_DeleteSourcesID_Call {
	return &ClientInterface_DeleteSourcesID_Call{Call: _e.mock.On("DeleteSourcesID", ctx, sourceID, params)}
}

func (_c *ClientInterface_DeleteSourcesID_Call) Run(run func(ctx context.Context, sourceID string, params *domain.DeleteSourcesIDParams)) *ClientInterface_DeleteSourcesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteSourcesIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteSourcesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteSourcesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteStack provides a mock function with given fields: ctx, stackId, params
func (_m *ClientInterface) DeleteStack(ctx context.Context, stackId string, params *domain.DeleteStackParams) (*http.Response, error) {
	ret := _m.Called(ctx, stackId, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteStackParams) *http.Response); ok {
		r0 = rf(ctx, stackId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteStackParams) error); ok {
		r1 = rf(ctx, stackId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStack'
type ClientInterface_DeleteStack_Call struct {
	*mock.Call
}

// DeleteStack is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
//  - params *domain.DeleteStackParams
func (_e *ClientInterface_Expecter) DeleteStack(ctx interface{}, stackId interface{}, params interface{}) *ClientInterface_DeleteStack_Call {
	return &ClientInterface_DeleteStack_Call{Call: _e.mock.On("DeleteStack", ctx, stackId, params)}
}

func (_c *ClientInterface_DeleteStack_Call) Run(run func(ctx context.Context, stackId string, params *domain.DeleteStackParams)) *ClientInterface_DeleteStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteStackParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteStack_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksID provides a mock function with given fields: ctx, taskID, params
func (_m *ClientInterface) DeleteTasksID(ctx context.Context, taskID string, params *domain.DeleteTasksIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteTasksIDParams) *http.Response); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteTasksIDParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteTasksID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksID'
type ClientInterface_DeleteTasksID_Call struct {
	*mock.Call
}

// DeleteTasksID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.DeleteTasksIDParams
func (_e *ClientInterface_Expecter) DeleteTasksID(ctx interface{}, taskID interface{}, params interface{}) *ClientInterface_DeleteTasksID_Call {
	return &ClientInterface_DeleteTasksID_Call{Call: _e.mock.On("DeleteTasksID", ctx, taskID, params)}
}

func (_c *ClientInterface_DeleteTasksID_Call) Run(run func(ctx context.Context, taskID string, params *domain.DeleteTasksIDParams)) *ClientInterface_DeleteTasksID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteTasksIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteTasksID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteTasksID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksIDLabelsID provides a mock function with given fields: ctx, taskID, labelID, params
func (_m *ClientInterface) DeleteTasksIDLabelsID(ctx context.Context, taskID string, labelID string, params *domain.DeleteTasksIDLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTasksIDLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, taskID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTasksIDLabelsIDParams) error); ok {
		r1 = rf(ctx, taskID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteTasksIDLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksIDLabelsID'
type ClientInterface_DeleteTasksIDLabelsID_Call struct {
	*mock.Call
}

// DeleteTasksIDLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - labelID string
//  - params *domain.DeleteTasksIDLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteTasksIDLabelsID(ctx interface{}, taskID interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteTasksIDLabelsID_Call {
	return &ClientInterface_DeleteTasksIDLabelsID_Call{Call: _e.mock.On("DeleteTasksIDLabelsID", ctx, taskID, labelID, params)}
}

func (_c *ClientInterface_DeleteTasksIDLabelsID_Call) Run(run func(ctx context.Context, taskID string, labelID string, params *domain.DeleteTasksIDLabelsIDParams)) *ClientInterface_DeleteTasksIDLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTasksIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteTasksIDLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteTasksIDLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksIDMembersID provides a mock function with given fields: ctx, taskID, userID, params
func (_m *ClientInterface) DeleteTasksIDMembersID(ctx context.Context, taskID string, userID string, params *domain.DeleteTasksIDMembersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTasksIDMembersIDParams) *http.Response); ok {
		r0 = rf(ctx, taskID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTasksIDMembersIDParams) error); ok {
		r1 = rf(ctx, taskID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteTasksIDMembersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksIDMembersID'
type ClientInterface_DeleteTasksIDMembersID_Call struct {
	*mock.Call
}

// DeleteTasksIDMembersID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - userID string
//  - params *domain.DeleteTasksIDMembersIDParams
func (_e *ClientInterface_Expecter) DeleteTasksIDMembersID(ctx interface{}, taskID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteTasksIDMembersID_Call {
	return &ClientInterface_DeleteTasksIDMembersID_Call{Call: _e.mock.On("DeleteTasksIDMembersID", ctx, taskID, userID, params)}
}

func (_c *ClientInterface_DeleteTasksIDMembersID_Call) Run(run func(ctx context.Context, taskID string, userID string, params *domain.DeleteTasksIDMembersIDParams)) *ClientInterface_DeleteTasksIDMembersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTasksIDMembersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteTasksIDMembersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteTasksIDMembersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksIDOwnersID provides a mock function with given fields: ctx, taskID, userID, params
func (_m *ClientInterface) DeleteTasksIDOwnersID(ctx context.Context, taskID string, userID string, params *domain.DeleteTasksIDOwnersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTasksIDOwnersIDParams) *http.Response); ok {
		r0 = rf(ctx, taskID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTasksIDOwnersIDParams) error); ok {
		r1 = rf(ctx, taskID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteTasksIDOwnersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksIDOwnersID'
type ClientInterface_DeleteTasksIDOwnersID_Call struct {
	*mock.Call
}

// DeleteTasksIDOwnersID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - userID string
//  - params *domain.DeleteTasksIDOwnersIDParams
func (_e *ClientInterface_Expecter) DeleteTasksIDOwnersID(ctx interface{}, taskID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteTasksIDOwnersID_Call {
	return &ClientInterface_DeleteTasksIDOwnersID_Call{Call: _e.mock.On("DeleteTasksIDOwnersID", ctx, taskID, userID, params)}
}

func (_c *ClientInterface_DeleteTasksIDOwnersID_Call) Run(run func(ctx context.Context, taskID string, userID string, params *domain.DeleteTasksIDOwnersIDParams)) *ClientInterface_DeleteTasksIDOwnersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTasksIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteTasksIDOwnersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteTasksIDOwnersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksIDRunsID provides a mock function with given fields: ctx, taskID, runID, params
func (_m *ClientInterface) DeleteTasksIDRunsID(ctx context.Context, taskID string, runID string, params *domain.DeleteTasksIDRunsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, runID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTasksIDRunsIDParams) *http.Response); ok {
		r0 = rf(ctx, taskID, runID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTasksIDRunsIDParams) error); ok {
		r1 = rf(ctx, taskID, runID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteTasksIDRunsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksIDRunsID'
type ClientInterface_DeleteTasksIDRunsID_Call struct {
	*mock.Call
}

// DeleteTasksIDRunsID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
//  - params *domain.DeleteTasksIDRunsIDParams
func (_e *ClientInterface_Expecter) DeleteTasksIDRunsID(ctx interface{}, taskID interface{}, runID interface{}, params interface{}) *ClientInterface_DeleteTasksIDRunsID_Call {
	return &ClientInterface_DeleteTasksIDRunsID_Call{Call: _e.mock.On("DeleteTasksIDRunsID", ctx, taskID, runID, params)}
}

func (_c *ClientInterface_DeleteTasksIDRunsID_Call) Run(run func(ctx context.Context, taskID string, runID string, params *domain.DeleteTasksIDRunsIDParams)) *ClientInterface_DeleteTasksIDRunsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTasksIDRunsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteTasksIDRunsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteTasksIDRunsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTelegrafsID provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientInterface) DeleteTelegrafsID(ctx context.Context, telegrafID string, params *domain.DeleteTelegrafsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteTelegrafsIDParams) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteTelegrafsIDParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteTelegrafsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTelegrafsID'
type ClientInterface_DeleteTelegrafsID_Call struct {
	*mock.Call
}

// DeleteTelegrafsID is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.DeleteTelegrafsIDParams
func (_e *ClientInterface_Expecter) DeleteTelegrafsID(ctx interface{}, telegrafID interface{}, params interface{}) *ClientInterface_DeleteTelegrafsID_Call {
	return &ClientInterface_DeleteTelegrafsID_Call{Call: _e.mock.On("DeleteTelegrafsID", ctx, telegrafID, params)}
}

func (_c *ClientInterface_DeleteTelegrafsID_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.DeleteTelegrafsIDParams)) *ClientInterface_DeleteTelegrafsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteTelegrafsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteTelegrafsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteTelegrafsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTelegrafsIDLabelsID provides a mock function with given fields: ctx, telegrafID, labelID, params
func (_m *ClientInterface) DeleteTelegrafsIDLabelsID(ctx context.Context, telegrafID string, labelID string, params *domain.DeleteTelegrafsIDLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTelegrafsIDLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, telegrafID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTelegrafsIDLabelsIDParams) error); ok {
		r1 = rf(ctx, telegrafID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteTelegrafsIDLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTelegrafsIDLabelsID'
type ClientInterface_DeleteTelegrafsIDLabelsID_Call struct {
	*mock.Call
}

// DeleteTelegrafsIDLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - labelID string
//  - params *domain.DeleteTelegrafsIDLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteTelegrafsIDLabelsID(ctx interface{}, telegrafID interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteTelegrafsIDLabelsID_Call {
	return &ClientInterface_DeleteTelegrafsIDLabelsID_Call{Call: _e.mock.On("DeleteTelegrafsIDLabelsID", ctx, telegrafID, labelID, params)}
}

func (_c *ClientInterface_DeleteTelegrafsIDLabelsID_Call) Run(run func(ctx context.Context, telegrafID string, labelID string, params *domain.DeleteTelegrafsIDLabelsIDParams)) *ClientInterface_DeleteTelegrafsIDLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTelegrafsIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteTelegrafsIDLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteTelegrafsIDLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTelegrafsIDMembersID provides a mock function with given fields: ctx, telegrafID, userID, params
func (_m *ClientInterface) DeleteTelegrafsIDMembersID(ctx context.Context, telegrafID string, userID string, params *domain.DeleteTelegrafsIDMembersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTelegrafsIDMembersIDParams) *http.Response); ok {
		r0 = rf(ctx, telegrafID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTelegrafsIDMembersIDParams) error); ok {
		r1 = rf(ctx, telegrafID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteTelegrafsIDMembersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTelegrafsIDMembersID'
type ClientInterface_DeleteTelegrafsIDMembersID_Call struct {
	*mock.Call
}

// DeleteTelegrafsIDMembersID is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - userID string
//  - params *domain.DeleteTelegrafsIDMembersIDParams
func (_e *ClientInterface_Expecter) DeleteTelegrafsIDMembersID(ctx interface{}, telegrafID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteTelegrafsIDMembersID_Call {
	return &ClientInterface_DeleteTelegrafsIDMembersID_Call{Call: _e.mock.On("DeleteTelegrafsIDMembersID", ctx, telegrafID, userID, params)}
}

func (_c *ClientInterface_DeleteTelegrafsIDMembersID_Call) Run(run func(ctx context.Context, telegrafID string, userID string, params *domain.DeleteTelegrafsIDMembersIDParams)) *ClientInterface_DeleteTelegrafsIDMembersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTelegrafsIDMembersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteTelegrafsIDMembersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteTelegrafsIDMembersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTelegrafsIDOwnersID provides a mock function with given fields: ctx, telegrafID, userID, params
func (_m *ClientInterface) DeleteTelegrafsIDOwnersID(ctx context.Context, telegrafID string, userID string, params *domain.DeleteTelegrafsIDOwnersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTelegrafsIDOwnersIDParams) *http.Response); ok {
		r0 = rf(ctx, telegrafID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTelegrafsIDOwnersIDParams) error); ok {
		r1 = rf(ctx, telegrafID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteTelegrafsIDOwnersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTelegrafsIDOwnersID'
type ClientInterface_DeleteTelegrafsIDOwnersID_Call struct {
	*mock.Call
}

// DeleteTelegrafsIDOwnersID is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - userID string
//  - params *domain.DeleteTelegrafsIDOwnersIDParams
func (_e *ClientInterface_Expecter) DeleteTelegrafsIDOwnersID(ctx interface{}, telegrafID interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteTelegrafsIDOwnersID_Call {
	return &ClientInterface_DeleteTelegrafsIDOwnersID_Call{Call: _e.mock.On("DeleteTelegrafsIDOwnersID", ctx, telegrafID, userID, params)}
}

func (_c *ClientInterface_DeleteTelegrafsIDOwnersID_Call) Run(run func(ctx context.Context, telegrafID string, userID string, params *domain.DeleteTelegrafsIDOwnersIDParams)) *ClientInterface_DeleteTelegrafsIDOwnersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTelegrafsIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteTelegrafsIDOwnersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteTelegrafsIDOwnersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteUsersID provides a mock function with given fields: ctx, userID, params
func (_m *ClientInterface) DeleteUsersID(ctx context.Context, userID string, params *domain.DeleteUsersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteUsersIDParams) *http.Response); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteUsersIDParams) error); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteUsersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUsersID'
type ClientInterface_DeleteUsersID_Call struct {
	*mock.Call
}

// DeleteUsersID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.DeleteUsersIDParams
func (_e *ClientInterface_Expecter) DeleteUsersID(ctx interface{}, userID interface{}, params interface{}) *ClientInterface_DeleteUsersID_Call {
	return &ClientInterface_DeleteUsersID_Call{Call: _e.mock.On("DeleteUsersID", ctx, userID, params)}
}

func (_c *ClientInterface_DeleteUsersID_Call) Run(run func(ctx context.Context, userID string, params *domain.DeleteUsersIDParams)) *ClientInterface_DeleteUsersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteUsersIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteUsersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteUsersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteVariablesID provides a mock function with given fields: ctx, variableID, params
func (_m *ClientInterface) DeleteVariablesID(ctx context.Context, variableID string, params *domain.DeleteVariablesIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteVariablesIDParams) *http.Response); ok {
		r0 = rf(ctx, variableID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteVariablesIDParams) error); ok {
		r1 = rf(ctx, variableID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteVariablesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVariablesID'
type ClientInterface_DeleteVariablesID_Call struct {
	*mock.Call
}

// DeleteVariablesID is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.DeleteVariablesIDParams
func (_e *ClientInterface_Expecter) DeleteVariablesID(ctx interface{}, variableID interface{}, params interface{}) *ClientInterface_DeleteVariablesID_Call {
	return &ClientInterface_DeleteVariablesID_Call{Call: _e.mock.On("DeleteVariablesID", ctx, variableID, params)}
}

func (_c *ClientInterface_DeleteVariablesID_Call) Run(run func(ctx context.Context, variableID string, params *domain.DeleteVariablesIDParams)) *ClientInterface_DeleteVariablesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteVariablesIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteVariablesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteVariablesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteVariablesIDLabelsID provides a mock function with given fields: ctx, variableID, labelID, params
func (_m *ClientInterface) DeleteVariablesIDLabelsID(ctx context.Context, variableID string, labelID string, params *domain.DeleteVariablesIDLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteVariablesIDLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, variableID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteVariablesIDLabelsIDParams) error); ok {
		r1 = rf(ctx, variableID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_DeleteVariablesIDLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVariablesIDLabelsID'
type ClientInterface_DeleteVariablesIDLabelsID_Call struct {
	*mock.Call
}

// DeleteVariablesIDLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - labelID string
//  - params *domain.DeleteVariablesIDLabelsIDParams
func (_e *ClientInterface_Expecter) DeleteVariablesIDLabelsID(ctx interface{}, variableID interface{}, labelID interface{}, params interface{}) *ClientInterface_DeleteVariablesIDLabelsID_Call {
	return &ClientInterface_DeleteVariablesIDLabelsID_Call{Call: _e.mock.On("DeleteVariablesIDLabelsID", ctx, variableID, labelID, params)}
}

func (_c *ClientInterface_DeleteVariablesIDLabelsID_Call) Run(run func(ctx context.Context, variableID string, labelID string, params *domain.DeleteVariablesIDLabelsIDParams)) *ClientInterface_DeleteVariablesIDLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteVariablesIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_DeleteVariablesIDLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_DeleteVariablesIDLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ExportTemplate provides a mock function with given fields: ctx, body
func (_m *ClientInterface) ExportTemplate(ctx context.Context, body domain.ExportTemplateJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, domain.ExportTemplateJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ExportTemplateJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_ExportTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTemplate'
type ClientInterface_ExportTemplate_Call struct {
	*mock.Call
}

// ExportTemplate is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.ExportTemplateJSONRequestBody
func (_e *ClientInterface_Expecter) ExportTemplate(ctx interface{}, body interface{}) *ClientInterface_ExportTemplate_Call {
	return &ClientInterface_ExportTemplate_Call{Call: _e.mock.On("ExportTemplate", ctx, body)}
}

func (_c *ClientInterface_ExportTemplate_Call) Run(run func(ctx context.Context, body domain.ExportTemplateJSONRequestBody)) *ClientInterface_ExportTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ExportTemplateJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_ExportTemplate_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_ExportTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ExportTemplateWithBody provides a mock function with given fields: ctx, contentType, body
func (_m *ClientInterface) ExportTemplateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_ExportTemplateWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTemplateWithBody'
type ClientInterface_ExportTemplateWithBody_Call struct {
	*mock.Call
}

// ExportTemplateWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) ExportTemplateWithBody(ctx interface{}, contentType interface{}, body interface{}) *ClientInterface_ExportTemplateWithBody_Call {
	return &ClientInterface_ExportTemplateWithBody_Call{Call: _e.mock.On("ExportTemplateWithBody", ctx, contentType, body)}
}

func (_c *ClientInterface_ExportTemplateWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientInterface_ExportTemplateWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_ExportTemplateWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_ExportTemplateWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAuthorizations provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetAuthorizations(ctx context.Context, params *domain.GetAuthorizationsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetAuthorizationsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetAuthorizationsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetAuthorizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizations'
type ClientInterface_GetAuthorizations_Call struct {
	*mock.Call
}

// GetAuthorizations is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetAuthorizationsParams
func (_e *ClientInterface_Expecter) GetAuthorizations(ctx interface{}, params interface{}) *ClientInterface_GetAuthorizations_Call {
	return &ClientInterface_GetAuthorizations_Call{Call: _e.mock.On("GetAuthorizations", ctx, params)}
}

func (_c *ClientInterface_GetAuthorizations_Call) Run(run func(ctx context.Context, params *domain.GetAuthorizationsParams)) *ClientInterface_GetAuthorizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetAuthorizationsParams))
	})
	return _c
}

func (_c *ClientInterface_GetAuthorizations_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetAuthorizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAuthorizationsID provides a mock function with given fields: ctx, authID, params
func (_m *ClientInterface) GetAuthorizationsID(ctx context.Context, authID string, params *domain.GetAuthorizationsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetAuthorizationsIDParams) *http.Response); ok {
		r0 = rf(ctx, authID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetAuthorizationsIDParams) error); ok {
		r1 = rf(ctx, authID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetAuthorizationsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationsID'
type ClientInterface_GetAuthorizationsID_Call struct {
	*mock.Call
}

// GetAuthorizationsID is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.GetAuthorizationsIDParams
func (_e *ClientInterface_Expecter) GetAuthorizationsID(ctx interface{}, authID interface{}, params interface{}) *ClientInterface_GetAuthorizationsID_Call {
	return &ClientInterface_GetAuthorizationsID_Call{Call: _e.mock.On("GetAuthorizationsID", ctx, authID, params)}
}

func (_c *ClientInterface_GetAuthorizationsID_Call) Run(run func(ctx context.Context, authID string, params *domain.GetAuthorizationsIDParams)) *ClientInterface_GetAuthorizationsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetAuthorizationsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetAuthorizationsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetAuthorizationsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBackupKV provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetBackupKV(ctx context.Context, params *domain.GetBackupKVParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetBackupKVParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetBackupKVParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetBackupKV_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupKV'
type ClientInterface_GetBackupKV_Call struct {
	*mock.Call
}

// GetBackupKV is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetBackupKVParams
func (_e *ClientInterface_Expecter) GetBackupKV(ctx interface{}, params interface{}) *ClientInterface_GetBackupKV_Call {
	return &ClientInterface_GetBackupKV_Call{Call: _e.mock.On("GetBackupKV", ctx, params)}
}

func (_c *ClientInterface_GetBackupKV_Call) Run(run func(ctx context.Context, params *domain.GetBackupKVParams)) *ClientInterface_GetBackupKV_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetBackupKVParams))
	})
	return _c
}

func (_c *ClientInterface_GetBackupKV_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetBackupKV_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBackupMetadata provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetBackupMetadata(ctx context.Context, params *domain.GetBackupMetadataParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetBackupMetadataParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetBackupMetadataParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetBackupMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupMetadata'
type ClientInterface_GetBackupMetadata_Call struct {
	*mock.Call
}

// GetBackupMetadata is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetBackupMetadataParams
func (_e *ClientInterface_Expecter) GetBackupMetadata(ctx interface{}, params interface{}) *ClientInterface_GetBackupMetadata_Call {
	return &ClientInterface_GetBackupMetadata_Call{Call: _e.mock.On("GetBackupMetadata", ctx, params)}
}

func (_c *ClientInterface_GetBackupMetadata_Call) Run(run func(ctx context.Context, params *domain.GetBackupMetadataParams)) *ClientInterface_GetBackupMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetBackupMetadataParams))
	})
	return _c
}

func (_c *ClientInterface_GetBackupMetadata_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetBackupMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBackupShardId provides a mock function with given fields: ctx, shardID, params
func (_m *ClientInterface) GetBackupShardId(ctx context.Context, shardID int64, params *domain.GetBackupShardIdParams) (*http.Response, error) {
	ret := _m.Called(ctx, shardID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.GetBackupShardIdParams) *http.Response); ok {
		r0 = rf(ctx, shardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *domain.GetBackupShardIdParams) error); ok {
		r1 = rf(ctx, shardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetBackupShardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupShardId'
type ClientInterface_GetBackupShardId_Call struct {
	*mock.Call
}

// GetBackupShardId is a helper method to define mock.On call
//  - ctx context.Context
//  - shardID int64
//  - params *domain.GetBackupShardIdParams
func (_e *ClientInterface_Expecter) GetBackupShardId(ctx interface{}, shardID interface{}, params interface{}) *ClientInterface_GetBackupShardId_Call {
	return &ClientInterface_GetBackupShardId_Call{Call: _e.mock.On("GetBackupShardId", ctx, shardID, params)}
}

func (_c *ClientInterface_GetBackupShardId_Call) Run(run func(ctx context.Context, shardID int64, params *domain.GetBackupShardIdParams)) *ClientInterface_GetBackupShardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.GetBackupShardIdParams))
	})
	return _c
}

func (_c *ClientInterface_GetBackupShardId_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetBackupShardId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBuckets provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetBuckets(ctx context.Context, params *domain.GetBucketsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetBucketsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetBucketsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuckets'
type ClientInterface_GetBuckets_Call struct {
	*mock.Call
}

// GetBuckets is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetBucketsParams
func (_e *ClientInterface_Expecter) GetBuckets(ctx interface{}, params interface{}) *ClientInterface_GetBuckets_Call {
	return &ClientInterface_GetBuckets_Call{Call: _e.mock.On("GetBuckets", ctx, params)}
}

func (_c *ClientInterface_GetBuckets_Call) Run(run func(ctx context.Context, params *domain.GetBucketsParams)) *ClientInterface_GetBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetBucketsParams))
	})
	return _c
}

func (_c *ClientInterface_GetBuckets_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetBuckets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBucketsID provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientInterface) GetBucketsID(ctx context.Context, bucketID string, params *domain.GetBucketsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetBucketsIDParams) *http.Response); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetBucketsIDParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetBucketsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketsID'
type ClientInterface_GetBucketsID_Call struct {
	*mock.Call
}

// GetBucketsID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.GetBucketsIDParams
func (_e *ClientInterface_Expecter) GetBucketsID(ctx interface{}, bucketID interface{}, params interface{}) *ClientInterface_GetBucketsID_Call {
	return &ClientInterface_GetBucketsID_Call{Call: _e.mock.On("GetBucketsID", ctx, bucketID, params)}
}

func (_c *ClientInterface_GetBucketsID_Call) Run(run func(ctx context.Context, bucketID string, params *domain.GetBucketsIDParams)) *ClientInterface_GetBucketsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetBucketsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetBucketsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetBucketsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBucketsIDLabels provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientInterface) GetBucketsIDLabels(ctx context.Context, bucketID string, params *domain.GetBucketsIDLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetBucketsIDLabelsParams) *http.Response); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetBucketsIDLabelsParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetBucketsIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketsIDLabels'
type ClientInterface_GetBucketsIDLabels_Call struct {
	*mock.Call
}

// GetBucketsIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.GetBucketsIDLabelsParams
func (_e *ClientInterface_Expecter) GetBucketsIDLabels(ctx interface{}, bucketID interface{}, params interface{}) *ClientInterface_GetBucketsIDLabels_Call {
	return &ClientInterface_GetBucketsIDLabels_Call{Call: _e.mock.On("GetBucketsIDLabels", ctx, bucketID, params)}
}

func (_c *ClientInterface_GetBucketsIDLabels_Call) Run(run func(ctx context.Context, bucketID string, params *domain.GetBucketsIDLabelsParams)) *ClientInterface_GetBucketsIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetBucketsIDLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetBucketsIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetBucketsIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBucketsIDMembers provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientInterface) GetBucketsIDMembers(ctx context.Context, bucketID string, params *domain.GetBucketsIDMembersParams) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetBucketsIDMembersParams) *http.Response); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetBucketsIDMembersParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetBucketsIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketsIDMembers'
type ClientInterface_GetBucketsIDMembers_Call struct {
	*mock.Call
}

// GetBucketsIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.GetBucketsIDMembersParams
func (_e *ClientInterface_Expecter) GetBucketsIDMembers(ctx interface{}, bucketID interface{}, params interface{}) *ClientInterface_GetBucketsIDMembers_Call {
	return &ClientInterface_GetBucketsIDMembers_Call{Call: _e.mock.On("GetBucketsIDMembers", ctx, bucketID, params)}
}

func (_c *ClientInterface_GetBucketsIDMembers_Call) Run(run func(ctx context.Context, bucketID string, params *domain.GetBucketsIDMembersParams)) *ClientInterface_GetBucketsIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetBucketsIDMembersParams))
	})
	return _c
}

func (_c *ClientInterface_GetBucketsIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetBucketsIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBucketsIDOwners provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientInterface) GetBucketsIDOwners(ctx context.Context, bucketID string, params *domain.GetBucketsIDOwnersParams) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetBucketsIDOwnersParams) *http.Response); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetBucketsIDOwnersParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetBucketsIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketsIDOwners'
type ClientInterface_GetBucketsIDOwners_Call struct {
	*mock.Call
}

// GetBucketsIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.GetBucketsIDOwnersParams
func (_e *ClientInterface_Expecter) GetBucketsIDOwners(ctx interface{}, bucketID interface{}, params interface{}) *ClientInterface_GetBucketsIDOwners_Call {
	return &ClientInterface_GetBucketsIDOwners_Call{Call: _e.mock.On("GetBucketsIDOwners", ctx, bucketID, params)}
}

func (_c *ClientInterface_GetBucketsIDOwners_Call) Run(run func(ctx context.Context, bucketID string, params *domain.GetBucketsIDOwnersParams)) *ClientInterface_GetBucketsIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetBucketsIDOwnersParams))
	})
	return _c
}

func (_c *ClientInterface_GetBucketsIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetBucketsIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetChecks provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetChecks(ctx context.Context, params *domain.GetChecksParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetChecksParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetChecksParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecks'
type ClientInterface_GetChecks_Call struct {
	*mock.Call
}

// GetChecks is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetChecksParams
func (_e *ClientInterface_Expecter) GetChecks(ctx interface{}, params interface{}) *ClientInterface_GetChecks_Call {
	return &ClientInterface_GetChecks_Call{Call: _e.mock.On("GetChecks", ctx, params)}
}

func (_c *ClientInterface_GetChecks_Call) Run(run func(ctx context.Context, params *domain.GetChecksParams)) *ClientInterface_GetChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetChecksParams))
	})
	return _c
}

func (_c *ClientInterface_GetChecks_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetChecks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetChecksID provides a mock function with given fields: ctx, checkID, params
func (_m *ClientInterface) GetChecksID(ctx context.Context, checkID string, params *domain.GetChecksIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetChecksIDParams) *http.Response); ok {
		r0 = rf(ctx, checkID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetChecksIDParams) error); ok {
		r1 = rf(ctx, checkID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetChecksID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksID'
type ClientInterface_GetChecksID_Call struct {
	*mock.Call
}

// GetChecksID is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.GetChecksIDParams
func (_e *ClientInterface_Expecter) GetChecksID(ctx interface{}, checkID interface{}, params interface{}) *ClientInterface_GetChecksID_Call {
	return &ClientInterface_GetChecksID_Call{Call: _e.mock.On("GetChecksID", ctx, checkID, params)}
}

func (_c *ClientInterface_GetChecksID_Call) Run(run func(ctx context.Context, checkID string, params *domain.GetChecksIDParams)) *ClientInterface_GetChecksID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetChecksIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetChecksID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetChecksID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetChecksIDLabels provides a mock function with given fields: ctx, checkID, params
func (_m *ClientInterface) GetChecksIDLabels(ctx context.Context, checkID string, params *domain.GetChecksIDLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetChecksIDLabelsParams) *http.Response); ok {
		r0 = rf(ctx, checkID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetChecksIDLabelsParams) error); ok {
		r1 = rf(ctx, checkID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetChecksIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksIDLabels'
type ClientInterface_GetChecksIDLabels_Call struct {
	*mock.Call
}

// GetChecksIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.GetChecksIDLabelsParams
func (_e *ClientInterface_Expecter) GetChecksIDLabels(ctx interface{}, checkID interface{}, params interface{}) *ClientInterface_GetChecksIDLabels_Call {
	return &ClientInterface_GetChecksIDLabels_Call{Call: _e.mock.On("GetChecksIDLabels", ctx, checkID, params)}
}

func (_c *ClientInterface_GetChecksIDLabels_Call) Run(run func(ctx context.Context, checkID string, params *domain.GetChecksIDLabelsParams)) *ClientInterface_GetChecksIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetChecksIDLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetChecksIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetChecksIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetChecksIDQuery provides a mock function with given fields: ctx, checkID, params
func (_m *ClientInterface) GetChecksIDQuery(ctx context.Context, checkID string, params *domain.GetChecksIDQueryParams) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetChecksIDQueryParams) *http.Response); ok {
		r0 = rf(ctx, checkID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetChecksIDQueryParams) error); ok {
		r1 = rf(ctx, checkID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetChecksIDQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksIDQuery'
type ClientInterface_GetChecksIDQuery_Call struct {
	*mock.Call
}

// GetChecksIDQuery is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.GetChecksIDQueryParams
func (_e *ClientInterface_Expecter) GetChecksIDQuery(ctx interface{}, checkID interface{}, params interface{}) *ClientInterface_GetChecksIDQuery_Call {
	return &ClientInterface_GetChecksIDQuery_Call{Call: _e.mock.On("GetChecksIDQuery", ctx, checkID, params)}
}

func (_c *ClientInterface_GetChecksIDQuery_Call) Run(run func(ctx context.Context, checkID string, params *domain.GetChecksIDQueryParams)) *ClientInterface_GetChecksIDQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetChecksIDQueryParams))
	})
	return _c
}

func (_c *ClientInterface_GetChecksIDQuery_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetChecksIDQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetConfig provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetConfig(ctx context.Context, params *domain.GetConfigParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetConfigParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetConfigParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type ClientInterface_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetConfigParams
func (_e *ClientInterface_Expecter) GetConfig(ctx interface{}, params interface{}) *ClientInterface_GetConfig_Call {
	return &ClientInterface_GetConfig_Call{Call: _e.mock.On("GetConfig", ctx, params)}
}

func (_c *ClientInterface_GetConfig_Call) Run(run func(ctx context.Context, params *domain.GetConfigParams)) *ClientInterface_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetConfigParams))
	})
	return _c
}

func (_c *ClientInterface_GetConfig_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDBRPs provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetDBRPs(ctx context.Context, params *domain.GetDBRPsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetDBRPsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetDBRPsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetDBRPs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDBRPs'
type ClientInterface_GetDBRPs_Call struct {
	*mock.Call
}

// GetDBRPs is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetDBRPsParams
func (_e *ClientInterface_Expecter) GetDBRPs(ctx interface{}, params interface{}) *ClientInterface_GetDBRPs_Call {
	return &ClientInterface_GetDBRPs_Call{Call: _e.mock.On("GetDBRPs", ctx, params)}
}

func (_c *ClientInterface_GetDBRPs_Call) Run(run func(ctx context.Context, params *domain.GetDBRPsParams)) *ClientInterface_GetDBRPs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetDBRPsParams))
	})
	return _c
}

func (_c *ClientInterface_GetDBRPs_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetDBRPs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDBRPsID provides a mock function with given fields: ctx, dbrpID, params
func (_m *ClientInterface) GetDBRPsID(ctx context.Context, dbrpID string, params *domain.GetDBRPsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, dbrpID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDBRPsIDParams) *http.Response); ok {
		r0 = rf(ctx, dbrpID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDBRPsIDParams) error); ok {
		r1 = rf(ctx, dbrpID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetDBRPsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDBRPsID'
type ClientInterface_GetDBRPsID_Call struct {
	*mock.Call
}

// GetDBRPsID is a helper method to define mock.On call
//  - ctx context.Context
//  - dbrpID string
//  - params *domain.GetDBRPsIDParams
func (_e *ClientInterface_Expecter) GetDBRPsID(ctx interface{}, dbrpID interface{}, params interface{}) *ClientInterface_GetDBRPsID_Call {
	return &ClientInterface_GetDBRPsID_Call{Call: _e.mock.On("GetDBRPsID", ctx, dbrpID, params)}
}

func (_c *ClientInterface_GetDBRPsID_Call) Run(run func(ctx context.Context, dbrpID string, params *domain.GetDBRPsIDParams)) *ClientInterface_GetDBRPsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDBRPsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetDBRPsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetDBRPsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboards provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetDashboards(ctx context.Context, params *domain.GetDashboardsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetDashboardsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetDashboardsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboards'
type ClientInterface_GetDashboards_Call struct {
	*mock.Call
}

// GetDashboards is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetDashboardsParams
func (_e *ClientInterface_Expecter) GetDashboards(ctx interface{}, params interface{}) *ClientInterface_GetDashboards_Call {
	return &ClientInterface_GetDashboards_Call{Call: _e.mock.On("GetDashboards", ctx, params)}
}

func (_c *ClientInterface_GetDashboards_Call) Run(run func(ctx context.Context, params *domain.GetDashboardsParams)) *ClientInterface_GetDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetDashboardsParams))
	})
	return _c
}

func (_c *ClientInterface_GetDashboards_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetDashboards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsID provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientInterface) GetDashboardsID(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDashboardsIDParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDashboardsIDParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetDashboardsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsID'
type ClientInterface_GetDashboardsID_Call struct {
	*mock.Call
}

// GetDashboardsID is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.GetDashboardsIDParams
func (_e *ClientInterface_Expecter) GetDashboardsID(ctx interface{}, dashboardID interface{}, params interface{}) *ClientInterface_GetDashboardsID_Call {
	return &ClientInterface_GetDashboardsID_Call{Call: _e.mock.On("GetDashboardsID", ctx, dashboardID, params)}
}

func (_c *ClientInterface_GetDashboardsID_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDParams)) *ClientInterface_GetDashboardsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDashboardsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetDashboardsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetDashboardsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsIDCellsIDView provides a mock function with given fields: ctx, dashboardID, cellID, params
func (_m *ClientInterface) GetDashboardsIDCellsIDView(ctx context.Context, dashboardID string, cellID string, params *domain.GetDashboardsIDCellsIDViewParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.GetDashboardsIDCellsIDViewParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, cellID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.GetDashboardsIDCellsIDViewParams) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetDashboardsIDCellsIDView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsIDCellsIDView'
type ClientInterface_GetDashboardsIDCellsIDView_Call struct {
	*mock.Call
}

// GetDashboardsIDCellsIDView is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.GetDashboardsIDCellsIDViewParams
func (_e *ClientInterface_Expecter) GetDashboardsIDCellsIDView(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}) *ClientInterface_GetDashboardsIDCellsIDView_Call {
	return &ClientInterface_GetDashboardsIDCellsIDView_Call{Call: _e.mock.On("GetDashboardsIDCellsIDView", ctx, dashboardID, cellID, params)}
}

func (_c *ClientInterface_GetDashboardsIDCellsIDView_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.GetDashboardsIDCellsIDViewParams)) *ClientInterface_GetDashboardsIDCellsIDView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.GetDashboardsIDCellsIDViewParams))
	})
	return _c
}

func (_c *ClientInterface_GetDashboardsIDCellsIDView_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetDashboardsIDCellsIDView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsIDLabels provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientInterface) GetDashboardsIDLabels(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDashboardsIDLabelsParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDashboardsIDLabelsParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetDashboardsIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsIDLabels'
type ClientInterface_GetDashboardsIDLabels_Call struct {
	*mock.Call
}

// GetDashboardsIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.GetDashboardsIDLabelsParams
func (_e *ClientInterface_Expecter) GetDashboardsIDLabels(ctx interface{}, dashboardID interface{}, params interface{}) *ClientInterface_GetDashboardsIDLabels_Call {
	return &ClientInterface_GetDashboardsIDLabels_Call{Call: _e.mock.On("GetDashboardsIDLabels", ctx, dashboardID, params)}
}

func (_c *ClientInterface_GetDashboardsIDLabels_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDLabelsParams)) *ClientInterface_GetDashboardsIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDashboardsIDLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetDashboardsIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetDashboardsIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsIDMembers provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientInterface) GetDashboardsIDMembers(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDMembersParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDashboardsIDMembersParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDashboardsIDMembersParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetDashboardsIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsIDMembers'
type ClientInterface_GetDashboardsIDMembers_Call struct {
	*mock.Call
}

// GetDashboardsIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.GetDashboardsIDMembersParams
func (_e *ClientInterface_Expecter) GetDashboardsIDMembers(ctx interface{}, dashboardID interface{}, params interface{}) *ClientInterface_GetDashboardsIDMembers_Call {
	return &ClientInterface_GetDashboardsIDMembers_Call{Call: _e.mock.On("GetDashboardsIDMembers", ctx, dashboardID, params)}
}

func (_c *ClientInterface_GetDashboardsIDMembers_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDMembersParams)) *ClientInterface_GetDashboardsIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDashboardsIDMembersParams))
	})
	return _c
}

func (_c *ClientInterface_GetDashboardsIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetDashboardsIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsIDOwners provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientInterface) GetDashboardsIDOwners(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDOwnersParams) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDashboardsIDOwnersParams) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDashboardsIDOwnersParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetDashboardsIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsIDOwners'
type ClientInterface_GetDashboardsIDOwners_Call struct {
	*mock.Call
}

// GetDashboardsIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.GetDashboardsIDOwnersParams
func (_e *ClientInterface_Expecter) GetDashboardsIDOwners(ctx interface{}, dashboardID interface{}, params interface{}) *ClientInterface_GetDashboardsIDOwners_Call {
	return &ClientInterface_GetDashboardsIDOwners_Call{Call: _e.mock.On("GetDashboardsIDOwners", ctx, dashboardID, params)}
}

func (_c *ClientInterface_GetDashboardsIDOwners_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDOwnersParams)) *ClientInterface_GetDashboardsIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDashboardsIDOwnersParams))
	})
	return _c
}

func (_c *ClientInterface_GetDashboardsIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetDashboardsIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetFlags provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetFlags(ctx context.Context, params *domain.GetFlagsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetFlagsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetFlagsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlags'
type ClientInterface_GetFlags_Call struct {
	*mock.Call
}

// GetFlags is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetFlagsParams
func (_e *ClientInterface_Expecter) GetFlags(ctx interface{}, params interface{}) *ClientInterface_GetFlags_Call {
	return &ClientInterface_GetFlags_Call{Call: _e.mock.On("GetFlags", ctx, params)}
}

func (_c *ClientInterface_GetFlags_Call) Run(run func(ctx context.Context, params *domain.GetFlagsParams)) *ClientInterface_GetFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetFlagsParams))
	})
	return _c
}

func (_c *ClientInterface_GetFlags_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetFlags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetHealth provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetHealth(ctx context.Context, params *domain.GetHealthParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetHealthParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetHealthParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealth'
type ClientInterface_GetHealth_Call struct {
	*mock.Call
}

// GetHealth is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetHealthParams
func (_e *ClientInterface_Expecter) GetHealth(ctx interface{}, params interface{}) *ClientInterface_GetHealth_Call {
	return &ClientInterface_GetHealth_Call{Call: _e.mock.On("GetHealth", ctx, params)}
}

func (_c *ClientInterface_GetHealth_Call) Run(run func(ctx context.Context, params *domain.GetHealthParams)) *ClientInterface_GetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetHealthParams))
	})
	return _c
}

func (_c *ClientInterface_GetHealth_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLabels provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetLabels(ctx context.Context, params *domain.GetLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetLabelsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetLabelsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type ClientInterface_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetLabelsParams
func (_e *ClientInterface_Expecter) GetLabels(ctx interface{}, params interface{}) *ClientInterface_GetLabels_Call {
	return &ClientInterface_GetLabels_Call{Call: _e.mock.On("GetLabels", ctx, params)}
}

func (_c *ClientInterface_GetLabels_Call) Run(run func(ctx context.Context, params *domain.GetLabelsParams)) *ClientInterface_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLabelsID provides a mock function with given fields: ctx, labelID, params
func (_m *ClientInterface) GetLabelsID(ctx context.Context, labelID string, params *domain.GetLabelsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, labelID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetLabelsIDParams) *http.Response); ok {
		r0 = rf(ctx, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetLabelsIDParams) error); ok {
		r1 = rf(ctx, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabelsID'
type ClientInterface_GetLabelsID_Call struct {
	*mock.Call
}

// GetLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
//  - params *domain.GetLabelsIDParams
func (_e *ClientInterface_Expecter) GetLabelsID(ctx interface{}, labelID interface{}, params interface{}) *ClientInterface_GetLabelsID_Call {
	return &ClientInterface_GetLabelsID_Call{Call: _e.mock.On("GetLabelsID", ctx, labelID, params)}
}

func (_c *ClientInterface_GetLabelsID_Call) Run(run func(ctx context.Context, labelID string, params *domain.GetLabelsIDParams)) *ClientInterface_GetLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetLabelsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLegacyAuthorizations provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetLegacyAuthorizations(ctx context.Context, params *domain.GetLegacyAuthorizationsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetLegacyAuthorizationsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetLegacyAuthorizationsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetLegacyAuthorizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLegacyAuthorizations'
type ClientInterface_GetLegacyAuthorizations_Call struct {
	*mock.Call
}

// GetLegacyAuthorizations is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetLegacyAuthorizationsParams
func (_e *ClientInterface_Expecter) GetLegacyAuthorizations(ctx interface{}, params interface{}) *ClientInterface_GetLegacyAuthorizations_Call {
	return &ClientInterface_GetLegacyAuthorizations_Call{Call: _e.mock.On("GetLegacyAuthorizations", ctx, params)}
}

func (_c *ClientInterface_GetLegacyAuthorizations_Call) Run(run func(ctx context.Context, params *domain.GetLegacyAuthorizationsParams)) *ClientInterface_GetLegacyAuthorizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetLegacyAuthorizationsParams))
	})
	return _c
}

func (_c *ClientInterface_GetLegacyAuthorizations_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetLegacyAuthorizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLegacyAuthorizationsID provides a mock function with given fields: ctx, authID, params
func (_m *ClientInterface) GetLegacyAuthorizationsID(ctx context.Context, authID string, params *domain.GetLegacyAuthorizationsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetLegacyAuthorizationsIDParams) *http.Response); ok {
		r0 = rf(ctx, authID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetLegacyAuthorizationsIDParams) error); ok {
		r1 = rf(ctx, authID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetLegacyAuthorizationsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLegacyAuthorizationsID'
type ClientInterface_GetLegacyAuthorizationsID_Call struct {
	*mock.Call
}

// GetLegacyAuthorizationsID is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.GetLegacyAuthorizationsIDParams
func (_e *ClientInterface_Expecter) GetLegacyAuthorizationsID(ctx interface{}, authID interface{}, params interface{}) *ClientInterface_GetLegacyAuthorizationsID_Call {
	return &ClientInterface_GetLegacyAuthorizationsID_Call{Call: _e.mock.On("GetLegacyAuthorizationsID", ctx, authID, params)}
}

func (_c *ClientInterface_GetLegacyAuthorizationsID_Call) Run(run func(ctx context.Context, authID string, params *domain.GetLegacyAuthorizationsIDParams)) *ClientInterface_GetLegacyAuthorizationsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetLegacyAuthorizationsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetLegacyAuthorizationsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetLegacyAuthorizationsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMe provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetMe(ctx context.Context, params *domain.GetMeParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetMeParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetMeParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type ClientInterface_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetMeParams
func (_e *ClientInterface_Expecter) GetMe(ctx interface{}, params interface{}) *ClientInterface_GetMe_Call {
	return &ClientInterface_GetMe_Call{Call: _e.mock.On("GetMe", ctx, params)}
}

func (_c *ClientInterface_GetMe_Call) Run(run func(ctx context.Context, params *domain.GetMeParams)) *ClientInterface_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetMeParams))
	})
	return _c
}

func (_c *ClientInterface_GetMe_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetMe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMetrics provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetMetrics(ctx context.Context, params *domain.GetMetricsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetMetricsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetMetricsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type ClientInterface_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetMetricsParams
func (_e *ClientInterface_Expecter) GetMetrics(ctx interface{}, params interface{}) *ClientInterface_GetMetrics_Call {
	return &ClientInterface_GetMetrics_Call{Call: _e.mock.On("GetMetrics", ctx, params)}
}

func (_c *ClientInterface_GetMetrics_Call) Run(run func(ctx context.Context, params *domain.GetMetricsParams)) *ClientInterface_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetMetricsParams))
	})
	return _c
}

func (_c *ClientInterface_GetMetrics_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationEndpoints provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetNotificationEndpoints(ctx context.Context, params *domain.GetNotificationEndpointsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetNotificationEndpointsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetNotificationEndpointsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetNotificationEndpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationEndpoints'
type ClientInterface_GetNotificationEndpoints_Call struct {
	*mock.Call
}

// GetNotificationEndpoints is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetNotificationEndpointsParams
func (_e *ClientInterface_Expecter) GetNotificationEndpoints(ctx interface{}, params interface{}) *ClientInterface_GetNotificationEndpoints_Call {
	return &ClientInterface_GetNotificationEndpoints_Call{Call: _e.mock.On("GetNotificationEndpoints", ctx, params)}
}

func (_c *ClientInterface_GetNotificationEndpoints_Call) Run(run func(ctx context.Context, params *domain.GetNotificationEndpointsParams)) *ClientInterface_GetNotificationEndpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetNotificationEndpointsParams))
	})
	return _c
}

func (_c *ClientInterface_GetNotificationEndpoints_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetNotificationEndpoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationEndpointsID provides a mock function with given fields: ctx, endpointID, params
func (_m *ClientInterface) GetNotificationEndpointsID(ctx context.Context, endpointID string, params *domain.GetNotificationEndpointsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationEndpointsIDParams) *http.Response); ok {
		r0 = rf(ctx, endpointID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationEndpointsIDParams) error); ok {
		r1 = rf(ctx, endpointID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetNotificationEndpointsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationEndpointsID'
type ClientInterface_GetNotificationEndpointsID_Call struct {
	*mock.Call
}

// GetNotificationEndpointsID is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.GetNotificationEndpointsIDParams
func (_e *ClientInterface_Expecter) GetNotificationEndpointsID(ctx interface{}, endpointID interface{}, params interface{}) *ClientInterface_GetNotificationEndpointsID_Call {
	return &ClientInterface_GetNotificationEndpointsID_Call{Call: _e.mock.On("GetNotificationEndpointsID", ctx, endpointID, params)}
}

func (_c *ClientInterface_GetNotificationEndpointsID_Call) Run(run func(ctx context.Context, endpointID string, params *domain.GetNotificationEndpointsIDParams)) *ClientInterface_GetNotificationEndpointsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationEndpointsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetNotificationEndpointsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetNotificationEndpointsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationEndpointsIDLabels provides a mock function with given fields: ctx, endpointID, params
func (_m *ClientInterface) GetNotificationEndpointsIDLabels(ctx context.Context, endpointID string, params *domain.GetNotificationEndpointsIDLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationEndpointsIDLabelsParams) *http.Response); ok {
		r0 = rf(ctx, endpointID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationEndpointsIDLabelsParams) error); ok {
		r1 = rf(ctx, endpointID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetNotificationEndpointsIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationEndpointsIDLabels'
type ClientInterface_GetNotificationEndpointsIDLabels_Call struct {
	*mock.Call
}

// GetNotificationEndpointsIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.GetNotificationEndpointsIDLabelsParams
func (_e *ClientInterface_Expecter) GetNotificationEndpointsIDLabels(ctx interface{}, endpointID interface{}, params interface{}) *ClientInterface_GetNotificationEndpointsIDLabels_Call {
	return &ClientInterface_GetNotificationEndpointsIDLabels_Call{Call: _e.mock.On("GetNotificationEndpointsIDLabels", ctx, endpointID, params)}
}

func (_c *ClientInterface_GetNotificationEndpointsIDLabels_Call) Run(run func(ctx context.Context, endpointID string, params *domain.GetNotificationEndpointsIDLabelsParams)) *ClientInterface_GetNotificationEndpointsIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationEndpointsIDLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetNotificationEndpointsIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetNotificationEndpointsIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationRules provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetNotificationRules(ctx context.Context, params *domain.GetNotificationRulesParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetNotificationRulesParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetNotificationRulesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRules'
type ClientInterface_GetNotificationRules_Call struct {
	*mock.Call
}

// GetNotificationRules is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetNotificationRulesParams
func (_e *ClientInterface_Expecter) GetNotificationRules(ctx interface{}, params interface{}) *ClientInterface_GetNotificationRules_Call {
	return &ClientInterface_GetNotificationRules_Call{Call: _e.mock.On("GetNotificationRules", ctx, params)}
}

func (_c *ClientInterface_GetNotificationRules_Call) Run(run func(ctx context.Context, params *domain.GetNotificationRulesParams)) *ClientInterface_GetNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetNotificationRulesParams))
	})
	return _c
}

func (_c *ClientInterface_GetNotificationRules_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetNotificationRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationRulesID provides a mock function with given fields: ctx, ruleID, params
func (_m *ClientInterface) GetNotificationRulesID(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationRulesIDParams) *http.Response); ok {
		r0 = rf(ctx, ruleID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationRulesIDParams) error); ok {
		r1 = rf(ctx, ruleID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetNotificationRulesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRulesID'
type ClientInterface_GetNotificationRulesID_Call struct {
	*mock.Call
}

// GetNotificationRulesID is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.GetNotificationRulesIDParams
func (_e *ClientInterface_Expecter) GetNotificationRulesID(ctx interface{}, ruleID interface{}, params interface{}) *ClientInterface_GetNotificationRulesID_Call {
	return &ClientInterface_GetNotificationRulesID_Call{Call: _e.mock.On("GetNotificationRulesID", ctx, ruleID, params)}
}

func (_c *ClientInterface_GetNotificationRulesID_Call) Run(run func(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDParams)) *ClientInterface_GetNotificationRulesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationRulesIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetNotificationRulesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetNotificationRulesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationRulesIDLabels provides a mock function with given fields: ctx, ruleID, params
func (_m *ClientInterface) GetNotificationRulesIDLabels(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationRulesIDLabelsParams) *http.Response); ok {
		r0 = rf(ctx, ruleID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationRulesIDLabelsParams) error); ok {
		r1 = rf(ctx, ruleID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetNotificationRulesIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRulesIDLabels'
type ClientInterface_GetNotificationRulesIDLabels_Call struct {
	*mock.Call
}

// GetNotificationRulesIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.GetNotificationRulesIDLabelsParams
func (_e *ClientInterface_Expecter) GetNotificationRulesIDLabels(ctx interface{}, ruleID interface{}, params interface{}) *ClientInterface_GetNotificationRulesIDLabels_Call {
	return &ClientInterface_GetNotificationRulesIDLabels_Call{Call: _e.mock.On("GetNotificationRulesIDLabels", ctx, ruleID, params)}
}

func (_c *ClientInterface_GetNotificationRulesIDLabels_Call) Run(run func(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDLabelsParams)) *ClientInterface_GetNotificationRulesIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationRulesIDLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetNotificationRulesIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetNotificationRulesIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationRulesIDQuery provides a mock function with given fields: ctx, ruleID, params
func (_m *ClientInterface) GetNotificationRulesIDQuery(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDQueryParams) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationRulesIDQueryParams) *http.Response); ok {
		r0 = rf(ctx, ruleID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationRulesIDQueryParams) error); ok {
		r1 = rf(ctx, ruleID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetNotificationRulesIDQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRulesIDQuery'
type ClientInterface_GetNotificationRulesIDQuery_Call struct {
	*mock.Call
}

// GetNotificationRulesIDQuery is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.GetNotificationRulesIDQueryParams
func (_e *ClientInterface_Expecter) GetNotificationRulesIDQuery(ctx interface{}, ruleID interface{}, params interface{}) *ClientInterface_GetNotificationRulesIDQuery_Call {
	return &ClientInterface_GetNotificationRulesIDQuery_Call{Call: _e.mock.On("GetNotificationRulesIDQuery", ctx, ruleID, params)}
}

func (_c *ClientInterface_GetNotificationRulesIDQuery_Call) Run(run func(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDQueryParams)) *ClientInterface_GetNotificationRulesIDQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationRulesIDQueryParams))
	})
	return _c
}

func (_c *ClientInterface_GetNotificationRulesIDQuery_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetNotificationRulesIDQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgs provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetOrgs(ctx context.Context, params *domain.GetOrgsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetOrgsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetOrgsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetOrgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgs'
type ClientInterface_GetOrgs_Call struct {
	*mock.Call
}

// GetOrgs is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetOrgsParams
func (_e *ClientInterface_Expecter) GetOrgs(ctx interface{}, params interface{}) *ClientInterface_GetOrgs_Call {
	return &ClientInterface_GetOrgs_Call{Call: _e.mock.On("GetOrgs", ctx, params)}
}

func (_c *ClientInterface_GetOrgs_Call) Run(run func(ctx context.Context, params *domain.GetOrgsParams)) *ClientInterface_GetOrgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetOrgsParams))
	})
	return _c
}

func (_c *ClientInterface_GetOrgs_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetOrgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgsID provides a mock function with given fields: ctx, orgID, params
func (_m *ClientInterface) GetOrgsID(ctx context.Context, orgID string, params *domain.GetOrgsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetOrgsIDParams) *http.Response); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetOrgsIDParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetOrgsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsID'
type ClientInterface_GetOrgsID_Call struct {
	*mock.Call
}

// GetOrgsID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.GetOrgsIDParams
func (_e *ClientInterface_Expecter) GetOrgsID(ctx interface{}, orgID interface{}, params interface{}) *ClientInterface_GetOrgsID_Call {
	return &ClientInterface_GetOrgsID_Call{Call: _e.mock.On("GetOrgsID", ctx, orgID, params)}
}

func (_c *ClientInterface_GetOrgsID_Call) Run(run func(ctx context.Context, orgID string, params *domain.GetOrgsIDParams)) *ClientInterface_GetOrgsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetOrgsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetOrgsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetOrgsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgsIDMembers provides a mock function with given fields: ctx, orgID, params
func (_m *ClientInterface) GetOrgsIDMembers(ctx context.Context, orgID string, params *domain.GetOrgsIDMembersParams) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetOrgsIDMembersParams) *http.Response); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetOrgsIDMembersParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetOrgsIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsIDMembers'
type ClientInterface_GetOrgsIDMembers_Call struct {
	*mock.Call
}

// GetOrgsIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.GetOrgsIDMembersParams
func (_e *ClientInterface_Expecter) GetOrgsIDMembers(ctx interface{}, orgID interface{}, params interface{}) *ClientInterface_GetOrgsIDMembers_Call {
	return &ClientInterface_GetOrgsIDMembers_Call{Call: _e.mock.On("GetOrgsIDMembers", ctx, orgID, params)}
}

func (_c *ClientInterface_GetOrgsIDMembers_Call) Run(run func(ctx context.Context, orgID string, params *domain.GetOrgsIDMembersParams)) *ClientInterface_GetOrgsIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetOrgsIDMembersParams))
	})
	return _c
}

func (_c *ClientInterface_GetOrgsIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetOrgsIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgsIDOwners provides a mock function with given fields: ctx, orgID, params
func (_m *ClientInterface) GetOrgsIDOwners(ctx context.Context, orgID string, params *domain.GetOrgsIDOwnersParams) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetOrgsIDOwnersParams) *http.Response); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetOrgsIDOwnersParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetOrgsIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsIDOwners'
type ClientInterface_GetOrgsIDOwners_Call struct {
	*mock.Call
}

// GetOrgsIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.GetOrgsIDOwnersParams
func (_e *ClientInterface_Expecter) GetOrgsIDOwners(ctx interface{}, orgID interface{}, params interface{}) *ClientInterface_GetOrgsIDOwners_Call {
	return &ClientInterface_GetOrgsIDOwners_Call{Call: _e.mock.On("GetOrgsIDOwners", ctx, orgID, params)}
}

func (_c *ClientInterface_GetOrgsIDOwners_Call) Run(run func(ctx context.Context, orgID string, params *domain.GetOrgsIDOwnersParams)) *ClientInterface_GetOrgsIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetOrgsIDOwnersParams))
	})
	return _c
}

func (_c *ClientInterface_GetOrgsIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetOrgsIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgsIDSecrets provides a mock function with given fields: ctx, orgID, params
func (_m *ClientInterface) GetOrgsIDSecrets(ctx context.Context, orgID string, params *domain.GetOrgsIDSecretsParams) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetOrgsIDSecretsParams) *http.Response); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetOrgsIDSecretsParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetOrgsIDSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsIDSecrets'
type ClientInterface_GetOrgsIDSecrets_Call struct {
	*mock.Call
}

// GetOrgsIDSecrets is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.GetOrgsIDSecretsParams
func (_e *ClientInterface_Expecter) GetOrgsIDSecrets(ctx interface{}, orgID interface{}, params interface{}) *ClientInterface_GetOrgsIDSecrets_Call {
	return &ClientInterface_GetOrgsIDSecrets_Call{Call: _e.mock.On("GetOrgsIDSecrets", ctx, orgID, params)}
}

func (_c *ClientInterface_GetOrgsIDSecrets_Call) Run(run func(ctx context.Context, orgID string, params *domain.GetOrgsIDSecretsParams)) *ClientInterface_GetOrgsIDSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetOrgsIDSecretsParams))
	})
	return _c
}

func (_c *ClientInterface_GetOrgsIDSecrets_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetOrgsIDSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPing provides a mock function with given fields: ctx
func (_m *ClientInterface) GetPing(ctx context.Context) (*http.Response, error) {
	ret := _m.Called(ctx)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context) *http.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPing'
type ClientInterface_GetPing_Call struct {
	*mock.Call
}

// GetPing is a helper method to define mock.On call
//  - ctx context.Context
func (_e *ClientInterface_Expecter) GetPing(ctx interface{}) *ClientInterface_GetPing_Call {
	return &ClientInterface_GetPing_Call{Call: _e.mock.On("GetPing", ctx)}
}

func (_c *ClientInterface_GetPing_Call) Run(run func(ctx context.Context)) *ClientInterface_GetPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClientInterface_GetPing_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetPing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetQuerySuggestions provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetQuerySuggestions(ctx context.Context, params *domain.GetQuerySuggestionsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetQuerySuggestionsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetQuerySuggestionsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetQuerySuggestions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuerySuggestions'
type ClientInterface_GetQuerySuggestions_Call struct {
	*mock.Call
}

// GetQuerySuggestions is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetQuerySuggestionsParams
func (_e *ClientInterface_Expecter) GetQuerySuggestions(ctx interface{}, params interface{}) *ClientInterface_GetQuerySuggestions_Call {
	return &ClientInterface_GetQuerySuggestions_Call{Call: _e.mock.On("GetQuerySuggestions", ctx, params)}
}

func (_c *ClientInterface_GetQuerySuggestions_Call) Run(run func(ctx context.Context, params *domain.GetQuerySuggestionsParams)) *ClientInterface_GetQuerySuggestions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetQuerySuggestionsParams))
	})
	return _c
}

func (_c *ClientInterface_GetQuerySuggestions_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetQuerySuggestions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetQuerySuggestionsName provides a mock function with given fields: ctx, name, params
func (_m *ClientInterface) GetQuerySuggestionsName(ctx context.Context, name string, params *domain.GetQuerySuggestionsNameParams) (*http.Response, error) {
	ret := _m.Called(ctx, name, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetQuerySuggestionsNameParams) *http.Response); ok {
		r0 = rf(ctx, name, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetQuerySuggestionsNameParams) error); ok {
		r1 = rf(ctx, name, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetQuerySuggestionsName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuerySuggestionsName'
type ClientInterface_GetQuerySuggestionsName_Call struct {
	*mock.Call
}

// GetQuerySuggestionsName is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
//  - params *domain.GetQuerySuggestionsNameParams
func (_e *ClientInterface_Expecter) GetQuerySuggestionsName(ctx interface{}, name interface{}, params interface{}) *ClientInterface_GetQuerySuggestionsName_Call {
	return &ClientInterface_GetQuerySuggestionsName_Call{Call: _e.mock.On("GetQuerySuggestionsName", ctx, name, params)}
}

func (_c *ClientInterface_GetQuerySuggestionsName_Call) Run(run func(ctx context.Context, name string, params *domain.GetQuerySuggestionsNameParams)) *ClientInterface_GetQuerySuggestionsName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetQuerySuggestionsNameParams))
	})
	return _c
}

func (_c *ClientInterface_GetQuerySuggestionsName_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetQuerySuggestionsName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetReady provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetReady(ctx context.Context, params *domain.GetReadyParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetReadyParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetReadyParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReady'
type ClientInterface_GetReady_Call struct {
	*mock.Call
}

// GetReady is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetReadyParams
func (_e *ClientInterface_Expecter) GetReady(ctx interface{}, params interface{}) *ClientInterface_GetReady_Call {
	return &ClientInterface_GetReady_Call{Call: _e.mock.On("GetReady", ctx, params)}
}

func (_c *ClientInterface_GetReady_Call) Run(run func(ctx context.Context, params *domain.GetReadyParams)) *ClientInterface_GetReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetReadyParams))
	})
	return _c
}

func (_c *ClientInterface_GetReady_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRemoteConnectionByID provides a mock function with given fields: ctx, remoteID, params
func (_m *ClientInterface) GetRemoteConnectionByID(ctx context.Context, remoteID string, params *domain.GetRemoteConnectionByIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, remoteID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetRemoteConnectionByIDParams) *http.Response); ok {
		r0 = rf(ctx, remoteID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetRemoteConnectionByIDParams) error); ok {
		r1 = rf(ctx, remoteID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetRemoteConnectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteConnectionByID'
type ClientInterface_GetRemoteConnectionByID_Call struct {
	*mock.Call
}

// GetRemoteConnectionByID is a helper method to define mock.On call
//  - ctx context.Context
//  - remoteID string
//  - params *domain.GetRemoteConnectionByIDParams
func (_e *ClientInterface_Expecter) GetRemoteConnectionByID(ctx interface{}, remoteID interface{}, params interface{}) *ClientInterface_GetRemoteConnectionByID_Call {
	return &ClientInterface_GetRemoteConnectionByID_Call{Call: _e.mock.On("GetRemoteConnectionByID", ctx, remoteID, params)}
}

func (_c *ClientInterface_GetRemoteConnectionByID_Call) Run(run func(ctx context.Context, remoteID string, params *domain.GetRemoteConnectionByIDParams)) *ClientInterface_GetRemoteConnectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetRemoteConnectionByIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetRemoteConnectionByID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetRemoteConnectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRemoteConnections provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetRemoteConnections(ctx context.Context, params *domain.GetRemoteConnectionsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetRemoteConnectionsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetRemoteConnectionsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetRemoteConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteConnections'
type ClientInterface_GetRemoteConnections_Call struct {
	*mock.Call
}

// GetRemoteConnections is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetRemoteConnectionsParams
func (_e *ClientInterface_Expecter) GetRemoteConnections(ctx interface{}, params interface{}) *ClientInterface_GetRemoteConnections_Call {
	return &ClientInterface_GetRemoteConnections_Call{Call: _e.mock.On("GetRemoteConnections", ctx, params)}
}

func (_c *ClientInterface_GetRemoteConnections_Call) Run(run func(ctx context.Context, params *domain.GetRemoteConnectionsParams)) *ClientInterface_GetRemoteConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetRemoteConnectionsParams))
	})
	return _c
}

func (_c *ClientInterface_GetRemoteConnections_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetRemoteConnections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetReplicationByID provides a mock function with given fields: ctx, replicationID, params
func (_m *ClientInterface) GetReplicationByID(ctx context.Context, replicationID string, params *domain.GetReplicationByIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, replicationID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetReplicationByIDParams) *http.Response); ok {
		r0 = rf(ctx, replicationID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetReplicationByIDParams) error); ok {
		r1 = rf(ctx, replicationID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetReplicationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationByID'
type ClientInterface_GetReplicationByID_Call struct {
	*mock.Call
}

// GetReplicationByID is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.GetReplicationByIDParams
func (_e *ClientInterface_Expecter) GetReplicationByID(ctx interface{}, replicationID interface{}, params interface{}) *ClientInterface_GetReplicationByID_Call {
	return &ClientInterface_GetReplicationByID_Call{Call: _e.mock.On("GetReplicationByID", ctx, replicationID, params)}
}

func (_c *ClientInterface_GetReplicationByID_Call) Run(run func(ctx context.Context, replicationID string, params *domain.GetReplicationByIDParams)) *ClientInterface_GetReplicationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetReplicationByIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetReplicationByID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetReplicationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetReplications provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetReplications(ctx context.Context, params *domain.GetReplicationsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetReplicationsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetReplicationsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetReplications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplications'
type ClientInterface_GetReplications_Call struct {
	*mock.Call
}

// GetReplications is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetReplicationsParams
func (_e *ClientInterface_Expecter) GetReplications(ctx interface{}, params interface{}) *ClientInterface_GetReplications_Call {
	return &ClientInterface_GetReplications_Call{Call: _e.mock.On("GetReplications", ctx, params)}
}

func (_c *ClientInterface_GetReplications_Call) Run(run func(ctx context.Context, params *domain.GetReplicationsParams)) *ClientInterface_GetReplications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetReplicationsParams))
	})
	return _c
}

func (_c *ClientInterface_GetReplications_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetReplications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetResources provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetResources(ctx context.Context, params *domain.GetResourcesParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetResourcesParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetResourcesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type ClientInterface_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetResourcesParams
func (_e *ClientInterface_Expecter) GetResources(ctx interface{}, params interface{}) *ClientInterface_GetResources_Call {
	return &ClientInterface_GetResources_Call{Call: _e.mock.On("GetResources", ctx, params)}
}

func (_c *ClientInterface_GetResources_Call) Run(run func(ctx context.Context, params *domain.GetResourcesParams)) *ClientInterface_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetResourcesParams))
	})
	return _c
}

func (_c *ClientInterface_GetResources_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRoutes provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetRoutes(ctx context.Context, params *domain.GetRoutesParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetRoutesParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetRoutesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoutes'
type ClientInterface_GetRoutes_Call struct {
	*mock.Call
}

// GetRoutes is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetRoutesParams
func (_e *ClientInterface_Expecter) GetRoutes(ctx interface{}, params interface{}) *ClientInterface_GetRoutes_Call {
	return &ClientInterface_GetRoutes_Call{Call: _e.mock.On("GetRoutes", ctx, params)}
}

func (_c *ClientInterface_GetRoutes_Call) Run(run func(ctx context.Context, params *domain.GetRoutesParams)) *ClientInterface_GetRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetRoutesParams))
	})
	return _c
}

func (_c *ClientInterface_GetRoutes_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetRoutes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapers provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetScrapers(ctx context.Context, params *domain.GetScrapersParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetScrapersParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetScrapersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetScrapers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapers'
type ClientInterface_GetScrapers_Call struct {
	*mock.Call
}

// GetScrapers is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetScrapersParams
func (_e *ClientInterface_Expecter) GetScrapers(ctx interface{}, params interface{}) *ClientInterface_GetScrapers_Call {
	return &ClientInterface_GetScrapers_Call{Call: _e.mock.On("GetScrapers", ctx, params)}
}

func (_c *ClientInterface_GetScrapers_Call) Run(run func(ctx context.Context, params *domain.GetScrapersParams)) *ClientInterface_GetScrapers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetScrapersParams))
	})
	return _c
}

func (_c *ClientInterface_GetScrapers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetScrapers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapersID provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientInterface) GetScrapersID(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetScrapersIDParams) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetScrapersIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetScrapersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapersID'
type ClientInterface_GetScrapersID_Call struct {
	*mock.Call
}

// GetScrapersID is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.GetScrapersIDParams
func (_e *ClientInterface_Expecter) GetScrapersID(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientInterface_GetScrapersID_Call {
	return &ClientInterface_GetScrapersID_Call{Call: _e.mock.On("GetScrapersID", ctx, scraperTargetID, params)}
}

func (_c *ClientInterface_GetScrapersID_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDParams)) *ClientInterface_GetScrapersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetScrapersIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetScrapersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetScrapersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapersIDLabels provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientInterface) GetScrapersIDLabels(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetScrapersIDLabelsParams) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetScrapersIDLabelsParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetScrapersIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapersIDLabels'
type ClientInterface_GetScrapersIDLabels_Call struct {
	*mock.Call
}

// GetScrapersIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.GetScrapersIDLabelsParams
func (_e *ClientInterface_Expecter) GetScrapersIDLabels(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientInterface_GetScrapersIDLabels_Call {
	return &ClientInterface_GetScrapersIDLabels_Call{Call: _e.mock.On("GetScrapersIDLabels", ctx, scraperTargetID, params)}
}

func (_c *ClientInterface_GetScrapersIDLabels_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDLabelsParams)) *ClientInterface_GetScrapersIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetScrapersIDLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetScrapersIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetScrapersIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapersIDMembers provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientInterface) GetScrapersIDMembers(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDMembersParams) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetScrapersIDMembersParams) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetScrapersIDMembersParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetScrapersIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapersIDMembers'
type ClientInterface_GetScrapersIDMembers_Call struct {
	*mock.Call
}

// GetScrapersIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.GetScrapersIDMembersParams
func (_e *ClientInterface_Expecter) GetScrapersIDMembers(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientInterface_GetScrapersIDMembers_Call {
	return &ClientInterface_GetScrapersIDMembers_Call{Call: _e.mock.On("GetScrapersIDMembers", ctx, scraperTargetID, params)}
}

func (_c *ClientInterface_GetScrapersIDMembers_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDMembersParams)) *ClientInterface_GetScrapersIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetScrapersIDMembersParams))
	})
	return _c
}

func (_c *ClientInterface_GetScrapersIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetScrapersIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapersIDOwners provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientInterface) GetScrapersIDOwners(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDOwnersParams) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetScrapersIDOwnersParams) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetScrapersIDOwnersParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetScrapersIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapersIDOwners'
type ClientInterface_GetScrapersIDOwners_Call struct {
	*mock.Call
}

// GetScrapersIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.GetScrapersIDOwnersParams
func (_e *ClientInterface_Expecter) GetScrapersIDOwners(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientInterface_GetScrapersIDOwners_Call {
	return &ClientInterface_GetScrapersIDOwners_Call{Call: _e.mock.On("GetScrapersIDOwners", ctx, scraperTargetID, params)}
}

func (_c *ClientInterface_GetScrapersIDOwners_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDOwnersParams)) *ClientInterface_GetScrapersIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetScrapersIDOwnersParams))
	})
	return _c
}

func (_c *ClientInterface_GetScrapersIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetScrapersIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSetup provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetSetup(ctx context.Context, params *domain.GetSetupParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetSetupParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetSetupParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetSetup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSetup'
type ClientInterface_GetSetup_Call struct {
	*mock.Call
}

// GetSetup is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetSetupParams
func (_e *ClientInterface_Expecter) GetSetup(ctx interface{}, params interface{}) *ClientInterface_GetSetup_Call {
	return &ClientInterface_GetSetup_Call{Call: _e.mock.On("GetSetup", ctx, params)}
}

func (_c *ClientInterface_GetSetup_Call) Run(run func(ctx context.Context, params *domain.GetSetupParams)) *ClientInterface_GetSetup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetSetupParams))
	})
	return _c
}

func (_c *ClientInterface_GetSetup_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetSetup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSources provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetSources(ctx context.Context, params *domain.GetSourcesParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetSourcesParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetSourcesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSources'
type ClientInterface_GetSources_Call struct {
	*mock.Call
}

// GetSources is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetSourcesParams
func (_e *ClientInterface_Expecter) GetSources(ctx interface{}, params interface{}) *ClientInterface_GetSources_Call {
	return &ClientInterface_GetSources_Call{Call: _e.mock.On("GetSources", ctx, params)}
}

func (_c *ClientInterface_GetSources_Call) Run(run func(ctx context.Context, params *domain.GetSourcesParams)) *ClientInterface_GetSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetSourcesParams))
	})
	return _c
}

func (_c *ClientInterface_GetSources_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetSources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSourcesID provides a mock function with given fields: ctx, sourceID, params
func (_m *ClientInterface) GetSourcesID(ctx context.Context, sourceID string, params *domain.GetSourcesIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, sourceID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetSourcesIDParams) *http.Response); ok {
		r0 = rf(ctx, sourceID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetSourcesIDParams) error); ok {
		r1 = rf(ctx, sourceID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetSourcesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourcesID'
type ClientInterface_GetSourcesID_Call struct {
	*mock.Call
}

// GetSourcesID is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.GetSourcesIDParams
func (_e *ClientInterface_Expecter) GetSourcesID(ctx interface{}, sourceID interface{}, params interface{}) *ClientInterface_GetSourcesID_Call {
	return &ClientInterface_GetSourcesID_Call{Call: _e.mock.On("GetSourcesID", ctx, sourceID, params)}
}

func (_c *ClientInterface_GetSourcesID_Call) Run(run func(ctx context.Context, sourceID string, params *domain.GetSourcesIDParams)) *ClientInterface_GetSourcesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetSourcesIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetSourcesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetSourcesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSourcesIDBuckets provides a mock function with given fields: ctx, sourceID, params
func (_m *ClientInterface) GetSourcesIDBuckets(ctx context.Context, sourceID string, params *domain.GetSourcesIDBucketsParams) (*http.Response, error) {
	ret := _m.Called(ctx, sourceID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetSourcesIDBucketsParams) *http.Response); ok {
		r0 = rf(ctx, sourceID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetSourcesIDBucketsParams) error); ok {
		r1 = rf(ctx, sourceID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetSourcesIDBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourcesIDBuckets'
type ClientInterface_GetSourcesIDBuckets_Call struct {
	*mock.Call
}

// GetSourcesIDBuckets is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.GetSourcesIDBucketsParams
func (_e *ClientInterface_Expecter) GetSourcesIDBuckets(ctx interface{}, sourceID interface{}, params interface{}) *ClientInterface_GetSourcesIDBuckets_Call {
	return &ClientInterface_GetSourcesIDBuckets_Call{Call: _e.mock.On("GetSourcesIDBuckets", ctx, sourceID, params)}
}

func (_c *ClientInterface_GetSourcesIDBuckets_Call) Run(run func(ctx context.Context, sourceID string, params *domain.GetSourcesIDBucketsParams)) *ClientInterface_GetSourcesIDBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetSourcesIDBucketsParams))
	})
	return _c
}

func (_c *ClientInterface_GetSourcesIDBuckets_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetSourcesIDBuckets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSourcesIDHealth provides a mock function with given fields: ctx, sourceID, params
func (_m *ClientInterface) GetSourcesIDHealth(ctx context.Context, sourceID string, params *domain.GetSourcesIDHealthParams) (*http.Response, error) {
	ret := _m.Called(ctx, sourceID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetSourcesIDHealthParams) *http.Response); ok {
		r0 = rf(ctx, sourceID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetSourcesIDHealthParams) error); ok {
		r1 = rf(ctx, sourceID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetSourcesIDHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourcesIDHealth'
type ClientInterface_GetSourcesIDHealth_Call struct {
	*mock.Call
}

// GetSourcesIDHealth is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.GetSourcesIDHealthParams
func (_e *ClientInterface_Expecter) GetSourcesIDHealth(ctx interface{}, sourceID interface{}, params interface{}) *ClientInterface_GetSourcesIDHealth_Call {
	return &ClientInterface_GetSourcesIDHealth_Call{Call: _e.mock.On("GetSourcesIDHealth", ctx, sourceID, params)}
}

func (_c *ClientInterface_GetSourcesIDHealth_Call) Run(run func(ctx context.Context, sourceID string, params *domain.GetSourcesIDHealthParams)) *ClientInterface_GetSourcesIDHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetSourcesIDHealthParams))
	})
	return _c
}

func (_c *ClientInterface_GetSourcesIDHealth_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetSourcesIDHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasks provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetTasks(ctx context.Context, params *domain.GetTasksParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetTasksParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetTasksParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type ClientInterface_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetTasksParams
func (_e *ClientInterface_Expecter) GetTasks(ctx interface{}, params interface{}) *ClientInterface_GetTasks_Call {
	return &ClientInterface_GetTasks_Call{Call: _e.mock.On("GetTasks", ctx, params)}
}

func (_c *ClientInterface_GetTasks_Call) Run(run func(ctx context.Context, params *domain.GetTasksParams)) *ClientInterface_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetTasksParams))
	})
	return _c
}

func (_c *ClientInterface_GetTasks_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksID provides a mock function with given fields: ctx, taskID, params
func (_m *ClientInterface) GetTasksID(ctx context.Context, taskID string, params *domain.GetTasksIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDParams) *http.Response); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTasksID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksID'
type ClientInterface_GetTasksID_Call struct {
	*mock.Call
}

// GetTasksID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDParams
func (_e *ClientInterface_Expecter) GetTasksID(ctx interface{}, taskID interface{}, params interface{}) *ClientInterface_GetTasksID_Call {
	return &ClientInterface_GetTasksID_Call{Call: _e.mock.On("GetTasksID", ctx, taskID, params)}
}

func (_c *ClientInterface_GetTasksID_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDParams)) *ClientInterface_GetTasksID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetTasksID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTasksID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDLabels provides a mock function with given fields: ctx, taskID, params
func (_m *ClientInterface) GetTasksIDLabels(ctx context.Context, taskID string, params *domain.GetTasksIDLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDLabelsParams) *http.Response); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDLabelsParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTasksIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDLabels'
type ClientInterface_GetTasksIDLabels_Call struct {
	*mock.Call
}

// GetTasksIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDLabelsParams
func (_e *ClientInterface_Expecter) GetTasksIDLabels(ctx interface{}, taskID interface{}, params interface{}) *ClientInterface_GetTasksIDLabels_Call {
	return &ClientInterface_GetTasksIDLabels_Call{Call: _e.mock.On("GetTasksIDLabels", ctx, taskID, params)}
}

func (_c *ClientInterface_GetTasksIDLabels_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDLabelsParams)) *ClientInterface_GetTasksIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetTasksIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTasksIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDLogs provides a mock function with given fields: ctx, taskID, params
func (_m *ClientInterface) GetTasksIDLogs(ctx context.Context, taskID string, params *domain.GetTasksIDLogsParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDLogsParams) *http.Response); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDLogsParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTasksIDLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDLogs'
type ClientInterface_GetTasksIDLogs_Call struct {
	*mock.Call
}

// GetTasksIDLogs is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDLogsParams
func (_e *ClientInterface_Expecter) GetTasksIDLogs(ctx interface{}, taskID interface{}, params interface{}) *ClientInterface_GetTasksIDLogs_Call {
	return &ClientInterface_GetTasksIDLogs_Call{Call: _e.mock.On("GetTasksIDLogs", ctx, taskID, params)}
}

func (_c *ClientInterface_GetTasksIDLogs_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDLogsParams)) *ClientInterface_GetTasksIDLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDLogsParams))
	})
	return _c
}

func (_c *ClientInterface_GetTasksIDLogs_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTasksIDLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDMembers provides a mock function with given fields: ctx, taskID, params
func (_m *ClientInterface) GetTasksIDMembers(ctx context.Context, taskID string, params *domain.GetTasksIDMembersParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDMembersParams) *http.Response); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDMembersParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTasksIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDMembers'
type ClientInterface_GetTasksIDMembers_Call struct {
	*mock.Call
}

// GetTasksIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDMembersParams
func (_e *ClientInterface_Expecter) GetTasksIDMembers(ctx interface{}, taskID interface{}, params interface{}) *ClientInterface_GetTasksIDMembers_Call {
	return &ClientInterface_GetTasksIDMembers_Call{Call: _e.mock.On("GetTasksIDMembers", ctx, taskID, params)}
}

func (_c *ClientInterface_GetTasksIDMembers_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDMembersParams)) *ClientInterface_GetTasksIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDMembersParams))
	})
	return _c
}

func (_c *ClientInterface_GetTasksIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTasksIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDOwners provides a mock function with given fields: ctx, taskID, params
func (_m *ClientInterface) GetTasksIDOwners(ctx context.Context, taskID string, params *domain.GetTasksIDOwnersParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDOwnersParams) *http.Response); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDOwnersParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTasksIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDOwners'
type ClientInterface_GetTasksIDOwners_Call struct {
	*mock.Call
}

// GetTasksIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDOwnersParams
func (_e *ClientInterface_Expecter) GetTasksIDOwners(ctx interface{}, taskID interface{}, params interface{}) *ClientInterface_GetTasksIDOwners_Call {
	return &ClientInterface_GetTasksIDOwners_Call{Call: _e.mock.On("GetTasksIDOwners", ctx, taskID, params)}
}

func (_c *ClientInterface_GetTasksIDOwners_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDOwnersParams)) *ClientInterface_GetTasksIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDOwnersParams))
	})
	return _c
}

func (_c *ClientInterface_GetTasksIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTasksIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDRuns provides a mock function with given fields: ctx, taskID, params
func (_m *ClientInterface) GetTasksIDRuns(ctx context.Context, taskID string, params *domain.GetTasksIDRunsParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDRunsParams) *http.Response); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDRunsParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTasksIDRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDRuns'
type ClientInterface_GetTasksIDRuns_Call struct {
	*mock.Call
}

// GetTasksIDRuns is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDRunsParams
func (_e *ClientInterface_Expecter) GetTasksIDRuns(ctx interface{}, taskID interface{}, params interface{}) *ClientInterface_GetTasksIDRuns_Call {
	return &ClientInterface_GetTasksIDRuns_Call{Call: _e.mock.On("GetTasksIDRuns", ctx, taskID, params)}
}

func (_c *ClientInterface_GetTasksIDRuns_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDRunsParams)) *ClientInterface_GetTasksIDRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDRunsParams))
	})
	return _c
}

func (_c *ClientInterface_GetTasksIDRuns_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTasksIDRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDRunsID provides a mock function with given fields: ctx, taskID, runID, params
func (_m *ClientInterface) GetTasksIDRunsID(ctx context.Context, taskID string, runID string, params *domain.GetTasksIDRunsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, runID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.GetTasksIDRunsIDParams) *http.Response); ok {
		r0 = rf(ctx, taskID, runID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.GetTasksIDRunsIDParams) error); ok {
		r1 = rf(ctx, taskID, runID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTasksIDRunsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDRunsID'
type ClientInterface_GetTasksIDRunsID_Call struct {
	*mock.Call
}

// GetTasksIDRunsID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
//  - params *domain.GetTasksIDRunsIDParams
func (_e *ClientInterface_Expecter) GetTasksIDRunsID(ctx interface{}, taskID interface{}, runID interface{}, params interface{}) *ClientInterface_GetTasksIDRunsID_Call {
	return &ClientInterface_GetTasksIDRunsID_Call{Call: _e.mock.On("GetTasksIDRunsID", ctx, taskID, runID, params)}
}

func (_c *ClientInterface_GetTasksIDRunsID_Call) Run(run func(ctx context.Context, taskID string, runID string, params *domain.GetTasksIDRunsIDParams)) *ClientInterface_GetTasksIDRunsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.GetTasksIDRunsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetTasksIDRunsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTasksIDRunsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDRunsIDLogs provides a mock function with given fields: ctx, taskID, runID, params
func (_m *ClientInterface) GetTasksIDRunsIDLogs(ctx context.Context, taskID string, runID string, params *domain.GetTasksIDRunsIDLogsParams) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, runID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.GetTasksIDRunsIDLogsParams) *http.Response); ok {
		r0 = rf(ctx, taskID, runID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.GetTasksIDRunsIDLogsParams) error); ok {
		r1 = rf(ctx, taskID, runID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTasksIDRunsIDLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDRunsIDLogs'
type ClientInterface_GetTasksIDRunsIDLogs_Call struct {
	*mock.Call
}

// GetTasksIDRunsIDLogs is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
//  - params *domain.GetTasksIDRunsIDLogsParams
func (_e *ClientInterface_Expecter) GetTasksIDRunsIDLogs(ctx interface{}, taskID interface{}, runID interface{}, params interface{}) *ClientInterface_GetTasksIDRunsIDLogs_Call {
	return &ClientInterface_GetTasksIDRunsIDLogs_Call{Call: _e.mock.On("GetTasksIDRunsIDLogs", ctx, taskID, runID, params)}
}

func (_c *ClientInterface_GetTasksIDRunsIDLogs_Call) Run(run func(ctx context.Context, taskID string, runID string, params *domain.GetTasksIDRunsIDLogsParams)) *ClientInterface_GetTasksIDRunsIDLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.GetTasksIDRunsIDLogsParams))
	})
	return _c
}

func (_c *ClientInterface_GetTasksIDRunsIDLogs_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTasksIDRunsIDLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafPlugins provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetTelegrafPlugins(ctx context.Context, params *domain.GetTelegrafPluginsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetTelegrafPluginsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetTelegrafPluginsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTelegrafPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafPlugins'
type ClientInterface_GetTelegrafPlugins_Call struct {
	*mock.Call
}

// GetTelegrafPlugins is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetTelegrafPluginsParams
func (_e *ClientInterface_Expecter) GetTelegrafPlugins(ctx interface{}, params interface{}) *ClientInterface_GetTelegrafPlugins_Call {
	return &ClientInterface_GetTelegrafPlugins_Call{Call: _e.mock.On("GetTelegrafPlugins", ctx, params)}
}

func (_c *ClientInterface_GetTelegrafPlugins_Call) Run(run func(ctx context.Context, params *domain.GetTelegrafPluginsParams)) *ClientInterface_GetTelegrafPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetTelegrafPluginsParams))
	})
	return _c
}

func (_c *ClientInterface_GetTelegrafPlugins_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTelegrafPlugins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafs provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetTelegrafs(ctx context.Context, params *domain.GetTelegrafsParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetTelegrafsParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetTelegrafsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTelegrafs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafs'
type ClientInterface_GetTelegrafs_Call struct {
	*mock.Call
}

// GetTelegrafs is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetTelegrafsParams
func (_e *ClientInterface_Expecter) GetTelegrafs(ctx interface{}, params interface{}) *ClientInterface_GetTelegrafs_Call {
	return &ClientInterface_GetTelegrafs_Call{Call: _e.mock.On("GetTelegrafs", ctx, params)}
}

func (_c *ClientInterface_GetTelegrafs_Call) Run(run func(ctx context.Context, params *domain.GetTelegrafsParams)) *ClientInterface_GetTelegrafs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetTelegrafsParams))
	})
	return _c
}

func (_c *ClientInterface_GetTelegrafs_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTelegrafs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafsID provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientInterface) GetTelegrafsID(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTelegrafsIDParams) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTelegrafsIDParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTelegrafsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafsID'
type ClientInterface_GetTelegrafsID_Call struct {
	*mock.Call
}

// GetTelegrafsID is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.GetTelegrafsIDParams
func (_e *ClientInterface_Expecter) GetTelegrafsID(ctx interface{}, telegrafID interface{}, params interface{}) *ClientInterface_GetTelegrafsID_Call {
	return &ClientInterface_GetTelegrafsID_Call{Call: _e.mock.On("GetTelegrafsID", ctx, telegrafID, params)}
}

func (_c *ClientInterface_GetTelegrafsID_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDParams)) *ClientInterface_GetTelegrafsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTelegrafsIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetTelegrafsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTelegrafsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafsIDLabels provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientInterface) GetTelegrafsIDLabels(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTelegrafsIDLabelsParams) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTelegrafsIDLabelsParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTelegrafsIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafsIDLabels'
type ClientInterface_GetTelegrafsIDLabels_Call struct {
	*mock.Call
}

// GetTelegrafsIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.GetTelegrafsIDLabelsParams
func (_e *ClientInterface_Expecter) GetTelegrafsIDLabels(ctx interface{}, telegrafID interface{}, params interface{}) *ClientInterface_GetTelegrafsIDLabels_Call {
	return &ClientInterface_GetTelegrafsIDLabels_Call{Call: _e.mock.On("GetTelegrafsIDLabels", ctx, telegrafID, params)}
}

func (_c *ClientInterface_GetTelegrafsIDLabels_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDLabelsParams)) *ClientInterface_GetTelegrafsIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTelegrafsIDLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetTelegrafsIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTelegrafsIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafsIDMembers provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientInterface) GetTelegrafsIDMembers(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDMembersParams) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTelegrafsIDMembersParams) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTelegrafsIDMembersParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTelegrafsIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafsIDMembers'
type ClientInterface_GetTelegrafsIDMembers_Call struct {
	*mock.Call
}

// GetTelegrafsIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.GetTelegrafsIDMembersParams
func (_e *ClientInterface_Expecter) GetTelegrafsIDMembers(ctx interface{}, telegrafID interface{}, params interface{}) *ClientInterface_GetTelegrafsIDMembers_Call {
	return &ClientInterface_GetTelegrafsIDMembers_Call{Call: _e.mock.On("GetTelegrafsIDMembers", ctx, telegrafID, params)}
}

func (_c *ClientInterface_GetTelegrafsIDMembers_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDMembersParams)) *ClientInterface_GetTelegrafsIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTelegrafsIDMembersParams))
	})
	return _c
}

func (_c *ClientInterface_GetTelegrafsIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTelegrafsIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafsIDOwners provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientInterface) GetTelegrafsIDOwners(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDOwnersParams) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTelegrafsIDOwnersParams) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTelegrafsIDOwnersParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetTelegrafsIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafsIDOwners'
type ClientInterface_GetTelegrafsIDOwners_Call struct {
	*mock.Call
}

// GetTelegrafsIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.GetTelegrafsIDOwnersParams
func (_e *ClientInterface_Expecter) GetTelegrafsIDOwners(ctx interface{}, telegrafID interface{}, params interface{}) *ClientInterface_GetTelegrafsIDOwners_Call {
	return &ClientInterface_GetTelegrafsIDOwners_Call{Call: _e.mock.On("GetTelegrafsIDOwners", ctx, telegrafID, params)}
}

func (_c *ClientInterface_GetTelegrafsIDOwners_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDOwnersParams)) *ClientInterface_GetTelegrafsIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTelegrafsIDOwnersParams))
	})
	return _c
}

func (_c *ClientInterface_GetTelegrafsIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetTelegrafsIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetUsers(ctx context.Context, params *domain.GetUsersParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetUsersParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetUsersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type ClientInterface_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetUsersParams
func (_e *ClientInterface_Expecter) GetUsers(ctx interface{}, params interface{}) *ClientInterface_GetUsers_Call {
	return &ClientInterface_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, params)}
}

func (_c *ClientInterface_GetUsers_Call) Run(run func(ctx context.Context, params *domain.GetUsersParams)) *ClientInterface_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetUsersParams))
	})
	return _c
}

func (_c *ClientInterface_GetUsers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUsersID provides a mock function with given fields: ctx, userID, params
func (_m *ClientInterface) GetUsersID(ctx context.Context, userID string, params *domain.GetUsersIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, userID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetUsersIDParams) *http.Response); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetUsersIDParams) error); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetUsersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersID'
type ClientInterface_GetUsersID_Call struct {
	*mock.Call
}

// GetUsersID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.GetUsersIDParams
func (_e *ClientInterface_Expecter) GetUsersID(ctx interface{}, userID interface{}, params interface{}) *ClientInterface_GetUsersID_Call {
	return &ClientInterface_GetUsersID_Call{Call: _e.mock.On("GetUsersID", ctx, userID, params)}
}

func (_c *ClientInterface_GetUsersID_Call) Run(run func(ctx context.Context, userID string, params *domain.GetUsersIDParams)) *ClientInterface_GetUsersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetUsersIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetUsersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetUsersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetVariables provides a mock function with given fields: ctx, params
func (_m *ClientInterface) GetVariables(ctx context.Context, params *domain.GetVariablesParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetVariablesParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetVariablesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariables'
type ClientInterface_GetVariables_Call struct {
	*mock.Call
}

// GetVariables is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetVariablesParams
func (_e *ClientInterface_Expecter) GetVariables(ctx interface{}, params interface{}) *ClientInterface_GetVariables_Call {
	return &ClientInterface_GetVariables_Call{Call: _e.mock.On("GetVariables", ctx, params)}
}

func (_c *ClientInterface_GetVariables_Call) Run(run func(ctx context.Context, params *domain.GetVariablesParams)) *ClientInterface_GetVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetVariablesParams))
	})
	return _c
}

func (_c *ClientInterface_GetVariables_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetVariables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetVariablesID provides a mock function with given fields: ctx, variableID, params
func (_m *ClientInterface) GetVariablesID(ctx context.Context, variableID string, params *domain.GetVariablesIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetVariablesIDParams) *http.Response); ok {
		r0 = rf(ctx, variableID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetVariablesIDParams) error); ok {
		r1 = rf(ctx, variableID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetVariablesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariablesID'
type ClientInterface_GetVariablesID_Call struct {
	*mock.Call
}

// GetVariablesID is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.GetVariablesIDParams
func (_e *ClientInterface_Expecter) GetVariablesID(ctx interface{}, variableID interface{}, params interface{}) *ClientInterface_GetVariablesID_Call {
	return &ClientInterface_GetVariablesID_Call{Call: _e.mock.On("GetVariablesID", ctx, variableID, params)}
}

func (_c *ClientInterface_GetVariablesID_Call) Run(run func(ctx context.Context, variableID string, params *domain.GetVariablesIDParams)) *ClientInterface_GetVariablesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetVariablesIDParams))
	})
	return _c
}

func (_c *ClientInterface_GetVariablesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetVariablesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetVariablesIDLabels provides a mock function with given fields: ctx, variableID, params
func (_m *ClientInterface) GetVariablesIDLabels(ctx context.Context, variableID string, params *domain.GetVariablesIDLabelsParams) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetVariablesIDLabelsParams) *http.Response); ok {
		r0 = rf(ctx, variableID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetVariablesIDLabelsParams) error); ok {
		r1 = rf(ctx, variableID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetVariablesIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariablesIDLabels'
type ClientInterface_GetVariablesIDLabels_Call struct {
	*mock.Call
}

// GetVariablesIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.GetVariablesIDLabelsParams
func (_e *ClientInterface_Expecter) GetVariablesIDLabels(ctx interface{}, variableID interface{}, params interface{}) *ClientInterface_GetVariablesIDLabels_Call {
	return &ClientInterface_GetVariablesIDLabels_Call{Call: _e.mock.On("GetVariablesIDLabels", ctx, variableID, params)}
}

func (_c *ClientInterface_GetVariablesIDLabels_Call) Run(run func(ctx context.Context, variableID string, params *domain.GetVariablesIDLabelsParams)) *ClientInterface_GetVariablesIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetVariablesIDLabelsParams))
	})
	return _c
}

func (_c *ClientInterface_GetVariablesIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_GetVariablesIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// HeadPing provides a mock function with given fields: ctx
func (_m *ClientInterface) HeadPing(ctx context.Context) (*http.Response, error) {
	ret := _m.Called(ctx)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context) *http.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_HeadPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadPing'
type ClientInterface_HeadPing_Call struct {
	*mock.Call
}

// HeadPing is a helper method to define mock.On call
//  - ctx context.Context
func (_e *ClientInterface_Expecter) HeadPing(ctx interface{}) *ClientInterface_HeadPing_Call {
	return &ClientInterface_HeadPing_Call{Call: _e.mock.On("HeadPing", ctx)}
}

func (_c *ClientInterface_HeadPing_Call) Run(run func(ctx context.Context)) *ClientInterface_HeadPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClientInterface_HeadPing_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_HeadPing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListStacks provides a mock function with given fields: ctx, params
func (_m *ClientInterface) ListStacks(ctx context.Context, params *domain.ListStacksParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListStacksParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListStacksParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_ListStacks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStacks'
type ClientInterface_ListStacks_Call struct {
	*mock.Call
}

// ListStacks is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.ListStacksParams
func (_e *ClientInterface_Expecter) ListStacks(ctx interface{}, params interface{}) *ClientInterface_ListStacks_Call {
	return &ClientInterface_ListStacks_Call{Call: _e.mock.On("ListStacks", ctx, params)}
}

func (_c *ClientInterface_ListStacks_Call) Run(run func(ctx context.Context, params *domain.ListStacksParams)) *ClientInterface_ListStacks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListStacksParams))
	})
	return _c
}

func (_c *ClientInterface_ListStacks_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_ListStacks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchAuthorizationsID provides a mock function with given fields: ctx, authID, params, body
func (_m *ClientInterface) PatchAuthorizationsID(ctx context.Context, authID string, params *domain.PatchAuthorizationsIDParams, body domain.PatchAuthorizationsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchAuthorizationsIDParams, domain.PatchAuthorizationsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, authID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchAuthorizationsIDParams, domain.PatchAuthorizationsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, authID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchAuthorizationsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchAuthorizationsID'
type ClientInterface_PatchAuthorizationsID_Call struct {
	*mock.Call
}

// PatchAuthorizationsID is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PatchAuthorizationsIDParams
//  - body domain.PatchAuthorizationsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchAuthorizationsID(ctx interface{}, authID interface{}, params interface{}, body interface{}) *ClientInterface_PatchAuthorizationsID_Call {
	return &ClientInterface_PatchAuthorizationsID_Call{Call: _e.mock.On("PatchAuthorizationsID", ctx, authID, params, body)}
}

func (_c *ClientInterface_PatchAuthorizationsID_Call) Run(run func(ctx context.Context, authID string, params *domain.PatchAuthorizationsIDParams, body domain.PatchAuthorizationsIDJSONRequestBody)) *ClientInterface_PatchAuthorizationsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchAuthorizationsIDParams), args[3].(domain.PatchAuthorizationsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchAuthorizationsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchAuthorizationsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchAuthorizationsIDWithBody provides a mock function with given fields: ctx, authID, params, contentType, body
func (_m *ClientInterface) PatchAuthorizationsIDWithBody(ctx context.Context, authID string, params *domain.PatchAuthorizationsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchAuthorizationsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, authID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchAuthorizationsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, authID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchAuthorizationsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchAuthorizationsIDWithBody'
type ClientInterface_PatchAuthorizationsIDWithBody_Call struct {
	*mock.Call
}

// PatchAuthorizationsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PatchAuthorizationsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchAuthorizationsIDWithBody(ctx interface{}, authID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchAuthorizationsIDWithBody_Call {
	return &ClientInterface_PatchAuthorizationsIDWithBody_Call{Call: _e.mock.On("PatchAuthorizationsIDWithBody", ctx, authID, params, contentType, body)}
}

func (_c *ClientInterface_PatchAuthorizationsIDWithBody_Call) Run(run func(ctx context.Context, authID string, params *domain.PatchAuthorizationsIDParams, contentType string, body io.Reader)) *ClientInterface_PatchAuthorizationsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchAuthorizationsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchAuthorizationsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchAuthorizationsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchBucketsID provides a mock function with given fields: ctx, bucketID, params, body
func (_m *ClientInterface) PatchBucketsID(ctx context.Context, bucketID string, params *domain.PatchBucketsIDParams, body domain.PatchBucketsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchBucketsIDParams, domain.PatchBucketsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, bucketID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchBucketsIDParams, domain.PatchBucketsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, bucketID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchBucketsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchBucketsID'
type ClientInterface_PatchBucketsID_Call struct {
	*mock.Call
}

// PatchBucketsID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PatchBucketsIDParams
//  - body domain.PatchBucketsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchBucketsID(ctx interface{}, bucketID interface{}, params interface{}, body interface{}) *ClientInterface_PatchBucketsID_Call {
	return &ClientInterface_PatchBucketsID_Call{Call: _e.mock.On("PatchBucketsID", ctx, bucketID, params, body)}
}

func (_c *ClientInterface_PatchBucketsID_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PatchBucketsIDParams, body domain.PatchBucketsIDJSONRequestBody)) *ClientInterface_PatchBucketsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchBucketsIDParams), args[3].(domain.PatchBucketsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchBucketsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchBucketsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchBucketsIDWithBody provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientInterface) PatchBucketsIDWithBody(ctx context.Context, bucketID string, params *domain.PatchBucketsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchBucketsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchBucketsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchBucketsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchBucketsIDWithBody'
type ClientInterface_PatchBucketsIDWithBody_Call struct {
	*mock.Call
}

// PatchBucketsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PatchBucketsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchBucketsIDWithBody(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchBucketsIDWithBody_Call {
	return &ClientInterface_PatchBucketsIDWithBody_Call{Call: _e.mock.On("PatchBucketsIDWithBody", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientInterface_PatchBucketsIDWithBody_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PatchBucketsIDParams, contentType string, body io.Reader)) *ClientInterface_PatchBucketsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchBucketsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchBucketsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchBucketsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchChecksID provides a mock function with given fields: ctx, checkID, params, body
func (_m *ClientInterface) PatchChecksID(ctx context.Context, checkID string, params *domain.PatchChecksIDParams, body domain.PatchChecksIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchChecksIDParams, domain.PatchChecksIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, checkID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchChecksIDParams, domain.PatchChecksIDJSONRequestBody) error); ok {
		r1 = rf(ctx, checkID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchChecksID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchChecksID'
type ClientInterface_PatchChecksID_Call struct {
	*mock.Call
}

// PatchChecksID is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PatchChecksIDParams
//  - body domain.PatchChecksIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchChecksID(ctx interface{}, checkID interface{}, params interface{}, body interface{}) *ClientInterface_PatchChecksID_Call {
	return &ClientInterface_PatchChecksID_Call{Call: _e.mock.On("PatchChecksID", ctx, checkID, params, body)}
}

func (_c *ClientInterface_PatchChecksID_Call) Run(run func(ctx context.Context, checkID string, params *domain.PatchChecksIDParams, body domain.PatchChecksIDJSONRequestBody)) *ClientInterface_PatchChecksID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchChecksIDParams), args[3].(domain.PatchChecksIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchChecksID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchChecksID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchChecksIDWithBody provides a mock function with given fields: ctx, checkID, params, contentType, body
func (_m *ClientInterface) PatchChecksIDWithBody(ctx context.Context, checkID string, params *domain.PatchChecksIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchChecksIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, checkID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchChecksIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, checkID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchChecksIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchChecksIDWithBody'
type ClientInterface_PatchChecksIDWithBody_Call struct {
	*mock.Call
}

// PatchChecksIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PatchChecksIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchChecksIDWithBody(ctx interface{}, checkID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchChecksIDWithBody_Call {
	return &ClientInterface_PatchChecksIDWithBody_Call{Call: _e.mock.On("PatchChecksIDWithBody", ctx, checkID, params, contentType, body)}
}

func (_c *ClientInterface_PatchChecksIDWithBody_Call) Run(run func(ctx context.Context, checkID string, params *domain.PatchChecksIDParams, contentType string, body io.Reader)) *ClientInterface_PatchChecksIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchChecksIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchChecksIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchChecksIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDBRPID provides a mock function with given fields: ctx, dbrpID, params, body
func (_m *ClientInterface) PatchDBRPID(ctx context.Context, dbrpID string, params *domain.PatchDBRPIDParams, body domain.PatchDBRPIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, dbrpID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchDBRPIDParams, domain.PatchDBRPIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, dbrpID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchDBRPIDParams, domain.PatchDBRPIDJSONRequestBody) error); ok {
		r1 = rf(ctx, dbrpID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchDBRPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDBRPID'
type ClientInterface_PatchDBRPID_Call struct {
	*mock.Call
}

// PatchDBRPID is a helper method to define mock.On call
//  - ctx context.Context
//  - dbrpID string
//  - params *domain.PatchDBRPIDParams
//  - body domain.PatchDBRPIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchDBRPID(ctx interface{}, dbrpID interface{}, params interface{}, body interface{}) *ClientInterface_PatchDBRPID_Call {
	return &ClientInterface_PatchDBRPID_Call{Call: _e.mock.On("PatchDBRPID", ctx, dbrpID, params, body)}
}

func (_c *ClientInterface_PatchDBRPID_Call) Run(run func(ctx context.Context, dbrpID string, params *domain.PatchDBRPIDParams, body domain.PatchDBRPIDJSONRequestBody)) *ClientInterface_PatchDBRPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchDBRPIDParams), args[3].(domain.PatchDBRPIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchDBRPID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchDBRPID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDBRPIDWithBody provides a mock function with given fields: ctx, dbrpID, params, contentType, body
func (_m *ClientInterface) PatchDBRPIDWithBody(ctx context.Context, dbrpID string, params *domain.PatchDBRPIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, dbrpID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchDBRPIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, dbrpID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchDBRPIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dbrpID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchDBRPIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDBRPIDWithBody'
type ClientInterface_PatchDBRPIDWithBody_Call struct {
	*mock.Call
}

// PatchDBRPIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - dbrpID string
//  - params *domain.PatchDBRPIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchDBRPIDWithBody(ctx interface{}, dbrpID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchDBRPIDWithBody_Call {
	return &ClientInterface_PatchDBRPIDWithBody_Call{Call: _e.mock.On("PatchDBRPIDWithBody", ctx, dbrpID, params, contentType, body)}
}

func (_c *ClientInterface_PatchDBRPIDWithBody_Call) Run(run func(ctx context.Context, dbrpID string, params *domain.PatchDBRPIDParams, contentType string, body io.Reader)) *ClientInterface_PatchDBRPIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchDBRPIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchDBRPIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchDBRPIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsID provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientInterface) PatchDashboardsID(ctx context.Context, dashboardID string, params *domain.PatchDashboardsIDParams, body domain.PatchDashboardsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchDashboardsIDParams, domain.PatchDashboardsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchDashboardsIDParams, domain.PatchDashboardsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchDashboardsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsID'
type ClientInterface_PatchDashboardsID_Call struct {
	*mock.Call
}

// PatchDashboardsID is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PatchDashboardsIDParams
//  - body domain.PatchDashboardsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchDashboardsID(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientInterface_PatchDashboardsID_Call {
	return &ClientInterface_PatchDashboardsID_Call{Call: _e.mock.On("PatchDashboardsID", ctx, dashboardID, params, body)}
}

func (_c *ClientInterface_PatchDashboardsID_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PatchDashboardsIDParams, body domain.PatchDashboardsIDJSONRequestBody)) *ClientInterface_PatchDashboardsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchDashboardsIDParams), args[3].(domain.PatchDashboardsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchDashboardsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchDashboardsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDCellsID provides a mock function with given fields: ctx, dashboardID, cellID, params, body
func (_m *ClientInterface) PatchDashboardsIDCellsID(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDParams, body domain.PatchDashboardsIDCellsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDParams, domain.PatchDashboardsIDCellsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, dashboardID, cellID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDParams, domain.PatchDashboardsIDCellsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchDashboardsIDCellsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDCellsID'
type ClientInterface_PatchDashboardsIDCellsID_Call struct {
	*mock.Call
}

// PatchDashboardsIDCellsID is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.PatchDashboardsIDCellsIDParams
//  - body domain.PatchDashboardsIDCellsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchDashboardsIDCellsID(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}, body interface{}) *ClientInterface_PatchDashboardsIDCellsID_Call {
	return &ClientInterface_PatchDashboardsIDCellsID_Call{Call: _e.mock.On("PatchDashboardsIDCellsID", ctx, dashboardID, cellID, params, body)}
}

func (_c *ClientInterface_PatchDashboardsIDCellsID_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDParams, body domain.PatchDashboardsIDCellsIDJSONRequestBody)) *ClientInterface_PatchDashboardsIDCellsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PatchDashboardsIDCellsIDParams), args[4].(domain.PatchDashboardsIDCellsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchDashboardsIDCellsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchDashboardsIDCellsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDCellsIDView provides a mock function with given fields: ctx, dashboardID, cellID, params, body
func (_m *ClientInterface) PatchDashboardsIDCellsIDView(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDViewParams, body domain.PatchDashboardsIDCellsIDViewJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDViewParams, domain.PatchDashboardsIDCellsIDViewJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, dashboardID, cellID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDViewParams, domain.PatchDashboardsIDCellsIDViewJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchDashboardsIDCellsIDView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDCellsIDView'
type ClientInterface_PatchDashboardsIDCellsIDView_Call struct {
	*mock.Call
}

// PatchDashboardsIDCellsIDView is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.PatchDashboardsIDCellsIDViewParams
//  - body domain.PatchDashboardsIDCellsIDViewJSONRequestBody
func (_e *ClientInterface_Expecter) PatchDashboardsIDCellsIDView(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}, body interface{}) *ClientInterface_PatchDashboardsIDCellsIDView_Call {
	return &ClientInterface_PatchDashboardsIDCellsIDView_Call{Call: _e.mock.On("PatchDashboardsIDCellsIDView", ctx, dashboardID, cellID, params, body)}
}

func (_c *ClientInterface_PatchDashboardsIDCellsIDView_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDViewParams, body domain.PatchDashboardsIDCellsIDViewJSONRequestBody)) *ClientInterface_PatchDashboardsIDCellsIDView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PatchDashboardsIDCellsIDViewParams), args[4].(domain.PatchDashboardsIDCellsIDViewJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchDashboardsIDCellsIDView_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchDashboardsIDCellsIDView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDCellsIDViewWithBody provides a mock function with given fields: ctx, dashboardID, cellID, params, contentType, body
func (_m *ClientInterface) PatchDashboardsIDCellsIDViewWithBody(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDViewParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDViewParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, dashboardID, cellID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDViewParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchDashboardsIDCellsIDViewWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDCellsIDViewWithBody'
type ClientInterface_PatchDashboardsIDCellsIDViewWithBody_Call struct {
	*mock.Call
}

// PatchDashboardsIDCellsIDViewWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.PatchDashboardsIDCellsIDViewParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchDashboardsIDCellsIDViewWithBody(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchDashboardsIDCellsIDViewWithBody_Call {
	return &ClientInterface_PatchDashboardsIDCellsIDViewWithBody_Call{Call: _e.mock.On("PatchDashboardsIDCellsIDViewWithBody", ctx, dashboardID, cellID, params, contentType, body)}
}

func (_c *ClientInterface_PatchDashboardsIDCellsIDViewWithBody_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDViewParams, contentType string, body io.Reader)) *ClientInterface_PatchDashboardsIDCellsIDViewWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PatchDashboardsIDCellsIDViewParams), args[4].(string), args[5].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchDashboardsIDCellsIDViewWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchDashboardsIDCellsIDViewWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDCellsIDWithBody provides a mock function with given fields: ctx, dashboardID, cellID, params, contentType, body
func (_m *ClientInterface) PatchDashboardsIDCellsIDWithBody(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, dashboardID, cellID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchDashboardsIDCellsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDCellsIDWithBody'
type ClientInterface_PatchDashboardsIDCellsIDWithBody_Call struct {
	*mock.Call
}

// PatchDashboardsIDCellsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.PatchDashboardsIDCellsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchDashboardsIDCellsIDWithBody(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchDashboardsIDCellsIDWithBody_Call {
	return &ClientInterface_PatchDashboardsIDCellsIDWithBody_Call{Call: _e.mock.On("PatchDashboardsIDCellsIDWithBody", ctx, dashboardID, cellID, params, contentType, body)}
}

func (_c *ClientInterface_PatchDashboardsIDCellsIDWithBody_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDParams, contentType string, body io.Reader)) *ClientInterface_PatchDashboardsIDCellsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PatchDashboardsIDCellsIDParams), args[4].(string), args[5].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchDashboardsIDCellsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchDashboardsIDCellsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDWithBody provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientInterface) PatchDashboardsIDWithBody(ctx context.Context, dashboardID string, params *domain.PatchDashboardsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchDashboardsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchDashboardsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchDashboardsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDWithBody'
type ClientInterface_PatchDashboardsIDWithBody_Call struct {
	*mock.Call
}

// PatchDashboardsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PatchDashboardsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchDashboardsIDWithBody(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchDashboardsIDWithBody_Call {
	return &ClientInterface_PatchDashboardsIDWithBody_Call{Call: _e.mock.On("PatchDashboardsIDWithBody", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientInterface_PatchDashboardsIDWithBody_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PatchDashboardsIDParams, contentType string, body io.Reader)) *ClientInterface_PatchDashboardsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchDashboardsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchDashboardsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchDashboardsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchLabelsID provides a mock function with given fields: ctx, labelID, params, body
func (_m *ClientInterface) PatchLabelsID(ctx context.Context, labelID string, params *domain.PatchLabelsIDParams, body domain.PatchLabelsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, labelID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchLabelsIDParams, domain.PatchLabelsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, labelID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchLabelsIDParams, domain.PatchLabelsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, labelID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchLabelsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchLabelsID'
type ClientInterface_PatchLabelsID_Call struct {
	*mock.Call
}

// PatchLabelsID is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
//  - params *domain.PatchLabelsIDParams
//  - body domain.PatchLabelsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchLabelsID(ctx interface{}, labelID interface{}, params interface{}, body interface{}) *ClientInterface_PatchLabelsID_Call {
	return &ClientInterface_PatchLabelsID_Call{Call: _e.mock.On("PatchLabelsID", ctx, labelID, params, body)}
}

func (_c *ClientInterface_PatchLabelsID_Call) Run(run func(ctx context.Context, labelID string, params *domain.PatchLabelsIDParams, body domain.PatchLabelsIDJSONRequestBody)) *ClientInterface_PatchLabelsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchLabelsIDParams), args[3].(domain.PatchLabelsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchLabelsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchLabelsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchLabelsIDWithBody provides a mock function with given fields: ctx, labelID, params, contentType, body
func (_m *ClientInterface) PatchLabelsIDWithBody(ctx context.Context, labelID string, params *domain.PatchLabelsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, labelID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchLabelsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, labelID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchLabelsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, labelID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchLabelsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchLabelsIDWithBody'
type ClientInterface_PatchLabelsIDWithBody_Call struct {
	*mock.Call
}

// PatchLabelsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
//  - params *domain.PatchLabelsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchLabelsIDWithBody(ctx interface{}, labelID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchLabelsIDWithBody_Call {
	return &ClientInterface_PatchLabelsIDWithBody_Call{Call: _e.mock.On("PatchLabelsIDWithBody", ctx, labelID, params, contentType, body)}
}

func (_c *ClientInterface_PatchLabelsIDWithBody_Call) Run(run func(ctx context.Context, labelID string, params *domain.PatchLabelsIDParams, contentType string, body io.Reader)) *ClientInterface_PatchLabelsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchLabelsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchLabelsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchLabelsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchLegacyAuthorizationsID provides a mock function with given fields: ctx, authID, params, body
func (_m *ClientInterface) PatchLegacyAuthorizationsID(ctx context.Context, authID string, params *domain.PatchLegacyAuthorizationsIDParams, body domain.PatchLegacyAuthorizationsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchLegacyAuthorizationsIDParams, domain.PatchLegacyAuthorizationsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, authID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchLegacyAuthorizationsIDParams, domain.PatchLegacyAuthorizationsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, authID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchLegacyAuthorizationsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchLegacyAuthorizationsID'
type ClientInterface_PatchLegacyAuthorizationsID_Call struct {
	*mock.Call
}

// PatchLegacyAuthorizationsID is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PatchLegacyAuthorizationsIDParams
//  - body domain.PatchLegacyAuthorizationsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchLegacyAuthorizationsID(ctx interface{}, authID interface{}, params interface{}, body interface{}) *ClientInterface_PatchLegacyAuthorizationsID_Call {
	return &ClientInterface_PatchLegacyAuthorizationsID_Call{Call: _e.mock.On("PatchLegacyAuthorizationsID", ctx, authID, params, body)}
}

func (_c *ClientInterface_PatchLegacyAuthorizationsID_Call) Run(run func(ctx context.Context, authID string, params *domain.PatchLegacyAuthorizationsIDParams, body domain.PatchLegacyAuthorizationsIDJSONRequestBody)) *ClientInterface_PatchLegacyAuthorizationsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchLegacyAuthorizationsIDParams), args[3].(domain.PatchLegacyAuthorizationsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchLegacyAuthorizationsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchLegacyAuthorizationsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchLegacyAuthorizationsIDWithBody provides a mock function with given fields: ctx, authID, params, contentType, body
func (_m *ClientInterface) PatchLegacyAuthorizationsIDWithBody(ctx context.Context, authID string, params *domain.PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchLegacyAuthorizationsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, authID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchLegacyAuthorizationsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, authID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchLegacyAuthorizationsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchLegacyAuthorizationsIDWithBody'
type ClientInterface_PatchLegacyAuthorizationsIDWithBody_Call struct {
	*mock.Call
}

// PatchLegacyAuthorizationsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PatchLegacyAuthorizationsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchLegacyAuthorizationsIDWithBody(ctx interface{}, authID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchLegacyAuthorizationsIDWithBody_Call {
	return &ClientInterface_PatchLegacyAuthorizationsIDWithBody_Call{Call: _e.mock.On("PatchLegacyAuthorizationsIDWithBody", ctx, authID, params, contentType, body)}
}

func (_c *ClientInterface_PatchLegacyAuthorizationsIDWithBody_Call) Run(run func(ctx context.Context, authID string, params *domain.PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader)) *ClientInterface_PatchLegacyAuthorizationsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchLegacyAuthorizationsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchLegacyAuthorizationsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchLegacyAuthorizationsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchNotificationEndpointsID provides a mock function with given fields: ctx, endpointID, params, body
func (_m *ClientInterface) PatchNotificationEndpointsID(ctx context.Context, endpointID string, params *domain.PatchNotificationEndpointsIDParams, body domain.PatchNotificationEndpointsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchNotificationEndpointsIDParams, domain.PatchNotificationEndpointsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, endpointID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchNotificationEndpointsIDParams, domain.PatchNotificationEndpointsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, endpointID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchNotificationEndpointsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchNotificationEndpointsID'
type ClientInterface_PatchNotificationEndpointsID_Call struct {
	*mock.Call
}

// PatchNotificationEndpointsID is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PatchNotificationEndpointsIDParams
//  - body domain.PatchNotificationEndpointsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchNotificationEndpointsID(ctx interface{}, endpointID interface{}, params interface{}, body interface{}) *ClientInterface_PatchNotificationEndpointsID_Call {
	return &ClientInterface_PatchNotificationEndpointsID_Call{Call: _e.mock.On("PatchNotificationEndpointsID", ctx, endpointID, params, body)}
}

func (_c *ClientInterface_PatchNotificationEndpointsID_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PatchNotificationEndpointsIDParams, body domain.PatchNotificationEndpointsIDJSONRequestBody)) *ClientInterface_PatchNotificationEndpointsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchNotificationEndpointsIDParams), args[3].(domain.PatchNotificationEndpointsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchNotificationEndpointsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchNotificationEndpointsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchNotificationEndpointsIDWithBody provides a mock function with given fields: ctx, endpointID, params, contentType, body
func (_m *ClientInterface) PatchNotificationEndpointsIDWithBody(ctx context.Context, endpointID string, params *domain.PatchNotificationEndpointsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchNotificationEndpointsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, endpointID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchNotificationEndpointsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, endpointID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchNotificationEndpointsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchNotificationEndpointsIDWithBody'
type ClientInterface_PatchNotificationEndpointsIDWithBody_Call struct {
	*mock.Call
}

// PatchNotificationEndpointsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PatchNotificationEndpointsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchNotificationEndpointsIDWithBody(ctx interface{}, endpointID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchNotificationEndpointsIDWithBody_Call {
	return &ClientInterface_PatchNotificationEndpointsIDWithBody_Call{Call: _e.mock.On("PatchNotificationEndpointsIDWithBody", ctx, endpointID, params, contentType, body)}
}

func (_c *ClientInterface_PatchNotificationEndpointsIDWithBody_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PatchNotificationEndpointsIDParams, contentType string, body io.Reader)) *ClientInterface_PatchNotificationEndpointsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchNotificationEndpointsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchNotificationEndpointsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchNotificationEndpointsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchNotificationRulesID provides a mock function with given fields: ctx, ruleID, params, body
func (_m *ClientInterface) PatchNotificationRulesID(ctx context.Context, ruleID string, params *domain.PatchNotificationRulesIDParams, body domain.PatchNotificationRulesIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchNotificationRulesIDParams, domain.PatchNotificationRulesIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, ruleID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchNotificationRulesIDParams, domain.PatchNotificationRulesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, ruleID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchNotificationRulesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchNotificationRulesID'
type ClientInterface_PatchNotificationRulesID_Call struct {
	*mock.Call
}

// PatchNotificationRulesID is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PatchNotificationRulesIDParams
//  - body domain.PatchNotificationRulesIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchNotificationRulesID(ctx interface{}, ruleID interface{}, params interface{}, body interface{}) *ClientInterface_PatchNotificationRulesID_Call {
	return &ClientInterface_PatchNotificationRulesID_Call{Call: _e.mock.On("PatchNotificationRulesID", ctx, ruleID, params, body)}
}

func (_c *ClientInterface_PatchNotificationRulesID_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PatchNotificationRulesIDParams, body domain.PatchNotificationRulesIDJSONRequestBody)) *ClientInterface_PatchNotificationRulesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchNotificationRulesIDParams), args[3].(domain.PatchNotificationRulesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchNotificationRulesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchNotificationRulesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchNotificationRulesIDWithBody provides a mock function with given fields: ctx, ruleID, params, contentType, body
func (_m *ClientInterface) PatchNotificationRulesIDWithBody(ctx context.Context, ruleID string, params *domain.PatchNotificationRulesIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchNotificationRulesIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, ruleID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchNotificationRulesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, ruleID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchNotificationRulesIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchNotificationRulesIDWithBody'
type ClientInterface_PatchNotificationRulesIDWithBody_Call struct {
	*mock.Call
}

// PatchNotificationRulesIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PatchNotificationRulesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchNotificationRulesIDWithBody(ctx interface{}, ruleID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchNotificationRulesIDWithBody_Call {
	return &ClientInterface_PatchNotificationRulesIDWithBody_Call{Call: _e.mock.On("PatchNotificationRulesIDWithBody", ctx, ruleID, params, contentType, body)}
}

func (_c *ClientInterface_PatchNotificationRulesIDWithBody_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PatchNotificationRulesIDParams, contentType string, body io.Reader)) *ClientInterface_PatchNotificationRulesIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchNotificationRulesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchNotificationRulesIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchNotificationRulesIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchOrgsID provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientInterface) PatchOrgsID(ctx context.Context, orgID string, params *domain.PatchOrgsIDParams, body domain.PatchOrgsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchOrgsIDParams, domain.PatchOrgsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchOrgsIDParams, domain.PatchOrgsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchOrgsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsID'
type ClientInterface_PatchOrgsID_Call struct {
	*mock.Call
}

// PatchOrgsID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PatchOrgsIDParams
//  - body domain.PatchOrgsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchOrgsID(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientInterface_PatchOrgsID_Call {
	return &ClientInterface_PatchOrgsID_Call{Call: _e.mock.On("PatchOrgsID", ctx, orgID, params, body)}
}

func (_c *ClientInterface_PatchOrgsID_Call) Run(run func(ctx context.Context, orgID string, params *domain.PatchOrgsIDParams, body domain.PatchOrgsIDJSONRequestBody)) *ClientInterface_PatchOrgsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchOrgsIDParams), args[3].(domain.PatchOrgsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchOrgsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchOrgsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchOrgsIDSecrets provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientInterface) PatchOrgsIDSecrets(ctx context.Context, orgID string, params *domain.PatchOrgsIDSecretsParams, body domain.PatchOrgsIDSecretsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchOrgsIDSecretsParams, domain.PatchOrgsIDSecretsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchOrgsIDSecretsParams, domain.PatchOrgsIDSecretsJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchOrgsIDSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsIDSecrets'
type ClientInterface_PatchOrgsIDSecrets_Call struct {
	*mock.Call
}

// PatchOrgsIDSecrets is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PatchOrgsIDSecretsParams
//  - body domain.PatchOrgsIDSecretsJSONRequestBody
func (_e *ClientInterface_Expecter) PatchOrgsIDSecrets(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientInterface_PatchOrgsIDSecrets_Call {
	return &ClientInterface_PatchOrgsIDSecrets_Call{Call: _e.mock.On("PatchOrgsIDSecrets", ctx, orgID, params, body)}
}

func (_c *ClientInterface_PatchOrgsIDSecrets_Call) Run(run func(ctx context.Context, orgID string, params *domain.PatchOrgsIDSecretsParams, body domain.PatchOrgsIDSecretsJSONRequestBody)) *ClientInterface_PatchOrgsIDSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchOrgsIDSecretsParams), args[3].(domain.PatchOrgsIDSecretsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchOrgsIDSecrets_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchOrgsIDSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchOrgsIDSecretsWithBody provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientInterface) PatchOrgsIDSecretsWithBody(ctx context.Context, orgID string, params *domain.PatchOrgsIDSecretsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchOrgsIDSecretsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchOrgsIDSecretsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchOrgsIDSecretsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsIDSecretsWithBody'
type ClientInterface_PatchOrgsIDSecretsWithBody_Call struct {
	*mock.Call
}

// PatchOrgsIDSecretsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PatchOrgsIDSecretsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchOrgsIDSecretsWithBody(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchOrgsIDSecretsWithBody_Call {
	return &ClientInterface_PatchOrgsIDSecretsWithBody_Call{Call: _e.mock.On("PatchOrgsIDSecretsWithBody", ctx, orgID, params, contentType, body)}
}

func (_c *ClientInterface_PatchOrgsIDSecretsWithBody_Call) Run(run func(ctx context.Context, orgID string, params *domain.PatchOrgsIDSecretsParams, contentType string, body io.Reader)) *ClientInterface_PatchOrgsIDSecretsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchOrgsIDSecretsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchOrgsIDSecretsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchOrgsIDSecretsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchOrgsIDWithBody provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientInterface) PatchOrgsIDWithBody(ctx context.Context, orgID string, params *domain.PatchOrgsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchOrgsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchOrgsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchOrgsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsIDWithBody'
type ClientInterface_PatchOrgsIDWithBody_Call struct {
	*mock.Call
}

// PatchOrgsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PatchOrgsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchOrgsIDWithBody(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchOrgsIDWithBody_Call {
	return &ClientInterface_PatchOrgsIDWithBody_Call{Call: _e.mock.On("PatchOrgsIDWithBody", ctx, orgID, params, contentType, body)}
}

func (_c *ClientInterface_PatchOrgsIDWithBody_Call) Run(run func(ctx context.Context, orgID string, params *domain.PatchOrgsIDParams, contentType string, body io.Reader)) *ClientInterface_PatchOrgsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchOrgsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchOrgsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchOrgsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchRemoteConnectionByID provides a mock function with given fields: ctx, remoteID, params, body
func (_m *ClientInterface) PatchRemoteConnectionByID(ctx context.Context, remoteID string, params *domain.PatchRemoteConnectionByIDParams, body domain.PatchRemoteConnectionByIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, remoteID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchRemoteConnectionByIDParams, domain.PatchRemoteConnectionByIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, remoteID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchRemoteConnectionByIDParams, domain.PatchRemoteConnectionByIDJSONRequestBody) error); ok {
		r1 = rf(ctx, remoteID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchRemoteConnectionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchRemoteConnectionByID'
type ClientInterface_PatchRemoteConnectionByID_Call struct {
	*mock.Call
}

// PatchRemoteConnectionByID is a helper method to define mock.On call
//  - ctx context.Context
//  - remoteID string
//  - params *domain.PatchRemoteConnectionByIDParams
//  - body domain.PatchRemoteConnectionByIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchRemoteConnectionByID(ctx interface{}, remoteID interface{}, params interface{}, body interface{}) *ClientInterface_PatchRemoteConnectionByID_Call {
	return &ClientInterface_PatchRemoteConnectionByID_Call{Call: _e.mock.On("PatchRemoteConnectionByID", ctx, remoteID, params, body)}
}

func (_c *ClientInterface_PatchRemoteConnectionByID_Call) Run(run func(ctx context.Context, remoteID string, params *domain.PatchRemoteConnectionByIDParams, body domain.PatchRemoteConnectionByIDJSONRequestBody)) *ClientInterface_PatchRemoteConnectionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchRemoteConnectionByIDParams), args[3].(domain.PatchRemoteConnectionByIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchRemoteConnectionByID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchRemoteConnectionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchRemoteConnectionByIDWithBody provides a mock function with given fields: ctx, remoteID, params, contentType, body
func (_m *ClientInterface) PatchRemoteConnectionByIDWithBody(ctx context.Context, remoteID string, params *domain.PatchRemoteConnectionByIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, remoteID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchRemoteConnectionByIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, remoteID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchRemoteConnectionByIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, remoteID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchRemoteConnectionByIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchRemoteConnectionByIDWithBody'
type ClientInterface_PatchRemoteConnectionByIDWithBody_Call struct {
	*mock.Call
}

// PatchRemoteConnectionByIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - remoteID string
//  - params *domain.PatchRemoteConnectionByIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchRemoteConnectionByIDWithBody(ctx interface{}, remoteID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchRemoteConnectionByIDWithBody_Call {
	return &ClientInterface_PatchRemoteConnectionByIDWithBody_Call{Call: _e.mock.On("PatchRemoteConnectionByIDWithBody", ctx, remoteID, params, contentType, body)}
}

func (_c *ClientInterface_PatchRemoteConnectionByIDWithBody_Call) Run(run func(ctx context.Context, remoteID string, params *domain.PatchRemoteConnectionByIDParams, contentType string, body io.Reader)) *ClientInterface_PatchRemoteConnectionByIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchRemoteConnectionByIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchRemoteConnectionByIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchRemoteConnectionByIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchReplicationByID provides a mock function with given fields: ctx, replicationID, params, body
func (_m *ClientInterface) PatchReplicationByID(ctx context.Context, replicationID string, params *domain.PatchReplicationByIDParams, body domain.PatchReplicationByIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, replicationID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchReplicationByIDParams, domain.PatchReplicationByIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, replicationID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchReplicationByIDParams, domain.PatchReplicationByIDJSONRequestBody) error); ok {
		r1 = rf(ctx, replicationID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchReplicationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchReplicationByID'
type ClientInterface_PatchReplicationByID_Call struct {
	*mock.Call
}

// PatchReplicationByID is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.PatchReplicationByIDParams
//  - body domain.PatchReplicationByIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchReplicationByID(ctx interface{}, replicationID interface{}, params interface{}, body interface{}) *ClientInterface_PatchReplicationByID_Call {
	return &ClientInterface_PatchReplicationByID_Call{Call: _e.mock.On("PatchReplicationByID", ctx, replicationID, params, body)}
}

func (_c *ClientInterface_PatchReplicationByID_Call) Run(run func(ctx context.Context, replicationID string, params *domain.PatchReplicationByIDParams, body domain.PatchReplicationByIDJSONRequestBody)) *ClientInterface_PatchReplicationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchReplicationByIDParams), args[3].(domain.PatchReplicationByIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchReplicationByID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchReplicationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchReplicationByIDWithBody provides a mock function with given fields: ctx, replicationID, params, contentType, body
func (_m *ClientInterface) PatchReplicationByIDWithBody(ctx context.Context, replicationID string, params *domain.PatchReplicationByIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, replicationID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchReplicationByIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, replicationID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchReplicationByIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, replicationID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchReplicationByIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchReplicationByIDWithBody'
type ClientInterface_PatchReplicationByIDWithBody_Call struct {
	*mock.Call
}

// PatchReplicationByIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.PatchReplicationByIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchReplicationByIDWithBody(ctx interface{}, replicationID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchReplicationByIDWithBody_Call {
	return &ClientInterface_PatchReplicationByIDWithBody_Call{Call: _e.mock.On("PatchReplicationByIDWithBody", ctx, replicationID, params, contentType, body)}
}

func (_c *ClientInterface_PatchReplicationByIDWithBody_Call) Run(run func(ctx context.Context, replicationID string, params *domain.PatchReplicationByIDParams, contentType string, body io.Reader)) *ClientInterface_PatchReplicationByIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchReplicationByIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchReplicationByIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchReplicationByIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchScrapersID provides a mock function with given fields: ctx, scraperTargetID, params, body
func (_m *ClientInterface) PatchScrapersID(ctx context.Context, scraperTargetID string, params *domain.PatchScrapersIDParams, body domain.PatchScrapersIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchScrapersIDParams, domain.PatchScrapersIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchScrapersIDParams, domain.PatchScrapersIDJSONRequestBody) error); ok {
		r1 = rf(ctx, scraperTargetID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchScrapersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchScrapersID'
type ClientInterface_PatchScrapersID_Call struct {
	*mock.Call
}

// PatchScrapersID is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PatchScrapersIDParams
//  - body domain.PatchScrapersIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchScrapersID(ctx interface{}, scraperTargetID interface{}, params interface{}, body interface{}) *ClientInterface_PatchScrapersID_Call {
	return &ClientInterface_PatchScrapersID_Call{Call: _e.mock.On("PatchScrapersID", ctx, scraperTargetID, params, body)}
}

func (_c *ClientInterface_PatchScrapersID_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PatchScrapersIDParams, body domain.PatchScrapersIDJSONRequestBody)) *ClientInterface_PatchScrapersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchScrapersIDParams), args[3].(domain.PatchScrapersIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchScrapersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchScrapersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchScrapersIDWithBody provides a mock function with given fields: ctx, scraperTargetID, params, contentType, body
func (_m *ClientInterface) PatchScrapersIDWithBody(ctx context.Context, scraperTargetID string, params *domain.PatchScrapersIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchScrapersIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchScrapersIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchScrapersIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchScrapersIDWithBody'
type ClientInterface_PatchScrapersIDWithBody_Call struct {
	*mock.Call
}

// PatchScrapersIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PatchScrapersIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchScrapersIDWithBody(ctx interface{}, scraperTargetID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchScrapersIDWithBody_Call {
	return &ClientInterface_PatchScrapersIDWithBody_Call{Call: _e.mock.On("PatchScrapersIDWithBody", ctx, scraperTargetID, params, contentType, body)}
}

func (_c *ClientInterface_PatchScrapersIDWithBody_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PatchScrapersIDParams, contentType string, body io.Reader)) *ClientInterface_PatchScrapersIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchScrapersIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchScrapersIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchScrapersIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchSourcesID provides a mock function with given fields: ctx, sourceID, params, body
func (_m *ClientInterface) PatchSourcesID(ctx context.Context, sourceID string, params *domain.PatchSourcesIDParams, body domain.PatchSourcesIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, sourceID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchSourcesIDParams, domain.PatchSourcesIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, sourceID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchSourcesIDParams, domain.PatchSourcesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, sourceID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchSourcesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSourcesID'
type ClientInterface_PatchSourcesID_Call struct {
	*mock.Call
}

// PatchSourcesID is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.PatchSourcesIDParams
//  - body domain.PatchSourcesIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchSourcesID(ctx interface{}, sourceID interface{}, params interface{}, body interface{}) *ClientInterface_PatchSourcesID_Call {
	return &ClientInterface_PatchSourcesID_Call{Call: _e.mock.On("PatchSourcesID", ctx, sourceID, params, body)}
}

func (_c *ClientInterface_PatchSourcesID_Call) Run(run func(ctx context.Context, sourceID string, params *domain.PatchSourcesIDParams, body domain.PatchSourcesIDJSONRequestBody)) *ClientInterface_PatchSourcesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchSourcesIDParams), args[3].(domain.PatchSourcesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchSourcesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchSourcesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchSourcesIDWithBody provides a mock function with given fields: ctx, sourceID, params, contentType, body
func (_m *ClientInterface) PatchSourcesIDWithBody(ctx context.Context, sourceID string, params *domain.PatchSourcesIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, sourceID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchSourcesIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, sourceID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchSourcesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, sourceID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchSourcesIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSourcesIDWithBody'
type ClientInterface_PatchSourcesIDWithBody_Call struct {
	*mock.Call
}

// PatchSourcesIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.PatchSourcesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchSourcesIDWithBody(ctx interface{}, sourceID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchSourcesIDWithBody_Call {
	return &ClientInterface_PatchSourcesIDWithBody_Call{Call: _e.mock.On("PatchSourcesIDWithBody", ctx, sourceID, params, contentType, body)}
}

func (_c *ClientInterface_PatchSourcesIDWithBody_Call) Run(run func(ctx context.Context, sourceID string, params *domain.PatchSourcesIDParams, contentType string, body io.Reader)) *ClientInterface_PatchSourcesIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchSourcesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchSourcesIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchSourcesIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchTasksID provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientInterface) PatchTasksID(ctx context.Context, taskID string, params *domain.PatchTasksIDParams, body domain.PatchTasksIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchTasksIDParams, domain.PatchTasksIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchTasksIDParams, domain.PatchTasksIDJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchTasksID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchTasksID'
type ClientInterface_PatchTasksID_Call struct {
	*mock.Call
}

// PatchTasksID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PatchTasksIDParams
//  - body domain.PatchTasksIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchTasksID(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientInterface_PatchTasksID_Call {
	return &ClientInterface_PatchTasksID_Call{Call: _e.mock.On("PatchTasksID", ctx, taskID, params, body)}
}

func (_c *ClientInterface_PatchTasksID_Call) Run(run func(ctx context.Context, taskID string, params *domain.PatchTasksIDParams, body domain.PatchTasksIDJSONRequestBody)) *ClientInterface_PatchTasksID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchTasksIDParams), args[3].(domain.PatchTasksIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchTasksID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchTasksID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchTasksIDWithBody provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientInterface) PatchTasksIDWithBody(ctx context.Context, taskID string, params *domain.PatchTasksIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchTasksIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchTasksIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchTasksIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchTasksIDWithBody'
type ClientInterface_PatchTasksIDWithBody_Call struct {
	*mock.Call
}

// PatchTasksIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PatchTasksIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchTasksIDWithBody(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchTasksIDWithBody_Call {
	return &ClientInterface_PatchTasksIDWithBody_Call{Call: _e.mock.On("PatchTasksIDWithBody", ctx, taskID, params, contentType, body)}
}

func (_c *ClientInterface_PatchTasksIDWithBody_Call) Run(run func(ctx context.Context, taskID string, params *domain.PatchTasksIDParams, contentType string, body io.Reader)) *ClientInterface_PatchTasksIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchTasksIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchTasksIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchTasksIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchUsersID provides a mock function with given fields: ctx, userID, params, body
func (_m *ClientInterface) PatchUsersID(ctx context.Context, userID string, params *domain.PatchUsersIDParams, body domain.PatchUsersIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, userID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchUsersIDParams, domain.PatchUsersIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, userID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchUsersIDParams, domain.PatchUsersIDJSONRequestBody) error); ok {
		r1 = rf(ctx, userID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchUsersID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchUsersID'
type ClientInterface_PatchUsersID_Call struct {
	*mock.Call
}

// PatchUsersID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.PatchUsersIDParams
//  - body domain.PatchUsersIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchUsersID(ctx interface{}, userID interface{}, params interface{}, body interface{}) *ClientInterface_PatchUsersID_Call {
	return &ClientInterface_PatchUsersID_Call{Call: _e.mock.On("PatchUsersID", ctx, userID, params, body)}
}

func (_c *ClientInterface_PatchUsersID_Call) Run(run func(ctx context.Context, userID string, params *domain.PatchUsersIDParams, body domain.PatchUsersIDJSONRequestBody)) *ClientInterface_PatchUsersID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchUsersIDParams), args[3].(domain.PatchUsersIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchUsersID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchUsersID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchUsersIDWithBody provides a mock function with given fields: ctx, userID, params, contentType, body
func (_m *ClientInterface) PatchUsersIDWithBody(ctx context.Context, userID string, params *domain.PatchUsersIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, userID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchUsersIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, userID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchUsersIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, userID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchUsersIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchUsersIDWithBody'
type ClientInterface_PatchUsersIDWithBody_Call struct {
	*mock.Call
}

// PatchUsersIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.PatchUsersIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchUsersIDWithBody(ctx interface{}, userID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchUsersIDWithBody_Call {
	return &ClientInterface_PatchUsersIDWithBody_Call{Call: _e.mock.On("PatchUsersIDWithBody", ctx, userID, params, contentType, body)}
}

func (_c *ClientInterface_PatchUsersIDWithBody_Call) Run(run func(ctx context.Context, userID string, params *domain.PatchUsersIDParams, contentType string, body io.Reader)) *ClientInterface_PatchUsersIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchUsersIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchUsersIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchUsersIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchVariablesID provides a mock function with given fields: ctx, variableID, params, body
func (_m *ClientInterface) PatchVariablesID(ctx context.Context, variableID string, params *domain.PatchVariablesIDParams, body domain.PatchVariablesIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchVariablesIDParams, domain.PatchVariablesIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, variableID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchVariablesIDParams, domain.PatchVariablesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, variableID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchVariablesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchVariablesID'
type ClientInterface_PatchVariablesID_Call struct {
	*mock.Call
}

// PatchVariablesID is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PatchVariablesIDParams
//  - body domain.PatchVariablesIDJSONRequestBody
func (_e *ClientInterface_Expecter) PatchVariablesID(ctx interface{}, variableID interface{}, params interface{}, body interface{}) *ClientInterface_PatchVariablesID_Call {
	return &ClientInterface_PatchVariablesID_Call{Call: _e.mock.On("PatchVariablesID", ctx, variableID, params, body)}
}

func (_c *ClientInterface_PatchVariablesID_Call) Run(run func(ctx context.Context, variableID string, params *domain.PatchVariablesIDParams, body domain.PatchVariablesIDJSONRequestBody)) *ClientInterface_PatchVariablesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchVariablesIDParams), args[3].(domain.PatchVariablesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PatchVariablesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchVariablesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchVariablesIDWithBody provides a mock function with given fields: ctx, variableID, params, contentType, body
func (_m *ClientInterface) PatchVariablesIDWithBody(ctx context.Context, variableID string, params *domain.PatchVariablesIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchVariablesIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, variableID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchVariablesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, variableID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PatchVariablesIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchVariablesIDWithBody'
type ClientInterface_PatchVariablesIDWithBody_Call struct {
	*mock.Call
}

// PatchVariablesIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PatchVariablesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PatchVariablesIDWithBody(ctx interface{}, variableID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PatchVariablesIDWithBody_Call {
	return &ClientInterface_PatchVariablesIDWithBody_Call{Call: _e.mock.On("PatchVariablesIDWithBody", ctx, variableID, params, contentType, body)}
}

func (_c *ClientInterface_PatchVariablesIDWithBody_Call) Run(run func(ctx context.Context, variableID string, params *domain.PatchVariablesIDParams, contentType string, body io.Reader)) *ClientInterface_PatchVariablesIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchVariablesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PatchVariablesIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PatchVariablesIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostAuthorizations provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostAuthorizations(ctx context.Context, params *domain.PostAuthorizationsParams, body domain.PostAuthorizationsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostAuthorizationsParams, domain.PostAuthorizationsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostAuthorizationsParams, domain.PostAuthorizationsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostAuthorizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAuthorizations'
type ClientInterface_PostAuthorizations_Call struct {
	*mock.Call
}

// PostAuthorizations is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostAuthorizationsParams
//  - body domain.PostAuthorizationsJSONRequestBody
func (_e *ClientInterface_Expecter) PostAuthorizations(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostAuthorizations_Call {
	return &ClientInterface_PostAuthorizations_Call{Call: _e.mock.On("PostAuthorizations", ctx, params, body)}
}

func (_c *ClientInterface_PostAuthorizations_Call) Run(run func(ctx context.Context, params *domain.PostAuthorizationsParams, body domain.PostAuthorizationsJSONRequestBody)) *ClientInterface_PostAuthorizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostAuthorizationsParams), args[2].(domain.PostAuthorizationsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostAuthorizations_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostAuthorizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostAuthorizationsWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostAuthorizationsWithBody(ctx context.Context, params *domain.PostAuthorizationsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostAuthorizationsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostAuthorizationsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostAuthorizationsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAuthorizationsWithBody'
type ClientInterface_PostAuthorizationsWithBody_Call struct {
	*mock.Call
}

// PostAuthorizationsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostAuthorizationsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostAuthorizationsWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostAuthorizationsWithBody_Call {
	return &ClientInterface_PostAuthorizationsWithBody_Call{Call: _e.mock.On("PostAuthorizationsWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostAuthorizationsWithBody_Call) Run(run func(ctx context.Context, params *domain.PostAuthorizationsParams, contentType string, body io.Reader)) *ClientInterface_PostAuthorizationsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostAuthorizationsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostAuthorizationsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostAuthorizationsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBuckets provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostBuckets(ctx context.Context, params *domain.PostBucketsParams, body domain.PostBucketsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostBucketsParams, domain.PostBucketsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostBucketsParams, domain.PostBucketsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBuckets'
type ClientInterface_PostBuckets_Call struct {
	*mock.Call
}

// PostBuckets is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostBucketsParams
//  - body domain.PostBucketsJSONRequestBody
func (_e *ClientInterface_Expecter) PostBuckets(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostBuckets_Call {
	return &ClientInterface_PostBuckets_Call{Call: _e.mock.On("PostBuckets", ctx, params, body)}
}

func (_c *ClientInterface_PostBuckets_Call) Run(run func(ctx context.Context, params *domain.PostBucketsParams, body domain.PostBucketsJSONRequestBody)) *ClientInterface_PostBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostBucketsParams), args[2].(domain.PostBucketsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostBuckets_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostBuckets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDLabels provides a mock function with given fields: ctx, bucketID, params, body
func (_m *ClientInterface) PostBucketsIDLabels(ctx context.Context, bucketID string, params *domain.PostBucketsIDLabelsParams, body domain.PostBucketsIDLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDLabelsParams, domain.PostBucketsIDLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, bucketID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDLabelsParams, domain.PostBucketsIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, bucketID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostBucketsIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDLabels'
type ClientInterface_PostBucketsIDLabels_Call struct {
	*mock.Call
}

// PostBucketsIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDLabelsParams
//  - body domain.PostBucketsIDLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostBucketsIDLabels(ctx interface{}, bucketID interface{}, params interface{}, body interface{}) *ClientInterface_PostBucketsIDLabels_Call {
	return &ClientInterface_PostBucketsIDLabels_Call{Call: _e.mock.On("PostBucketsIDLabels", ctx, bucketID, params, body)}
}

func (_c *ClientInterface_PostBucketsIDLabels_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDLabelsParams, body domain.PostBucketsIDLabelsJSONRequestBody)) *ClientInterface_PostBucketsIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDLabelsParams), args[3].(domain.PostBucketsIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostBucketsIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostBucketsIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDLabelsWithBody provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientInterface) PostBucketsIDLabelsWithBody(ctx context.Context, bucketID string, params *domain.PostBucketsIDLabelsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDLabelsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostBucketsIDLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDLabelsWithBody'
type ClientInterface_PostBucketsIDLabelsWithBody_Call struct {
	*mock.Call
}

// PostBucketsIDLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostBucketsIDLabelsWithBody(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostBucketsIDLabelsWithBody_Call {
	return &ClientInterface_PostBucketsIDLabelsWithBody_Call{Call: _e.mock.On("PostBucketsIDLabelsWithBody", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientInterface_PostBucketsIDLabelsWithBody_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDLabelsParams, contentType string, body io.Reader)) *ClientInterface_PostBucketsIDLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostBucketsIDLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostBucketsIDLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDMembers provides a mock function with given fields: ctx, bucketID, params, body
func (_m *ClientInterface) PostBucketsIDMembers(ctx context.Context, bucketID string, params *domain.PostBucketsIDMembersParams, body domain.PostBucketsIDMembersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDMembersParams, domain.PostBucketsIDMembersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, bucketID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDMembersParams, domain.PostBucketsIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, bucketID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostBucketsIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDMembers'
type ClientInterface_PostBucketsIDMembers_Call struct {
	*mock.Call
}

// PostBucketsIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDMembersParams
//  - body domain.PostBucketsIDMembersJSONRequestBody
func (_e *ClientInterface_Expecter) PostBucketsIDMembers(ctx interface{}, bucketID interface{}, params interface{}, body interface{}) *ClientInterface_PostBucketsIDMembers_Call {
	return &ClientInterface_PostBucketsIDMembers_Call{Call: _e.mock.On("PostBucketsIDMembers", ctx, bucketID, params, body)}
}

func (_c *ClientInterface_PostBucketsIDMembers_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDMembersParams, body domain.PostBucketsIDMembersJSONRequestBody)) *ClientInterface_PostBucketsIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDMembersParams), args[3].(domain.PostBucketsIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostBucketsIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostBucketsIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDMembersWithBody provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientInterface) PostBucketsIDMembersWithBody(ctx context.Context, bucketID string, params *domain.PostBucketsIDMembersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDMembersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostBucketsIDMembersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDMembersWithBody'
type ClientInterface_PostBucketsIDMembersWithBody_Call struct {
	*mock.Call
}

// PostBucketsIDMembersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostBucketsIDMembersWithBody(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostBucketsIDMembersWithBody_Call {
	return &ClientInterface_PostBucketsIDMembersWithBody_Call{Call: _e.mock.On("PostBucketsIDMembersWithBody", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientInterface_PostBucketsIDMembersWithBody_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDMembersParams, contentType string, body io.Reader)) *ClientInterface_PostBucketsIDMembersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostBucketsIDMembersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostBucketsIDMembersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDOwners provides a mock function with given fields: ctx, bucketID, params, body
func (_m *ClientInterface) PostBucketsIDOwners(ctx context.Context, bucketID string, params *domain.PostBucketsIDOwnersParams, body domain.PostBucketsIDOwnersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDOwnersParams, domain.PostBucketsIDOwnersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, bucketID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDOwnersParams, domain.PostBucketsIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, bucketID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostBucketsIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDOwners'
type ClientInterface_PostBucketsIDOwners_Call struct {
	*mock.Call
}

// PostBucketsIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDOwnersParams
//  - body domain.PostBucketsIDOwnersJSONRequestBody
func (_e *ClientInterface_Expecter) PostBucketsIDOwners(ctx interface{}, bucketID interface{}, params interface{}, body interface{}) *ClientInterface_PostBucketsIDOwners_Call {
	return &ClientInterface_PostBucketsIDOwners_Call{Call: _e.mock.On("PostBucketsIDOwners", ctx, bucketID, params, body)}
}

func (_c *ClientInterface_PostBucketsIDOwners_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDOwnersParams, body domain.PostBucketsIDOwnersJSONRequestBody)) *ClientInterface_PostBucketsIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDOwnersParams), args[3].(domain.PostBucketsIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostBucketsIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostBucketsIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDOwnersWithBody provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientInterface) PostBucketsIDOwnersWithBody(ctx context.Context, bucketID string, params *domain.PostBucketsIDOwnersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDOwnersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostBucketsIDOwnersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDOwnersWithBody'
type ClientInterface_PostBucketsIDOwnersWithBody_Call struct {
	*mock.Call
}

// PostBucketsIDOwnersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostBucketsIDOwnersWithBody(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostBucketsIDOwnersWithBody_Call {
	return &ClientInterface_PostBucketsIDOwnersWithBody_Call{Call: _e.mock.On("PostBucketsIDOwnersWithBody", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientInterface_PostBucketsIDOwnersWithBody_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDOwnersParams, contentType string, body io.Reader)) *ClientInterface_PostBucketsIDOwnersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostBucketsIDOwnersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostBucketsIDOwnersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostBucketsWithBody(ctx context.Context, params *domain.PostBucketsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostBucketsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostBucketsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostBucketsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsWithBody'
type ClientInterface_PostBucketsWithBody_Call struct {
	*mock.Call
}

// PostBucketsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostBucketsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostBucketsWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostBucketsWithBody_Call {
	return &ClientInterface_PostBucketsWithBody_Call{Call: _e.mock.On("PostBucketsWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostBucketsWithBody_Call) Run(run func(ctx context.Context, params *domain.PostBucketsParams, contentType string, body io.Reader)) *ClientInterface_PostBucketsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostBucketsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostBucketsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostBucketsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostChecksIDLabels provides a mock function with given fields: ctx, checkID, params, body
func (_m *ClientInterface) PostChecksIDLabels(ctx context.Context, checkID string, params *domain.PostChecksIDLabelsParams, body domain.PostChecksIDLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostChecksIDLabelsParams, domain.PostChecksIDLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, checkID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostChecksIDLabelsParams, domain.PostChecksIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, checkID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostChecksIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostChecksIDLabels'
type ClientInterface_PostChecksIDLabels_Call struct {
	*mock.Call
}

// PostChecksIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PostChecksIDLabelsParams
//  - body domain.PostChecksIDLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostChecksIDLabels(ctx interface{}, checkID interface{}, params interface{}, body interface{}) *ClientInterface_PostChecksIDLabels_Call {
	return &ClientInterface_PostChecksIDLabels_Call{Call: _e.mock.On("PostChecksIDLabels", ctx, checkID, params, body)}
}

func (_c *ClientInterface_PostChecksIDLabels_Call) Run(run func(ctx context.Context, checkID string, params *domain.PostChecksIDLabelsParams, body domain.PostChecksIDLabelsJSONRequestBody)) *ClientInterface_PostChecksIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostChecksIDLabelsParams), args[3].(domain.PostChecksIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostChecksIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostChecksIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostChecksIDLabelsWithBody provides a mock function with given fields: ctx, checkID, params, contentType, body
func (_m *ClientInterface) PostChecksIDLabelsWithBody(ctx context.Context, checkID string, params *domain.PostChecksIDLabelsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostChecksIDLabelsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, checkID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostChecksIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, checkID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostChecksIDLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostChecksIDLabelsWithBody'
type ClientInterface_PostChecksIDLabelsWithBody_Call struct {
	*mock.Call
}

// PostChecksIDLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PostChecksIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostChecksIDLabelsWithBody(ctx interface{}, checkID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostChecksIDLabelsWithBody_Call {
	return &ClientInterface_PostChecksIDLabelsWithBody_Call{Call: _e.mock.On("PostChecksIDLabelsWithBody", ctx, checkID, params, contentType, body)}
}

func (_c *ClientInterface_PostChecksIDLabelsWithBody_Call) Run(run func(ctx context.Context, checkID string, params *domain.PostChecksIDLabelsParams, contentType string, body io.Reader)) *ClientInterface_PostChecksIDLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostChecksIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostChecksIDLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostChecksIDLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDBRP provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostDBRP(ctx context.Context, params *domain.PostDBRPParams, body domain.PostDBRPJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDBRPParams, domain.PostDBRPJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDBRPParams, domain.PostDBRPJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDBRP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDBRP'
type ClientInterface_PostDBRP_Call struct {
	*mock.Call
}

// PostDBRP is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDBRPParams
//  - body domain.PostDBRPJSONRequestBody
func (_e *ClientInterface_Expecter) PostDBRP(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostDBRP_Call {
	return &ClientInterface_PostDBRP_Call{Call: _e.mock.On("PostDBRP", ctx, params, body)}
}

func (_c *ClientInterface_PostDBRP_Call) Run(run func(ctx context.Context, params *domain.PostDBRPParams, body domain.PostDBRPJSONRequestBody)) *ClientInterface_PostDBRP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDBRPParams), args[2].(domain.PostDBRPJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostDBRP_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDBRP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDBRPWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostDBRPWithBody(ctx context.Context, params *domain.PostDBRPParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDBRPParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDBRPParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDBRPWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDBRPWithBody'
type ClientInterface_PostDBRPWithBody_Call struct {
	*mock.Call
}

// PostDBRPWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDBRPParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostDBRPWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostDBRPWithBody_Call {
	return &ClientInterface_PostDBRPWithBody_Call{Call: _e.mock.On("PostDBRPWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostDBRPWithBody_Call) Run(run func(ctx context.Context, params *domain.PostDBRPParams, contentType string, body io.Reader)) *ClientInterface_PostDBRPWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDBRPParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostDBRPWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDBRPWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboards provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostDashboards(ctx context.Context, params *domain.PostDashboardsParams, body domain.PostDashboardsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDashboardsParams, domain.PostDashboardsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDashboardsParams, domain.PostDashboardsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboards'
type ClientInterface_PostDashboards_Call struct {
	*mock.Call
}

// PostDashboards is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDashboardsParams
//  - body domain.PostDashboardsJSONRequestBody
func (_e *ClientInterface_Expecter) PostDashboards(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostDashboards_Call {
	return &ClientInterface_PostDashboards_Call{Call: _e.mock.On("PostDashboards", ctx, params, body)}
}

func (_c *ClientInterface_PostDashboards_Call) Run(run func(ctx context.Context, params *domain.PostDashboardsParams, body domain.PostDashboardsJSONRequestBody)) *ClientInterface_PostDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDashboardsParams), args[2].(domain.PostDashboardsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostDashboards_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDCells provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientInterface) PostDashboardsIDCells(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDCellsParams, body domain.PostDashboardsIDCellsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDCellsParams, domain.PostDashboardsIDCellsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDCellsParams, domain.PostDashboardsIDCellsJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboardsIDCells_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDCells'
type ClientInterface_PostDashboardsIDCells_Call struct {
	*mock.Call
}

// PostDashboardsIDCells is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDCellsParams
//  - body domain.PostDashboardsIDCellsJSONRequestBody
func (_e *ClientInterface_Expecter) PostDashboardsIDCells(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientInterface_PostDashboardsIDCells_Call {
	return &ClientInterface_PostDashboardsIDCells_Call{Call: _e.mock.On("PostDashboardsIDCells", ctx, dashboardID, params, body)}
}

func (_c *ClientInterface_PostDashboardsIDCells_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDCellsParams, body domain.PostDashboardsIDCellsJSONRequestBody)) *ClientInterface_PostDashboardsIDCells_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDCellsParams), args[3].(domain.PostDashboardsIDCellsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostDashboardsIDCells_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboardsIDCells_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDCellsWithBody provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientInterface) PostDashboardsIDCellsWithBody(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDCellsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDCellsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDCellsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboardsIDCellsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDCellsWithBody'
type ClientInterface_PostDashboardsIDCellsWithBody_Call struct {
	*mock.Call
}

// PostDashboardsIDCellsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDCellsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostDashboardsIDCellsWithBody(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostDashboardsIDCellsWithBody_Call {
	return &ClientInterface_PostDashboardsIDCellsWithBody_Call{Call: _e.mock.On("PostDashboardsIDCellsWithBody", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientInterface_PostDashboardsIDCellsWithBody_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDCellsParams, contentType string, body io.Reader)) *ClientInterface_PostDashboardsIDCellsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDCellsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostDashboardsIDCellsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboardsIDCellsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDLabels provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientInterface) PostDashboardsIDLabels(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDLabelsParams, body domain.PostDashboardsIDLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDLabelsParams, domain.PostDashboardsIDLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDLabelsParams, domain.PostDashboardsIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboardsIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDLabels'
type ClientInterface_PostDashboardsIDLabels_Call struct {
	*mock.Call
}

// PostDashboardsIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDLabelsParams
//  - body domain.PostDashboardsIDLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostDashboardsIDLabels(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientInterface_PostDashboardsIDLabels_Call {
	return &ClientInterface_PostDashboardsIDLabels_Call{Call: _e.mock.On("PostDashboardsIDLabels", ctx, dashboardID, params, body)}
}

func (_c *ClientInterface_PostDashboardsIDLabels_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDLabelsParams, body domain.PostDashboardsIDLabelsJSONRequestBody)) *ClientInterface_PostDashboardsIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDLabelsParams), args[3].(domain.PostDashboardsIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostDashboardsIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboardsIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDLabelsWithBody provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientInterface) PostDashboardsIDLabelsWithBody(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDLabelsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDLabelsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboardsIDLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDLabelsWithBody'
type ClientInterface_PostDashboardsIDLabelsWithBody_Call struct {
	*mock.Call
}

// PostDashboardsIDLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostDashboardsIDLabelsWithBody(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostDashboardsIDLabelsWithBody_Call {
	return &ClientInterface_PostDashboardsIDLabelsWithBody_Call{Call: _e.mock.On("PostDashboardsIDLabelsWithBody", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientInterface_PostDashboardsIDLabelsWithBody_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDLabelsParams, contentType string, body io.Reader)) *ClientInterface_PostDashboardsIDLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostDashboardsIDLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboardsIDLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDMembers provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientInterface) PostDashboardsIDMembers(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDMembersParams, body domain.PostDashboardsIDMembersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDMembersParams, domain.PostDashboardsIDMembersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDMembersParams, domain.PostDashboardsIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboardsIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDMembers'
type ClientInterface_PostDashboardsIDMembers_Call struct {
	*mock.Call
}

// PostDashboardsIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDMembersParams
//  - body domain.PostDashboardsIDMembersJSONRequestBody
func (_e *ClientInterface_Expecter) PostDashboardsIDMembers(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientInterface_PostDashboardsIDMembers_Call {
	return &ClientInterface_PostDashboardsIDMembers_Call{Call: _e.mock.On("PostDashboardsIDMembers", ctx, dashboardID, params, body)}
}

func (_c *ClientInterface_PostDashboardsIDMembers_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDMembersParams, body domain.PostDashboardsIDMembersJSONRequestBody)) *ClientInterface_PostDashboardsIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDMembersParams), args[3].(domain.PostDashboardsIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostDashboardsIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboardsIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDMembersWithBody provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientInterface) PostDashboardsIDMembersWithBody(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDMembersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDMembersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboardsIDMembersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDMembersWithBody'
type ClientInterface_PostDashboardsIDMembersWithBody_Call struct {
	*mock.Call
}

// PostDashboardsIDMembersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostDashboardsIDMembersWithBody(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostDashboardsIDMembersWithBody_Call {
	return &ClientInterface_PostDashboardsIDMembersWithBody_Call{Call: _e.mock.On("PostDashboardsIDMembersWithBody", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientInterface_PostDashboardsIDMembersWithBody_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDMembersParams, contentType string, body io.Reader)) *ClientInterface_PostDashboardsIDMembersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostDashboardsIDMembersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboardsIDMembersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDOwners provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientInterface) PostDashboardsIDOwners(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDOwnersParams, body domain.PostDashboardsIDOwnersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDOwnersParams, domain.PostDashboardsIDOwnersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDOwnersParams, domain.PostDashboardsIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboardsIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDOwners'
type ClientInterface_PostDashboardsIDOwners_Call struct {
	*mock.Call
}

// PostDashboardsIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDOwnersParams
//  - body domain.PostDashboardsIDOwnersJSONRequestBody
func (_e *ClientInterface_Expecter) PostDashboardsIDOwners(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientInterface_PostDashboardsIDOwners_Call {
	return &ClientInterface_PostDashboardsIDOwners_Call{Call: _e.mock.On("PostDashboardsIDOwners", ctx, dashboardID, params, body)}
}

func (_c *ClientInterface_PostDashboardsIDOwners_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDOwnersParams, body domain.PostDashboardsIDOwnersJSONRequestBody)) *ClientInterface_PostDashboardsIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDOwnersParams), args[3].(domain.PostDashboardsIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostDashboardsIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboardsIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDOwnersWithBody provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientInterface) PostDashboardsIDOwnersWithBody(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDOwnersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDOwnersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboardsIDOwnersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDOwnersWithBody'
type ClientInterface_PostDashboardsIDOwnersWithBody_Call struct {
	*mock.Call
}

// PostDashboardsIDOwnersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostDashboardsIDOwnersWithBody(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostDashboardsIDOwnersWithBody_Call {
	return &ClientInterface_PostDashboardsIDOwnersWithBody_Call{Call: _e.mock.On("PostDashboardsIDOwnersWithBody", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientInterface_PostDashboardsIDOwnersWithBody_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDOwnersParams, contentType string, body io.Reader)) *ClientInterface_PostDashboardsIDOwnersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostDashboardsIDOwnersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboardsIDOwnersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostDashboardsWithBody(ctx context.Context, params *domain.PostDashboardsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDashboardsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDashboardsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDashboardsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsWithBody'
type ClientInterface_PostDashboardsWithBody_Call struct {
	*mock.Call
}

// PostDashboardsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDashboardsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostDashboardsWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostDashboardsWithBody_Call {
	return &ClientInterface_PostDashboardsWithBody_Call{Call: _e.mock.On("PostDashboardsWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostDashboardsWithBody_Call) Run(run func(ctx context.Context, params *domain.PostDashboardsParams, contentType string, body io.Reader)) *ClientInterface_PostDashboardsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDashboardsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostDashboardsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDashboardsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDelete provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostDelete(ctx context.Context, params *domain.PostDeleteParams, body domain.PostDeleteJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDeleteParams, domain.PostDeleteJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDeleteParams, domain.PostDeleteJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDelete'
type ClientInterface_PostDelete_Call struct {
	*mock.Call
}

// PostDelete is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDeleteParams
//  - body domain.PostDeleteJSONRequestBody
func (_e *ClientInterface_Expecter) PostDelete(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostDelete_Call {
	return &ClientInterface_PostDelete_Call{Call: _e.mock.On("PostDelete", ctx, params, body)}
}

func (_c *ClientInterface_PostDelete_Call) Run(run func(ctx context.Context, params *domain.PostDeleteParams, body domain.PostDeleteJSONRequestBody)) *ClientInterface_PostDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDeleteParams), args[2].(domain.PostDeleteJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostDelete_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDeleteWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostDeleteWithBody(ctx context.Context, params *domain.PostDeleteParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDeleteParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDeleteParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostDeleteWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDeleteWithBody'
type ClientInterface_PostDeleteWithBody_Call struct {
	*mock.Call
}

// PostDeleteWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDeleteParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostDeleteWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostDeleteWithBody_Call {
	return &ClientInterface_PostDeleteWithBody_Call{Call: _e.mock.On("PostDeleteWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostDeleteWithBody_Call) Run(run func(ctx context.Context, params *domain.PostDeleteParams, contentType string, body io.Reader)) *ClientInterface_PostDeleteWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDeleteParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostDeleteWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostDeleteWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLabels provides a mock function with given fields: ctx, body
func (_m *ClientInterface) PostLabels(ctx context.Context, body domain.PostLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, domain.PostLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.PostLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLabels'
type ClientInterface_PostLabels_Call struct {
	*mock.Call
}

// PostLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.PostLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostLabels(ctx interface{}, body interface{}) *ClientInterface_PostLabels_Call {
	return &ClientInterface_PostLabels_Call{Call: _e.mock.On("PostLabels", ctx, body)}
}

func (_c *ClientInterface_PostLabels_Call) Run(run func(ctx context.Context, body domain.PostLabelsJSONRequestBody)) *ClientInterface_PostLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PostLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLabelsWithBody provides a mock function with given fields: ctx, contentType, body
func (_m *ClientInterface) PostLabelsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLabelsWithBody'
type ClientInterface_PostLabelsWithBody_Call struct {
	*mock.Call
}

// PostLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostLabelsWithBody(ctx interface{}, contentType interface{}, body interface{}) *ClientInterface_PostLabelsWithBody_Call {
	return &ClientInterface_PostLabelsWithBody_Call{Call: _e.mock.On("PostLabelsWithBody", ctx, contentType, body)}
}

func (_c *ClientInterface_PostLabelsWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientInterface_PostLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLegacyAuthorizations provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostLegacyAuthorizations(ctx context.Context, params *domain.PostLegacyAuthorizationsParams, body domain.PostLegacyAuthorizationsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostLegacyAuthorizationsParams, domain.PostLegacyAuthorizationsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostLegacyAuthorizationsParams, domain.PostLegacyAuthorizationsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostLegacyAuthorizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLegacyAuthorizations'
type ClientInterface_PostLegacyAuthorizations_Call struct {
	*mock.Call
}

// PostLegacyAuthorizations is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostLegacyAuthorizationsParams
//  - body domain.PostLegacyAuthorizationsJSONRequestBody
func (_e *ClientInterface_Expecter) PostLegacyAuthorizations(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostLegacyAuthorizations_Call {
	return &ClientInterface_PostLegacyAuthorizations_Call{Call: _e.mock.On("PostLegacyAuthorizations", ctx, params, body)}
}

func (_c *ClientInterface_PostLegacyAuthorizations_Call) Run(run func(ctx context.Context, params *domain.PostLegacyAuthorizationsParams, body domain.PostLegacyAuthorizationsJSONRequestBody)) *ClientInterface_PostLegacyAuthorizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostLegacyAuthorizationsParams), args[2].(domain.PostLegacyAuthorizationsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostLegacyAuthorizations_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostLegacyAuthorizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLegacyAuthorizationsIDPassword provides a mock function with given fields: ctx, authID, params, body
func (_m *ClientInterface) PostLegacyAuthorizationsIDPassword(ctx context.Context, authID string, params *domain.PostLegacyAuthorizationsIDPasswordParams, body domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostLegacyAuthorizationsIDPasswordParams, domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, authID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostLegacyAuthorizationsIDPasswordParams, domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody) error); ok {
		r1 = rf(ctx, authID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostLegacyAuthorizationsIDPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLegacyAuthorizationsIDPassword'
type ClientInterface_PostLegacyAuthorizationsIDPassword_Call struct {
	*mock.Call
}

// PostLegacyAuthorizationsIDPassword is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PostLegacyAuthorizationsIDPasswordParams
//  - body domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody
func (_e *ClientInterface_Expecter) PostLegacyAuthorizationsIDPassword(ctx interface{}, authID interface{}, params interface{}, body interface{}) *ClientInterface_PostLegacyAuthorizationsIDPassword_Call {
	return &ClientInterface_PostLegacyAuthorizationsIDPassword_Call{Call: _e.mock.On("PostLegacyAuthorizationsIDPassword", ctx, authID, params, body)}
}

func (_c *ClientInterface_PostLegacyAuthorizationsIDPassword_Call) Run(run func(ctx context.Context, authID string, params *domain.PostLegacyAuthorizationsIDPasswordParams, body domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody)) *ClientInterface_PostLegacyAuthorizationsIDPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostLegacyAuthorizationsIDPasswordParams), args[3].(domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostLegacyAuthorizationsIDPassword_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostLegacyAuthorizationsIDPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLegacyAuthorizationsIDPasswordWithBody provides a mock function with given fields: ctx, authID, params, contentType, body
func (_m *ClientInterface) PostLegacyAuthorizationsIDPasswordWithBody(ctx context.Context, authID string, params *domain.PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, authID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostLegacyAuthorizationsIDPasswordParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, authID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostLegacyAuthorizationsIDPasswordParams, string, io.Reader) error); ok {
		r1 = rf(ctx, authID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostLegacyAuthorizationsIDPasswordWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLegacyAuthorizationsIDPasswordWithBody'
type ClientInterface_PostLegacyAuthorizationsIDPasswordWithBody_Call struct {
	*mock.Call
}

// PostLegacyAuthorizationsIDPasswordWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PostLegacyAuthorizationsIDPasswordParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostLegacyAuthorizationsIDPasswordWithBody(ctx interface{}, authID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostLegacyAuthorizationsIDPasswordWithBody_Call {
	return &ClientInterface_PostLegacyAuthorizationsIDPasswordWithBody_Call{Call: _e.mock.On("PostLegacyAuthorizationsIDPasswordWithBody", ctx, authID, params, contentType, body)}
}

func (_c *ClientInterface_PostLegacyAuthorizationsIDPasswordWithBody_Call) Run(run func(ctx context.Context, authID string, params *domain.PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader)) *ClientInterface_PostLegacyAuthorizationsIDPasswordWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostLegacyAuthorizationsIDPasswordParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostLegacyAuthorizationsIDPasswordWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostLegacyAuthorizationsIDPasswordWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLegacyAuthorizationsWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostLegacyAuthorizationsWithBody(ctx context.Context, params *domain.PostLegacyAuthorizationsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostLegacyAuthorizationsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostLegacyAuthorizationsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostLegacyAuthorizationsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLegacyAuthorizationsWithBody'
type ClientInterface_PostLegacyAuthorizationsWithBody_Call struct {
	*mock.Call
}

// PostLegacyAuthorizationsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostLegacyAuthorizationsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostLegacyAuthorizationsWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostLegacyAuthorizationsWithBody_Call {
	return &ClientInterface_PostLegacyAuthorizationsWithBody_Call{Call: _e.mock.On("PostLegacyAuthorizationsWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostLegacyAuthorizationsWithBody_Call) Run(run func(ctx context.Context, params *domain.PostLegacyAuthorizationsParams, contentType string, body io.Reader)) *ClientInterface_PostLegacyAuthorizationsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostLegacyAuthorizationsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostLegacyAuthorizationsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostLegacyAuthorizationsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostNotificationEndpointIDLabels provides a mock function with given fields: ctx, endpointID, params, body
func (_m *ClientInterface) PostNotificationEndpointIDLabels(ctx context.Context, endpointID string, params *domain.PostNotificationEndpointIDLabelsParams, body domain.PostNotificationEndpointIDLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostNotificationEndpointIDLabelsParams, domain.PostNotificationEndpointIDLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, endpointID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostNotificationEndpointIDLabelsParams, domain.PostNotificationEndpointIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, endpointID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostNotificationEndpointIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostNotificationEndpointIDLabels'
type ClientInterface_PostNotificationEndpointIDLabels_Call struct {
	*mock.Call
}

// PostNotificationEndpointIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PostNotificationEndpointIDLabelsParams
//  - body domain.PostNotificationEndpointIDLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostNotificationEndpointIDLabels(ctx interface{}, endpointID interface{}, params interface{}, body interface{}) *ClientInterface_PostNotificationEndpointIDLabels_Call {
	return &ClientInterface_PostNotificationEndpointIDLabels_Call{Call: _e.mock.On("PostNotificationEndpointIDLabels", ctx, endpointID, params, body)}
}

func (_c *ClientInterface_PostNotificationEndpointIDLabels_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PostNotificationEndpointIDLabelsParams, body domain.PostNotificationEndpointIDLabelsJSONRequestBody)) *ClientInterface_PostNotificationEndpointIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostNotificationEndpointIDLabelsParams), args[3].(domain.PostNotificationEndpointIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostNotificationEndpointIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostNotificationEndpointIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostNotificationEndpointIDLabelsWithBody provides a mock function with given fields: ctx, endpointID, params, contentType, body
func (_m *ClientInterface) PostNotificationEndpointIDLabelsWithBody(ctx context.Context, endpointID string, params *domain.PostNotificationEndpointIDLabelsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostNotificationEndpointIDLabelsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, endpointID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostNotificationEndpointIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, endpointID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostNotificationEndpointIDLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostNotificationEndpointIDLabelsWithBody'
type ClientInterface_PostNotificationEndpointIDLabelsWithBody_Call struct {
	*mock.Call
}

// PostNotificationEndpointIDLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PostNotificationEndpointIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostNotificationEndpointIDLabelsWithBody(ctx interface{}, endpointID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostNotificationEndpointIDLabelsWithBody_Call {
	return &ClientInterface_PostNotificationEndpointIDLabelsWithBody_Call{Call: _e.mock.On("PostNotificationEndpointIDLabelsWithBody", ctx, endpointID, params, contentType, body)}
}

func (_c *ClientInterface_PostNotificationEndpointIDLabelsWithBody_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PostNotificationEndpointIDLabelsParams, contentType string, body io.Reader)) *ClientInterface_PostNotificationEndpointIDLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostNotificationEndpointIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostNotificationEndpointIDLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostNotificationEndpointIDLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostNotificationRuleIDLabels provides a mock function with given fields: ctx, ruleID, params, body
func (_m *ClientInterface) PostNotificationRuleIDLabels(ctx context.Context, ruleID string, params *domain.PostNotificationRuleIDLabelsParams, body domain.PostNotificationRuleIDLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostNotificationRuleIDLabelsParams, domain.PostNotificationRuleIDLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, ruleID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostNotificationRuleIDLabelsParams, domain.PostNotificationRuleIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, ruleID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostNotificationRuleIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostNotificationRuleIDLabels'
type ClientInterface_PostNotificationRuleIDLabels_Call struct {
	*mock.Call
}

// PostNotificationRuleIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PostNotificationRuleIDLabelsParams
//  - body domain.PostNotificationRuleIDLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostNotificationRuleIDLabels(ctx interface{}, ruleID interface{}, params interface{}, body interface{}) *ClientInterface_PostNotificationRuleIDLabels_Call {
	return &ClientInterface_PostNotificationRuleIDLabels_Call{Call: _e.mock.On("PostNotificationRuleIDLabels", ctx, ruleID, params, body)}
}

func (_c *ClientInterface_PostNotificationRuleIDLabels_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PostNotificationRuleIDLabelsParams, body domain.PostNotificationRuleIDLabelsJSONRequestBody)) *ClientInterface_PostNotificationRuleIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostNotificationRuleIDLabelsParams), args[3].(domain.PostNotificationRuleIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostNotificationRuleIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostNotificationRuleIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostNotificationRuleIDLabelsWithBody provides a mock function with given fields: ctx, ruleID, params, contentType, body
func (_m *ClientInterface) PostNotificationRuleIDLabelsWithBody(ctx context.Context, ruleID string, params *domain.PostNotificationRuleIDLabelsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostNotificationRuleIDLabelsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, ruleID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostNotificationRuleIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, ruleID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostNotificationRuleIDLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostNotificationRuleIDLabelsWithBody'
type ClientInterface_PostNotificationRuleIDLabelsWithBody_Call struct {
	*mock.Call
}

// PostNotificationRuleIDLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PostNotificationRuleIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostNotificationRuleIDLabelsWithBody(ctx interface{}, ruleID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostNotificationRuleIDLabelsWithBody_Call {
	return &ClientInterface_PostNotificationRuleIDLabelsWithBody_Call{Call: _e.mock.On("PostNotificationRuleIDLabelsWithBody", ctx, ruleID, params, contentType, body)}
}

func (_c *ClientInterface_PostNotificationRuleIDLabelsWithBody_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PostNotificationRuleIDLabelsParams, contentType string, body io.Reader)) *ClientInterface_PostNotificationRuleIDLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostNotificationRuleIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostNotificationRuleIDLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostNotificationRuleIDLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgs provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostOrgs(ctx context.Context, params *domain.PostOrgsParams, body domain.PostOrgsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostOrgsParams, domain.PostOrgsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostOrgsParams, domain.PostOrgsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostOrgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgs'
type ClientInterface_PostOrgs_Call struct {
	*mock.Call
}

// PostOrgs is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostOrgsParams
//  - body domain.PostOrgsJSONRequestBody
func (_e *ClientInterface_Expecter) PostOrgs(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostOrgs_Call {
	return &ClientInterface_PostOrgs_Call{Call: _e.mock.On("PostOrgs", ctx, params, body)}
}

func (_c *ClientInterface_PostOrgs_Call) Run(run func(ctx context.Context, params *domain.PostOrgsParams, body domain.PostOrgsJSONRequestBody)) *ClientInterface_PostOrgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostOrgsParams), args[2].(domain.PostOrgsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostOrgs_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostOrgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDMembers provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientInterface) PostOrgsIDMembers(ctx context.Context, orgID string, params *domain.PostOrgsIDMembersParams, body domain.PostOrgsIDMembersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDMembersParams, domain.PostOrgsIDMembersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDMembersParams, domain.PostOrgsIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostOrgsIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDMembers'
type ClientInterface_PostOrgsIDMembers_Call struct {
	*mock.Call
}

// PostOrgsIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDMembersParams
//  - body domain.PostOrgsIDMembersJSONRequestBody
func (_e *ClientInterface_Expecter) PostOrgsIDMembers(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientInterface_PostOrgsIDMembers_Call {
	return &ClientInterface_PostOrgsIDMembers_Call{Call: _e.mock.On("PostOrgsIDMembers", ctx, orgID, params, body)}
}

func (_c *ClientInterface_PostOrgsIDMembers_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDMembersParams, body domain.PostOrgsIDMembersJSONRequestBody)) *ClientInterface_PostOrgsIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDMembersParams), args[3].(domain.PostOrgsIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostOrgsIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostOrgsIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDMembersWithBody provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientInterface) PostOrgsIDMembersWithBody(ctx context.Context, orgID string, params *domain.PostOrgsIDMembersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDMembersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostOrgsIDMembersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDMembersWithBody'
type ClientInterface_PostOrgsIDMembersWithBody_Call struct {
	*mock.Call
}

// PostOrgsIDMembersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostOrgsIDMembersWithBody(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostOrgsIDMembersWithBody_Call {
	return &ClientInterface_PostOrgsIDMembersWithBody_Call{Call: _e.mock.On("PostOrgsIDMembersWithBody", ctx, orgID, params, contentType, body)}
}

func (_c *ClientInterface_PostOrgsIDMembersWithBody_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDMembersParams, contentType string, body io.Reader)) *ClientInterface_PostOrgsIDMembersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostOrgsIDMembersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostOrgsIDMembersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDOwners provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientInterface) PostOrgsIDOwners(ctx context.Context, orgID string, params *domain.PostOrgsIDOwnersParams, body domain.PostOrgsIDOwnersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDOwnersParams, domain.PostOrgsIDOwnersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDOwnersParams, domain.PostOrgsIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostOrgsIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDOwners'
type ClientInterface_PostOrgsIDOwners_Call struct {
	*mock.Call
}

// PostOrgsIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDOwnersParams
//  - body domain.PostOrgsIDOwnersJSONRequestBody
func (_e *ClientInterface_Expecter) PostOrgsIDOwners(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientInterface_PostOrgsIDOwners_Call {
	return &ClientInterface_PostOrgsIDOwners_Call{Call: _e.mock.On("PostOrgsIDOwners", ctx, orgID, params, body)}
}

func (_c *ClientInterface_PostOrgsIDOwners_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDOwnersParams, body domain.PostOrgsIDOwnersJSONRequestBody)) *ClientInterface_PostOrgsIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDOwnersParams), args[3].(domain.PostOrgsIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostOrgsIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostOrgsIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDOwnersWithBody provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientInterface) PostOrgsIDOwnersWithBody(ctx context.Context, orgID string, params *domain.PostOrgsIDOwnersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDOwnersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostOrgsIDOwnersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDOwnersWithBody'
type ClientInterface_PostOrgsIDOwnersWithBody_Call struct {
	*mock.Call
}

// PostOrgsIDOwnersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostOrgsIDOwnersWithBody(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostOrgsIDOwnersWithBody_Call {
	return &ClientInterface_PostOrgsIDOwnersWithBody_Call{Call: _e.mock.On("PostOrgsIDOwnersWithBody", ctx, orgID, params, contentType, body)}
}

func (_c *ClientInterface_PostOrgsIDOwnersWithBody_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDOwnersParams, contentType string, body io.Reader)) *ClientInterface_PostOrgsIDOwnersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostOrgsIDOwnersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostOrgsIDOwnersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDSecrets provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientInterface) PostOrgsIDSecrets(ctx context.Context, orgID string, params *domain.PostOrgsIDSecretsParams, body domain.PostOrgsIDSecretsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDSecretsParams, domain.PostOrgsIDSecretsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDSecretsParams, domain.PostOrgsIDSecretsJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostOrgsIDSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDSecrets'
type ClientInterface_PostOrgsIDSecrets_Call struct {
	*mock.Call
}

// PostOrgsIDSecrets is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDSecretsParams
//  - body domain.PostOrgsIDSecretsJSONRequestBody
func (_e *ClientInterface_Expecter) PostOrgsIDSecrets(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientInterface_PostOrgsIDSecrets_Call {
	return &ClientInterface_PostOrgsIDSecrets_Call{Call: _e.mock.On("PostOrgsIDSecrets", ctx, orgID, params, body)}
}

func (_c *ClientInterface_PostOrgsIDSecrets_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDSecretsParams, body domain.PostOrgsIDSecretsJSONRequestBody)) *ClientInterface_PostOrgsIDSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDSecretsParams), args[3].(domain.PostOrgsIDSecretsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostOrgsIDSecrets_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostOrgsIDSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDSecretsWithBody provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientInterface) PostOrgsIDSecretsWithBody(ctx context.Context, orgID string, params *domain.PostOrgsIDSecretsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDSecretsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDSecretsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostOrgsIDSecretsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDSecretsWithBody'
type ClientInterface_PostOrgsIDSecretsWithBody_Call struct {
	*mock.Call
}

// PostOrgsIDSecretsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDSecretsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostOrgsIDSecretsWithBody(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostOrgsIDSecretsWithBody_Call {
	return &ClientInterface_PostOrgsIDSecretsWithBody_Call{Call: _e.mock.On("PostOrgsIDSecretsWithBody", ctx, orgID, params, contentType, body)}
}

func (_c *ClientInterface_PostOrgsIDSecretsWithBody_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDSecretsParams, contentType string, body io.Reader)) *ClientInterface_PostOrgsIDSecretsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDSecretsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostOrgsIDSecretsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostOrgsIDSecretsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostOrgsWithBody(ctx context.Context, params *domain.PostOrgsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostOrgsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostOrgsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostOrgsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsWithBody'
type ClientInterface_PostOrgsWithBody_Call struct {
	*mock.Call
}

// PostOrgsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostOrgsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostOrgsWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostOrgsWithBody_Call {
	return &ClientInterface_PostOrgsWithBody_Call{Call: _e.mock.On("PostOrgsWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostOrgsWithBody_Call) Run(run func(ctx context.Context, params *domain.PostOrgsParams, contentType string, body io.Reader)) *ClientInterface_PostOrgsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostOrgsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostOrgsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostOrgsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQuery provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostQuery(ctx context.Context, params *domain.PostQueryParams, body domain.PostQueryJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryParams, domain.PostQueryJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryParams, domain.PostQueryJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQuery'
type ClientInterface_PostQuery_Call struct {
	*mock.Call
}

// PostQuery is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryParams
//  - body domain.PostQueryJSONRequestBody
func (_e *ClientInterface_Expecter) PostQuery(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostQuery_Call {
	return &ClientInterface_PostQuery_Call{Call: _e.mock.On("PostQuery", ctx, params, body)}
}

func (_c *ClientInterface_PostQuery_Call) Run(run func(ctx context.Context, params *domain.PostQueryParams, body domain.PostQueryJSONRequestBody)) *ClientInterface_PostQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryParams), args[2].(domain.PostQueryJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostQuery_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryAnalyze provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostQueryAnalyze(ctx context.Context, params *domain.PostQueryAnalyzeParams, body domain.PostQueryAnalyzeJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryAnalyzeParams, domain.PostQueryAnalyzeJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryAnalyzeParams, domain.PostQueryAnalyzeJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostQueryAnalyze_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryAnalyze'
type ClientInterface_PostQueryAnalyze_Call struct {
	*mock.Call
}

// PostQueryAnalyze is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryAnalyzeParams
//  - body domain.PostQueryAnalyzeJSONRequestBody
func (_e *ClientInterface_Expecter) PostQueryAnalyze(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostQueryAnalyze_Call {
	return &ClientInterface_PostQueryAnalyze_Call{Call: _e.mock.On("PostQueryAnalyze", ctx, params, body)}
}

func (_c *ClientInterface_PostQueryAnalyze_Call) Run(run func(ctx context.Context, params *domain.PostQueryAnalyzeParams, body domain.PostQueryAnalyzeJSONRequestBody)) *ClientInterface_PostQueryAnalyze_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryAnalyzeParams), args[2].(domain.PostQueryAnalyzeJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostQueryAnalyze_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostQueryAnalyze_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryAnalyzeWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostQueryAnalyzeWithBody(ctx context.Context, params *domain.PostQueryAnalyzeParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryAnalyzeParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryAnalyzeParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostQueryAnalyzeWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryAnalyzeWithBody'
type ClientInterface_PostQueryAnalyzeWithBody_Call struct {
	*mock.Call
}

// PostQueryAnalyzeWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryAnalyzeParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostQueryAnalyzeWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostQueryAnalyzeWithBody_Call {
	return &ClientInterface_PostQueryAnalyzeWithBody_Call{Call: _e.mock.On("PostQueryAnalyzeWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostQueryAnalyzeWithBody_Call) Run(run func(ctx context.Context, params *domain.PostQueryAnalyzeParams, contentType string, body io.Reader)) *ClientInterface_PostQueryAnalyzeWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryAnalyzeParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostQueryAnalyzeWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostQueryAnalyzeWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryAst provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostQueryAst(ctx context.Context, params *domain.PostQueryAstParams, body domain.PostQueryAstJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryAstParams, domain.PostQueryAstJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryAstParams, domain.PostQueryAstJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostQueryAst_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryAst'
type ClientInterface_PostQueryAst_Call struct {
	*mock.Call
}

// PostQueryAst is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryAstParams
//  - body domain.PostQueryAstJSONRequestBody
func (_e *ClientInterface_Expecter) PostQueryAst(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostQueryAst_Call {
	return &ClientInterface_PostQueryAst_Call{Call: _e.mock.On("PostQueryAst", ctx, params, body)}
}

func (_c *ClientInterface_PostQueryAst_Call) Run(run func(ctx context.Context, params *domain.PostQueryAstParams, body domain.PostQueryAstJSONRequestBody)) *ClientInterface_PostQueryAst_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryAstParams), args[2].(domain.PostQueryAstJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostQueryAst_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostQueryAst_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryAstWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostQueryAstWithBody(ctx context.Context, params *domain.PostQueryAstParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryAstParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryAstParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostQueryAstWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryAstWithBody'
type ClientInterface_PostQueryAstWithBody_Call struct {
	*mock.Call
}

// PostQueryAstWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryAstParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostQueryAstWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostQueryAstWithBody_Call {
	return &ClientInterface_PostQueryAstWithBody_Call{Call: _e.mock.On("PostQueryAstWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostQueryAstWithBody_Call) Run(run func(ctx context.Context, params *domain.PostQueryAstParams, contentType string, body io.Reader)) *ClientInterface_PostQueryAstWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryAstParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostQueryAstWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostQueryAstWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostQueryWithBody(ctx context.Context, params *domain.PostQueryParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostQueryWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryWithBody'
type ClientInterface_PostQueryWithBody_Call struct {
	*mock.Call
}

// PostQueryWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostQueryWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostQueryWithBody_Call {
	return &ClientInterface_PostQueryWithBody_Call{Call: _e.mock.On("PostQueryWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostQueryWithBody_Call) Run(run func(ctx context.Context, params *domain.PostQueryParams, contentType string, body io.Reader)) *ClientInterface_PostQueryWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostQueryWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostQueryWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRemoteConnection provides a mock function with given fields: ctx, body
func (_m *ClientInterface) PostRemoteConnection(ctx context.Context, body domain.PostRemoteConnectionJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, domain.PostRemoteConnectionJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.PostRemoteConnectionJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostRemoteConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRemoteConnection'
type ClientInterface_PostRemoteConnection_Call struct {
	*mock.Call
}

// PostRemoteConnection is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.PostRemoteConnectionJSONRequestBody
func (_e *ClientInterface_Expecter) PostRemoteConnection(ctx interface{}, body interface{}) *ClientInterface_PostRemoteConnection_Call {
	return &ClientInterface_PostRemoteConnection_Call{Call: _e.mock.On("PostRemoteConnection", ctx, body)}
}

func (_c *ClientInterface_PostRemoteConnection_Call) Run(run func(ctx context.Context, body domain.PostRemoteConnectionJSONRequestBody)) *ClientInterface_PostRemoteConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PostRemoteConnectionJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostRemoteConnection_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostRemoteConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRemoteConnectionWithBody provides a mock function with given fields: ctx, contentType, body
func (_m *ClientInterface) PostRemoteConnectionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostRemoteConnectionWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRemoteConnectionWithBody'
type ClientInterface_PostRemoteConnectionWithBody_Call struct {
	*mock.Call
}

// PostRemoteConnectionWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostRemoteConnectionWithBody(ctx interface{}, contentType interface{}, body interface{}) *ClientInterface_PostRemoteConnectionWithBody_Call {
	return &ClientInterface_PostRemoteConnectionWithBody_Call{Call: _e.mock.On("PostRemoteConnectionWithBody", ctx, contentType, body)}
}

func (_c *ClientInterface_PostRemoteConnectionWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientInterface_PostRemoteConnectionWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostRemoteConnectionWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostRemoteConnectionWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostReplication provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostReplication(ctx context.Context, params *domain.PostReplicationParams, body domain.PostReplicationJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostReplicationParams, domain.PostReplicationJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostReplicationParams, domain.PostReplicationJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReplication'
type ClientInterface_PostReplication_Call struct {
	*mock.Call
}

// PostReplication is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostReplicationParams
//  - body domain.PostReplicationJSONRequestBody
func (_e *ClientInterface_Expecter) PostReplication(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostReplication_Call {
	return &ClientInterface_PostReplication_Call{Call: _e.mock.On("PostReplication", ctx, params, body)}
}

func (_c *ClientInterface_PostReplication_Call) Run(run func(ctx context.Context, params *domain.PostReplicationParams, body domain.PostReplicationJSONRequestBody)) *ClientInterface_PostReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostReplicationParams), args[2].(domain.PostReplicationJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostReplication_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostReplication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostReplicationWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostReplicationWithBody(ctx context.Context, params *domain.PostReplicationParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostReplicationParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostReplicationParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostReplicationWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReplicationWithBody'
type ClientInterface_PostReplicationWithBody_Call struct {
	*mock.Call
}

// PostReplicationWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostReplicationParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostReplicationWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostReplicationWithBody_Call {
	return &ClientInterface_PostReplicationWithBody_Call{Call: _e.mock.On("PostReplicationWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostReplicationWithBody_Call) Run(run func(ctx context.Context, params *domain.PostReplicationParams, contentType string, body io.Reader)) *ClientInterface_PostReplicationWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostReplicationParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostReplicationWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostReplicationWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreBucketIDWithBody provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientInterface) PostRestoreBucketIDWithBody(ctx context.Context, bucketID string, params *domain.PostRestoreBucketIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostRestoreBucketIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostRestoreBucketIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostRestoreBucketIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreBucketIDWithBody'
type ClientInterface_PostRestoreBucketIDWithBody_Call struct {
	*mock.Call
}

// PostRestoreBucketIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostRestoreBucketIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostRestoreBucketIDWithBody(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostRestoreBucketIDWithBody_Call {
	return &ClientInterface_PostRestoreBucketIDWithBody_Call{Call: _e.mock.On("PostRestoreBucketIDWithBody", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientInterface_PostRestoreBucketIDWithBody_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostRestoreBucketIDParams, contentType string, body io.Reader)) *ClientInterface_PostRestoreBucketIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostRestoreBucketIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostRestoreBucketIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostRestoreBucketIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreBucketMetadata provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostRestoreBucketMetadata(ctx context.Context, params *domain.PostRestoreBucketMetadataParams, body domain.PostRestoreBucketMetadataJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostRestoreBucketMetadataParams, domain.PostRestoreBucketMetadataJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostRestoreBucketMetadataParams, domain.PostRestoreBucketMetadataJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostRestoreBucketMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreBucketMetadata'
type ClientInterface_PostRestoreBucketMetadata_Call struct {
	*mock.Call
}

// PostRestoreBucketMetadata is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostRestoreBucketMetadataParams
//  - body domain.PostRestoreBucketMetadataJSONRequestBody
func (_e *ClientInterface_Expecter) PostRestoreBucketMetadata(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostRestoreBucketMetadata_Call {
	return &ClientInterface_PostRestoreBucketMetadata_Call{Call: _e.mock.On("PostRestoreBucketMetadata", ctx, params, body)}
}

func (_c *ClientInterface_PostRestoreBucketMetadata_Call) Run(run func(ctx context.Context, params *domain.PostRestoreBucketMetadataParams, body domain.PostRestoreBucketMetadataJSONRequestBody)) *ClientInterface_PostRestoreBucketMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostRestoreBucketMetadataParams), args[2].(domain.PostRestoreBucketMetadataJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostRestoreBucketMetadata_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostRestoreBucketMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreBucketMetadataWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostRestoreBucketMetadataWithBody(ctx context.Context, params *domain.PostRestoreBucketMetadataParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostRestoreBucketMetadataParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostRestoreBucketMetadataParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostRestoreBucketMetadataWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreBucketMetadataWithBody'
type ClientInterface_PostRestoreBucketMetadataWithBody_Call struct {
	*mock.Call
}

// PostRestoreBucketMetadataWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostRestoreBucketMetadataParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostRestoreBucketMetadataWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostRestoreBucketMetadataWithBody_Call {
	return &ClientInterface_PostRestoreBucketMetadataWithBody_Call{Call: _e.mock.On("PostRestoreBucketMetadataWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostRestoreBucketMetadataWithBody_Call) Run(run func(ctx context.Context, params *domain.PostRestoreBucketMetadataParams, contentType string, body io.Reader)) *ClientInterface_PostRestoreBucketMetadataWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostRestoreBucketMetadataParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostRestoreBucketMetadataWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostRestoreBucketMetadataWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreKVWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostRestoreKVWithBody(ctx context.Context, params *domain.PostRestoreKVParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostRestoreKVParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostRestoreKVParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostRestoreKVWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreKVWithBody'
type ClientInterface_PostRestoreKVWithBody_Call struct {
	*mock.Call
}

// PostRestoreKVWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostRestoreKVParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostRestoreKVWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostRestoreKVWithBody_Call {
	return &ClientInterface_PostRestoreKVWithBody_Call{Call: _e.mock.On("PostRestoreKVWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostRestoreKVWithBody_Call) Run(run func(ctx context.Context, params *domain.PostRestoreKVParams, contentType string, body io.Reader)) *ClientInterface_PostRestoreKVWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostRestoreKVParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostRestoreKVWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostRestoreKVWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreSQLWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostRestoreSQLWithBody(ctx context.Context, params *domain.PostRestoreSQLParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostRestoreSQLParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostRestoreSQLParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostRestoreSQLWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreSQLWithBody'
type ClientInterface_PostRestoreSQLWithBody_Call struct {
	*mock.Call
}

// PostRestoreSQLWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostRestoreSQLParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostRestoreSQLWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostRestoreSQLWithBody_Call {
	return &ClientInterface_PostRestoreSQLWithBody_Call{Call: _e.mock.On("PostRestoreSQLWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostRestoreSQLWithBody_Call) Run(run func(ctx context.Context, params *domain.PostRestoreSQLParams, contentType string, body io.Reader)) *ClientInterface_PostRestoreSQLWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostRestoreSQLParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostRestoreSQLWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostRestoreSQLWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreShardIdWithBody provides a mock function with given fields: ctx, shardID, params, contentType, body
func (_m *ClientInterface) PostRestoreShardIdWithBody(ctx context.Context, shardID string, params *domain.PostRestoreShardIdParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, shardID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostRestoreShardIdParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, shardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostRestoreShardIdParams, string, io.Reader) error); ok {
		r1 = rf(ctx, shardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostRestoreShardIdWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreShardIdWithBody'
type ClientInterface_PostRestoreShardIdWithBody_Call struct {
	*mock.Call
}

// PostRestoreShardIdWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - shardID string
//  - params *domain.PostRestoreShardIdParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostRestoreShardIdWithBody(ctx interface{}, shardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostRestoreShardIdWithBody_Call {
	return &ClientInterface_PostRestoreShardIdWithBody_Call{Call: _e.mock.On("PostRestoreShardIdWithBody", ctx, shardID, params, contentType, body)}
}

func (_c *ClientInterface_PostRestoreShardIdWithBody_Call) Run(run func(ctx context.Context, shardID string, params *domain.PostRestoreShardIdParams, contentType string, body io.Reader)) *ClientInterface_PostRestoreShardIdWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostRestoreShardIdParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostRestoreShardIdWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostRestoreShardIdWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapers provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostScrapers(ctx context.Context, params *domain.PostScrapersParams, body domain.PostScrapersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostScrapersParams, domain.PostScrapersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostScrapersParams, domain.PostScrapersJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostScrapers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapers'
type ClientInterface_PostScrapers_Call struct {
	*mock.Call
}

// PostScrapers is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostScrapersParams
//  - body domain.PostScrapersJSONRequestBody
func (_e *ClientInterface_Expecter) PostScrapers(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostScrapers_Call {
	return &ClientInterface_PostScrapers_Call{Call: _e.mock.On("PostScrapers", ctx, params, body)}
}

func (_c *ClientInterface_PostScrapers_Call) Run(run func(ctx context.Context, params *domain.PostScrapersParams, body domain.PostScrapersJSONRequestBody)) *ClientInterface_PostScrapers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostScrapersParams), args[2].(domain.PostScrapersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostScrapers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostScrapers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDLabels provides a mock function with given fields: ctx, scraperTargetID, params, body
func (_m *ClientInterface) PostScrapersIDLabels(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDLabelsParams, body domain.PostScrapersIDLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDLabelsParams, domain.PostScrapersIDLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDLabelsParams, domain.PostScrapersIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, scraperTargetID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostScrapersIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDLabels'
type ClientInterface_PostScrapersIDLabels_Call struct {
	*mock.Call
}

// PostScrapersIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDLabelsParams
//  - body domain.PostScrapersIDLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostScrapersIDLabels(ctx interface{}, scraperTargetID interface{}, params interface{}, body interface{}) *ClientInterface_PostScrapersIDLabels_Call {
	return &ClientInterface_PostScrapersIDLabels_Call{Call: _e.mock.On("PostScrapersIDLabels", ctx, scraperTargetID, params, body)}
}

func (_c *ClientInterface_PostScrapersIDLabels_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDLabelsParams, body domain.PostScrapersIDLabelsJSONRequestBody)) *ClientInterface_PostScrapersIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDLabelsParams), args[3].(domain.PostScrapersIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostScrapersIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostScrapersIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDLabelsWithBody provides a mock function with given fields: ctx, scraperTargetID, params, contentType, body
func (_m *ClientInterface) PostScrapersIDLabelsWithBody(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDLabelsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDLabelsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostScrapersIDLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDLabelsWithBody'
type ClientInterface_PostScrapersIDLabelsWithBody_Call struct {
	*mock.Call
}

// PostScrapersIDLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostScrapersIDLabelsWithBody(ctx interface{}, scraperTargetID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostScrapersIDLabelsWithBody_Call {
	return &ClientInterface_PostScrapersIDLabelsWithBody_Call{Call: _e.mock.On("PostScrapersIDLabelsWithBody", ctx, scraperTargetID, params, contentType, body)}
}

func (_c *ClientInterface_PostScrapersIDLabelsWithBody_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDLabelsParams, contentType string, body io.Reader)) *ClientInterface_PostScrapersIDLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostScrapersIDLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostScrapersIDLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDMembers provides a mock function with given fields: ctx, scraperTargetID, params, body
func (_m *ClientInterface) PostScrapersIDMembers(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDMembersParams, body domain.PostScrapersIDMembersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDMembersParams, domain.PostScrapersIDMembersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDMembersParams, domain.PostScrapersIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, scraperTargetID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostScrapersIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDMembers'
type ClientInterface_PostScrapersIDMembers_Call struct {
	*mock.Call
}

// PostScrapersIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDMembersParams
//  - body domain.PostScrapersIDMembersJSONRequestBody
func (_e *ClientInterface_Expecter) PostScrapersIDMembers(ctx interface{}, scraperTargetID interface{}, params interface{}, body interface{}) *ClientInterface_PostScrapersIDMembers_Call {
	return &ClientInterface_PostScrapersIDMembers_Call{Call: _e.mock.On("PostScrapersIDMembers", ctx, scraperTargetID, params, body)}
}

func (_c *ClientInterface_PostScrapersIDMembers_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDMembersParams, body domain.PostScrapersIDMembersJSONRequestBody)) *ClientInterface_PostScrapersIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDMembersParams), args[3].(domain.PostScrapersIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostScrapersIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostScrapersIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDMembersWithBody provides a mock function with given fields: ctx, scraperTargetID, params, contentType, body
func (_m *ClientInterface) PostScrapersIDMembersWithBody(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDMembersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDMembersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostScrapersIDMembersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDMembersWithBody'
type ClientInterface_PostScrapersIDMembersWithBody_Call struct {
	*mock.Call
}

// PostScrapersIDMembersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostScrapersIDMembersWithBody(ctx interface{}, scraperTargetID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostScrapersIDMembersWithBody_Call {
	return &ClientInterface_PostScrapersIDMembersWithBody_Call{Call: _e.mock.On("PostScrapersIDMembersWithBody", ctx, scraperTargetID, params, contentType, body)}
}

func (_c *ClientInterface_PostScrapersIDMembersWithBody_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDMembersParams, contentType string, body io.Reader)) *ClientInterface_PostScrapersIDMembersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostScrapersIDMembersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostScrapersIDMembersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDOwners provides a mock function with given fields: ctx, scraperTargetID, params, body
func (_m *ClientInterface) PostScrapersIDOwners(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDOwnersParams, body domain.PostScrapersIDOwnersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDOwnersParams, domain.PostScrapersIDOwnersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDOwnersParams, domain.PostScrapersIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, scraperTargetID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostScrapersIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDOwners'
type ClientInterface_PostScrapersIDOwners_Call struct {
	*mock.Call
}

// PostScrapersIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDOwnersParams
//  - body domain.PostScrapersIDOwnersJSONRequestBody
func (_e *ClientInterface_Expecter) PostScrapersIDOwners(ctx interface{}, scraperTargetID interface{}, params interface{}, body interface{}) *ClientInterface_PostScrapersIDOwners_Call {
	return &ClientInterface_PostScrapersIDOwners_Call{Call: _e.mock.On("PostScrapersIDOwners", ctx, scraperTargetID, params, body)}
}

func (_c *ClientInterface_PostScrapersIDOwners_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDOwnersParams, body domain.PostScrapersIDOwnersJSONRequestBody)) *ClientInterface_PostScrapersIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDOwnersParams), args[3].(domain.PostScrapersIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostScrapersIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostScrapersIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDOwnersWithBody provides a mock function with given fields: ctx, scraperTargetID, params, contentType, body
func (_m *ClientInterface) PostScrapersIDOwnersWithBody(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDOwnersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, scraperTargetID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDOwnersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostScrapersIDOwnersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDOwnersWithBody'
type ClientInterface_PostScrapersIDOwnersWithBody_Call struct {
	*mock.Call
}

// PostScrapersIDOwnersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostScrapersIDOwnersWithBody(ctx interface{}, scraperTargetID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostScrapersIDOwnersWithBody_Call {
	return &ClientInterface_PostScrapersIDOwnersWithBody_Call{Call: _e.mock.On("PostScrapersIDOwnersWithBody", ctx, scraperTargetID, params, contentType, body)}
}

func (_c *ClientInterface_PostScrapersIDOwnersWithBody_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDOwnersParams, contentType string, body io.Reader)) *ClientInterface_PostScrapersIDOwnersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostScrapersIDOwnersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostScrapersIDOwnersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostScrapersWithBody(ctx context.Context, params *domain.PostScrapersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostScrapersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostScrapersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostScrapersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersWithBody'
type ClientInterface_PostScrapersWithBody_Call struct {
	*mock.Call
}

// PostScrapersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostScrapersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostScrapersWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostScrapersWithBody_Call {
	return &ClientInterface_PostScrapersWithBody_Call{Call: _e.mock.On("PostScrapersWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostScrapersWithBody_Call) Run(run func(ctx context.Context, params *domain.PostScrapersParams, contentType string, body io.Reader)) *ClientInterface_PostScrapersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostScrapersParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostScrapersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostScrapersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSetup provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostSetup(ctx context.Context, params *domain.PostSetupParams, body domain.PostSetupJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSetupParams, domain.PostSetupJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSetupParams, domain.PostSetupJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostSetup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSetup'
type ClientInterface_PostSetup_Call struct {
	*mock.Call
}

// PostSetup is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSetupParams
//  - body domain.PostSetupJSONRequestBody
func (_e *ClientInterface_Expecter) PostSetup(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostSetup_Call {
	return &ClientInterface_PostSetup_Call{Call: _e.mock.On("PostSetup", ctx, params, body)}
}

func (_c *ClientInterface_PostSetup_Call) Run(run func(ctx context.Context, params *domain.PostSetupParams, body domain.PostSetupJSONRequestBody)) *ClientInterface_PostSetup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSetupParams), args[2].(domain.PostSetupJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostSetup_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostSetup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSetupWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostSetupWithBody(ctx context.Context, params *domain.PostSetupParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSetupParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSetupParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostSetupWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSetupWithBody'
type ClientInterface_PostSetupWithBody_Call struct {
	*mock.Call
}

// PostSetupWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSetupParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostSetupWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostSetupWithBody_Call {
	return &ClientInterface_PostSetupWithBody_Call{Call: _e.mock.On("PostSetupWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostSetupWithBody_Call) Run(run func(ctx context.Context, params *domain.PostSetupParams, contentType string, body io.Reader)) *ClientInterface_PostSetupWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSetupParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostSetupWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostSetupWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSignin provides a mock function with given fields: ctx, params
func (_m *ClientInterface) PostSignin(ctx context.Context, params *domain.PostSigninParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSigninParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSigninParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostSignin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSignin'
type ClientInterface_PostSignin_Call struct {
	*mock.Call
}

// PostSignin is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSigninParams
func (_e *ClientInterface_Expecter) PostSignin(ctx interface{}, params interface{}) *ClientInterface_PostSignin_Call {
	return &ClientInterface_PostSignin_Call{Call: _e.mock.On("PostSignin", ctx, params)}
}

func (_c *ClientInterface_PostSignin_Call) Run(run func(ctx context.Context, params *domain.PostSigninParams)) *ClientInterface_PostSignin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSigninParams))
	})
	return _c
}

func (_c *ClientInterface_PostSignin_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostSignin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSignout provides a mock function with given fields: ctx, params
func (_m *ClientInterface) PostSignout(ctx context.Context, params *domain.PostSignoutParams) (*http.Response, error) {
	ret := _m.Called(ctx, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSignoutParams) *http.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSignoutParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostSignout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSignout'
type ClientInterface_PostSignout_Call struct {
	*mock.Call
}

// PostSignout is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSignoutParams
func (_e *ClientInterface_Expecter) PostSignout(ctx interface{}, params interface{}) *ClientInterface_PostSignout_Call {
	return &ClientInterface_PostSignout_Call{Call: _e.mock.On("PostSignout", ctx, params)}
}

func (_c *ClientInterface_PostSignout_Call) Run(run func(ctx context.Context, params *domain.PostSignoutParams)) *ClientInterface_PostSignout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSignoutParams))
	})
	return _c
}

func (_c *ClientInterface_PostSignout_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostSignout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSources provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostSources(ctx context.Context, params *domain.PostSourcesParams, body domain.PostSourcesJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSourcesParams, domain.PostSourcesJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSourcesParams, domain.PostSourcesJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSources'
type ClientInterface_PostSources_Call struct {
	*mock.Call
}

// PostSources is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSourcesParams
//  - body domain.PostSourcesJSONRequestBody
func (_e *ClientInterface_Expecter) PostSources(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostSources_Call {
	return &ClientInterface_PostSources_Call{Call: _e.mock.On("PostSources", ctx, params, body)}
}

func (_c *ClientInterface_PostSources_Call) Run(run func(ctx context.Context, params *domain.PostSourcesParams, body domain.PostSourcesJSONRequestBody)) *ClientInterface_PostSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSourcesParams), args[2].(domain.PostSourcesJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostSources_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostSources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSourcesWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostSourcesWithBody(ctx context.Context, params *domain.PostSourcesParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSourcesParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSourcesParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostSourcesWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSourcesWithBody'
type ClientInterface_PostSourcesWithBody_Call struct {
	*mock.Call
}

// PostSourcesWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSourcesParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostSourcesWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostSourcesWithBody_Call {
	return &ClientInterface_PostSourcesWithBody_Call{Call: _e.mock.On("PostSourcesWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostSourcesWithBody_Call) Run(run func(ctx context.Context, params *domain.PostSourcesParams, contentType string, body io.Reader)) *ClientInterface_PostSourcesWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSourcesParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostSourcesWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostSourcesWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasks provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostTasks(ctx context.Context, params *domain.PostTasksParams, body domain.PostTasksJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostTasksParams, domain.PostTasksJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostTasksParams, domain.PostTasksJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasks'
type ClientInterface_PostTasks_Call struct {
	*mock.Call
}

// PostTasks is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostTasksParams
//  - body domain.PostTasksJSONRequestBody
func (_e *ClientInterface_Expecter) PostTasks(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostTasks_Call {
	return &ClientInterface_PostTasks_Call{Call: _e.mock.On("PostTasks", ctx, params, body)}
}

func (_c *ClientInterface_PostTasks_Call) Run(run func(ctx context.Context, params *domain.PostTasksParams, body domain.PostTasksJSONRequestBody)) *ClientInterface_PostTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostTasksParams), args[2].(domain.PostTasksJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostTasks_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDLabels provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientInterface) PostTasksIDLabels(ctx context.Context, taskID string, params *domain.PostTasksIDLabelsParams, body domain.PostTasksIDLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDLabelsParams, domain.PostTasksIDLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDLabelsParams, domain.PostTasksIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDLabels'
type ClientInterface_PostTasksIDLabels_Call struct {
	*mock.Call
}

// PostTasksIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDLabelsParams
//  - body domain.PostTasksIDLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostTasksIDLabels(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientInterface_PostTasksIDLabels_Call {
	return &ClientInterface_PostTasksIDLabels_Call{Call: _e.mock.On("PostTasksIDLabels", ctx, taskID, params, body)}
}

func (_c *ClientInterface_PostTasksIDLabels_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDLabelsParams, body domain.PostTasksIDLabelsJSONRequestBody)) *ClientInterface_PostTasksIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDLabelsParams), args[3].(domain.PostTasksIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostTasksIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDLabelsWithBody provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientInterface) PostTasksIDLabelsWithBody(ctx context.Context, taskID string, params *domain.PostTasksIDLabelsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDLabelsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksIDLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDLabelsWithBody'
type ClientInterface_PostTasksIDLabelsWithBody_Call struct {
	*mock.Call
}

// PostTasksIDLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTasksIDLabelsWithBody(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTasksIDLabelsWithBody_Call {
	return &ClientInterface_PostTasksIDLabelsWithBody_Call{Call: _e.mock.On("PostTasksIDLabelsWithBody", ctx, taskID, params, contentType, body)}
}

func (_c *ClientInterface_PostTasksIDLabelsWithBody_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDLabelsParams, contentType string, body io.Reader)) *ClientInterface_PostTasksIDLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTasksIDLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksIDLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDMembers provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientInterface) PostTasksIDMembers(ctx context.Context, taskID string, params *domain.PostTasksIDMembersParams, body domain.PostTasksIDMembersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDMembersParams, domain.PostTasksIDMembersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDMembersParams, domain.PostTasksIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDMembers'
type ClientInterface_PostTasksIDMembers_Call struct {
	*mock.Call
}

// PostTasksIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDMembersParams
//  - body domain.PostTasksIDMembersJSONRequestBody
func (_e *ClientInterface_Expecter) PostTasksIDMembers(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientInterface_PostTasksIDMembers_Call {
	return &ClientInterface_PostTasksIDMembers_Call{Call: _e.mock.On("PostTasksIDMembers", ctx, taskID, params, body)}
}

func (_c *ClientInterface_PostTasksIDMembers_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDMembersParams, body domain.PostTasksIDMembersJSONRequestBody)) *ClientInterface_PostTasksIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDMembersParams), args[3].(domain.PostTasksIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostTasksIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDMembersWithBody provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientInterface) PostTasksIDMembersWithBody(ctx context.Context, taskID string, params *domain.PostTasksIDMembersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDMembersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksIDMembersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDMembersWithBody'
type ClientInterface_PostTasksIDMembersWithBody_Call struct {
	*mock.Call
}

// PostTasksIDMembersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTasksIDMembersWithBody(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTasksIDMembersWithBody_Call {
	return &ClientInterface_PostTasksIDMembersWithBody_Call{Call: _e.mock.On("PostTasksIDMembersWithBody", ctx, taskID, params, contentType, body)}
}

func (_c *ClientInterface_PostTasksIDMembersWithBody_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDMembersParams, contentType string, body io.Reader)) *ClientInterface_PostTasksIDMembersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTasksIDMembersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksIDMembersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDOwners provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientInterface) PostTasksIDOwners(ctx context.Context, taskID string, params *domain.PostTasksIDOwnersParams, body domain.PostTasksIDOwnersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDOwnersParams, domain.PostTasksIDOwnersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDOwnersParams, domain.PostTasksIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDOwners'
type ClientInterface_PostTasksIDOwners_Call struct {
	*mock.Call
}

// PostTasksIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDOwnersParams
//  - body domain.PostTasksIDOwnersJSONRequestBody
func (_e *ClientInterface_Expecter) PostTasksIDOwners(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientInterface_PostTasksIDOwners_Call {
	return &ClientInterface_PostTasksIDOwners_Call{Call: _e.mock.On("PostTasksIDOwners", ctx, taskID, params, body)}
}

func (_c *ClientInterface_PostTasksIDOwners_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDOwnersParams, body domain.PostTasksIDOwnersJSONRequestBody)) *ClientInterface_PostTasksIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDOwnersParams), args[3].(domain.PostTasksIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostTasksIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDOwnersWithBody provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientInterface) PostTasksIDOwnersWithBody(ctx context.Context, taskID string, params *domain.PostTasksIDOwnersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDOwnersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksIDOwnersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDOwnersWithBody'
type ClientInterface_PostTasksIDOwnersWithBody_Call struct {
	*mock.Call
}

// PostTasksIDOwnersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTasksIDOwnersWithBody(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTasksIDOwnersWithBody_Call {
	return &ClientInterface_PostTasksIDOwnersWithBody_Call{Call: _e.mock.On("PostTasksIDOwnersWithBody", ctx, taskID, params, contentType, body)}
}

func (_c *ClientInterface_PostTasksIDOwnersWithBody_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDOwnersParams, contentType string, body io.Reader)) *ClientInterface_PostTasksIDOwnersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTasksIDOwnersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksIDOwnersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDRuns provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientInterface) PostTasksIDRuns(ctx context.Context, taskID string, params *domain.PostTasksIDRunsParams, body domain.PostTasksIDRunsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDRunsParams, domain.PostTasksIDRunsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDRunsParams, domain.PostTasksIDRunsJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksIDRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDRuns'
type ClientInterface_PostTasksIDRuns_Call struct {
	*mock.Call
}

// PostTasksIDRuns is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDRunsParams
//  - body domain.PostTasksIDRunsJSONRequestBody
func (_e *ClientInterface_Expecter) PostTasksIDRuns(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientInterface_PostTasksIDRuns_Call {
	return &ClientInterface_PostTasksIDRuns_Call{Call: _e.mock.On("PostTasksIDRuns", ctx, taskID, params, body)}
}

func (_c *ClientInterface_PostTasksIDRuns_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDRunsParams, body domain.PostTasksIDRunsJSONRequestBody)) *ClientInterface_PostTasksIDRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDRunsParams), args[3].(domain.PostTasksIDRunsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostTasksIDRuns_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksIDRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDRunsIDRetryWithBody provides a mock function with given fields: ctx, taskID, runID, params, contentType, body
func (_m *ClientInterface) PostTasksIDRunsIDRetryWithBody(ctx context.Context, taskID string, runID string, params *domain.PostTasksIDRunsIDRetryParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, runID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PostTasksIDRunsIDRetryParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, taskID, runID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PostTasksIDRunsIDRetryParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, runID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksIDRunsIDRetryWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDRunsIDRetryWithBody'
type ClientInterface_PostTasksIDRunsIDRetryWithBody_Call struct {
	*mock.Call
}

// PostTasksIDRunsIDRetryWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
//  - params *domain.PostTasksIDRunsIDRetryParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTasksIDRunsIDRetryWithBody(ctx interface{}, taskID interface{}, runID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTasksIDRunsIDRetryWithBody_Call {
	return &ClientInterface_PostTasksIDRunsIDRetryWithBody_Call{Call: _e.mock.On("PostTasksIDRunsIDRetryWithBody", ctx, taskID, runID, params, contentType, body)}
}

func (_c *ClientInterface_PostTasksIDRunsIDRetryWithBody_Call) Run(run func(ctx context.Context, taskID string, runID string, params *domain.PostTasksIDRunsIDRetryParams, contentType string, body io.Reader)) *ClientInterface_PostTasksIDRunsIDRetryWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PostTasksIDRunsIDRetryParams), args[4].(string), args[5].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTasksIDRunsIDRetryWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksIDRunsIDRetryWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDRunsWithBody provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientInterface) PostTasksIDRunsWithBody(ctx context.Context, taskID string, params *domain.PostTasksIDRunsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDRunsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDRunsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksIDRunsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDRunsWithBody'
type ClientInterface_PostTasksIDRunsWithBody_Call struct {
	*mock.Call
}

// PostTasksIDRunsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDRunsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTasksIDRunsWithBody(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTasksIDRunsWithBody_Call {
	return &ClientInterface_PostTasksIDRunsWithBody_Call{Call: _e.mock.On("PostTasksIDRunsWithBody", ctx, taskID, params, contentType, body)}
}

func (_c *ClientInterface_PostTasksIDRunsWithBody_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDRunsParams, contentType string, body io.Reader)) *ClientInterface_PostTasksIDRunsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDRunsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTasksIDRunsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksIDRunsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostTasksWithBody(ctx context.Context, params *domain.PostTasksParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostTasksParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostTasksParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTasksWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksWithBody'
type ClientInterface_PostTasksWithBody_Call struct {
	*mock.Call
}

// PostTasksWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostTasksParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTasksWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTasksWithBody_Call {
	return &ClientInterface_PostTasksWithBody_Call{Call: _e.mock.On("PostTasksWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostTasksWithBody_Call) Run(run func(ctx context.Context, params *domain.PostTasksParams, contentType string, body io.Reader)) *ClientInterface_PostTasksWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostTasksParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTasksWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTasksWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafs provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostTelegrafs(ctx context.Context, params *domain.PostTelegrafsParams, body domain.PostTelegrafsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostTelegrafsParams, domain.PostTelegrafsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostTelegrafsParams, domain.PostTelegrafsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTelegrafs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafs'
type ClientInterface_PostTelegrafs_Call struct {
	*mock.Call
}

// PostTelegrafs is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostTelegrafsParams
//  - body domain.PostTelegrafsJSONRequestBody
func (_e *ClientInterface_Expecter) PostTelegrafs(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostTelegrafs_Call {
	return &ClientInterface_PostTelegrafs_Call{Call: _e.mock.On("PostTelegrafs", ctx, params, body)}
}

func (_c *ClientInterface_PostTelegrafs_Call) Run(run func(ctx context.Context, params *domain.PostTelegrafsParams, body domain.PostTelegrafsJSONRequestBody)) *ClientInterface_PostTelegrafs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostTelegrafsParams), args[2].(domain.PostTelegrafsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostTelegrafs_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTelegrafs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDLabels provides a mock function with given fields: ctx, telegrafID, params, body
func (_m *ClientInterface) PostTelegrafsIDLabels(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDLabelsParams, body domain.PostTelegrafsIDLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDLabelsParams, domain.PostTelegrafsIDLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDLabelsParams, domain.PostTelegrafsIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, telegrafID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTelegrafsIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDLabels'
type ClientInterface_PostTelegrafsIDLabels_Call struct {
	*mock.Call
}

// PostTelegrafsIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDLabelsParams
//  - body domain.PostTelegrafsIDLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostTelegrafsIDLabels(ctx interface{}, telegrafID interface{}, params interface{}, body interface{}) *ClientInterface_PostTelegrafsIDLabels_Call {
	return &ClientInterface_PostTelegrafsIDLabels_Call{Call: _e.mock.On("PostTelegrafsIDLabels", ctx, telegrafID, params, body)}
}

func (_c *ClientInterface_PostTelegrafsIDLabels_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDLabelsParams, body domain.PostTelegrafsIDLabelsJSONRequestBody)) *ClientInterface_PostTelegrafsIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDLabelsParams), args[3].(domain.PostTelegrafsIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostTelegrafsIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTelegrafsIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDLabelsWithBody provides a mock function with given fields: ctx, telegrafID, params, contentType, body
func (_m *ClientInterface) PostTelegrafsIDLabelsWithBody(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDLabelsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDLabelsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTelegrafsIDLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDLabelsWithBody'
type ClientInterface_PostTelegrafsIDLabelsWithBody_Call struct {
	*mock.Call
}

// PostTelegrafsIDLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTelegrafsIDLabelsWithBody(ctx interface{}, telegrafID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTelegrafsIDLabelsWithBody_Call {
	return &ClientInterface_PostTelegrafsIDLabelsWithBody_Call{Call: _e.mock.On("PostTelegrafsIDLabelsWithBody", ctx, telegrafID, params, contentType, body)}
}

func (_c *ClientInterface_PostTelegrafsIDLabelsWithBody_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDLabelsParams, contentType string, body io.Reader)) *ClientInterface_PostTelegrafsIDLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTelegrafsIDLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTelegrafsIDLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDMembers provides a mock function with given fields: ctx, telegrafID, params, body
func (_m *ClientInterface) PostTelegrafsIDMembers(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDMembersParams, body domain.PostTelegrafsIDMembersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDMembersParams, domain.PostTelegrafsIDMembersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDMembersParams, domain.PostTelegrafsIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, telegrafID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTelegrafsIDMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDMembers'
type ClientInterface_PostTelegrafsIDMembers_Call struct {
	*mock.Call
}

// PostTelegrafsIDMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDMembersParams
//  - body domain.PostTelegrafsIDMembersJSONRequestBody
func (_e *ClientInterface_Expecter) PostTelegrafsIDMembers(ctx interface{}, telegrafID interface{}, params interface{}, body interface{}) *ClientInterface_PostTelegrafsIDMembers_Call {
	return &ClientInterface_PostTelegrafsIDMembers_Call{Call: _e.mock.On("PostTelegrafsIDMembers", ctx, telegrafID, params, body)}
}

func (_c *ClientInterface_PostTelegrafsIDMembers_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDMembersParams, body domain.PostTelegrafsIDMembersJSONRequestBody)) *ClientInterface_PostTelegrafsIDMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDMembersParams), args[3].(domain.PostTelegrafsIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostTelegrafsIDMembers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTelegrafsIDMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDMembersWithBody provides a mock function with given fields: ctx, telegrafID, params, contentType, body
func (_m *ClientInterface) PostTelegrafsIDMembersWithBody(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDMembersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDMembersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTelegrafsIDMembersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDMembersWithBody'
type ClientInterface_PostTelegrafsIDMembersWithBody_Call struct {
	*mock.Call
}

// PostTelegrafsIDMembersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTelegrafsIDMembersWithBody(ctx interface{}, telegrafID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTelegrafsIDMembersWithBody_Call {
	return &ClientInterface_PostTelegrafsIDMembersWithBody_Call{Call: _e.mock.On("PostTelegrafsIDMembersWithBody", ctx, telegrafID, params, contentType, body)}
}

func (_c *ClientInterface_PostTelegrafsIDMembersWithBody_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDMembersParams, contentType string, body io.Reader)) *ClientInterface_PostTelegrafsIDMembersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTelegrafsIDMembersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTelegrafsIDMembersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDOwners provides a mock function with given fields: ctx, telegrafID, params, body
func (_m *ClientInterface) PostTelegrafsIDOwners(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDOwnersParams, body domain.PostTelegrafsIDOwnersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDOwnersParams, domain.PostTelegrafsIDOwnersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDOwnersParams, domain.PostTelegrafsIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, telegrafID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTelegrafsIDOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDOwners'
type ClientInterface_PostTelegrafsIDOwners_Call struct {
	*mock.Call
}

// PostTelegrafsIDOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDOwnersParams
//  - body domain.PostTelegrafsIDOwnersJSONRequestBody
func (_e *ClientInterface_Expecter) PostTelegrafsIDOwners(ctx interface{}, telegrafID interface{}, params interface{}, body interface{}) *ClientInterface_PostTelegrafsIDOwners_Call {
	return &ClientInterface_PostTelegrafsIDOwners_Call{Call: _e.mock.On("PostTelegrafsIDOwners", ctx, telegrafID, params, body)}
}

func (_c *ClientInterface_PostTelegrafsIDOwners_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDOwnersParams, body domain.PostTelegrafsIDOwnersJSONRequestBody)) *ClientInterface_PostTelegrafsIDOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDOwnersParams), args[3].(domain.PostTelegrafsIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostTelegrafsIDOwners_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTelegrafsIDOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDOwnersWithBody provides a mock function with given fields: ctx, telegrafID, params, contentType, body
func (_m *ClientInterface) PostTelegrafsIDOwnersWithBody(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDOwnersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDOwnersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTelegrafsIDOwnersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDOwnersWithBody'
type ClientInterface_PostTelegrafsIDOwnersWithBody_Call struct {
	*mock.Call
}

// PostTelegrafsIDOwnersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTelegrafsIDOwnersWithBody(ctx interface{}, telegrafID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTelegrafsIDOwnersWithBody_Call {
	return &ClientInterface_PostTelegrafsIDOwnersWithBody_Call{Call: _e.mock.On("PostTelegrafsIDOwnersWithBody", ctx, telegrafID, params, contentType, body)}
}

func (_c *ClientInterface_PostTelegrafsIDOwnersWithBody_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDOwnersParams, contentType string, body io.Reader)) *ClientInterface_PostTelegrafsIDOwnersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTelegrafsIDOwnersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTelegrafsIDOwnersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostTelegrafsWithBody(ctx context.Context, params *domain.PostTelegrafsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostTelegrafsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostTelegrafsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostTelegrafsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsWithBody'
type ClientInterface_PostTelegrafsWithBody_Call struct {
	*mock.Call
}

// PostTelegrafsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostTelegrafsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostTelegrafsWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostTelegrafsWithBody_Call {
	return &ClientInterface_PostTelegrafsWithBody_Call{Call: _e.mock.On("PostTelegrafsWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostTelegrafsWithBody_Call) Run(run func(ctx context.Context, params *domain.PostTelegrafsParams, contentType string, body io.Reader)) *ClientInterface_PostTelegrafsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostTelegrafsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostTelegrafsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostTelegrafsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostUsers provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostUsers(ctx context.Context, params *domain.PostUsersParams, body domain.PostUsersJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostUsersParams, domain.PostUsersJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostUsersParams, domain.PostUsersJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUsers'
type ClientInterface_PostUsers_Call struct {
	*mock.Call
}

// PostUsers is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostUsersParams
//  - body domain.PostUsersJSONRequestBody
func (_e *ClientInterface_Expecter) PostUsers(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostUsers_Call {
	return &ClientInterface_PostUsers_Call{Call: _e.mock.On("PostUsers", ctx, params, body)}
}

func (_c *ClientInterface_PostUsers_Call) Run(run func(ctx context.Context, params *domain.PostUsersParams, body domain.PostUsersJSONRequestBody)) *ClientInterface_PostUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostUsersParams), args[2].(domain.PostUsersJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostUsers_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostUsersIDPassword provides a mock function with given fields: ctx, userID, params, body
func (_m *ClientInterface) PostUsersIDPassword(ctx context.Context, userID string, params *domain.PostUsersIDPasswordParams, body domain.PostUsersIDPasswordJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, userID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostUsersIDPasswordParams, domain.PostUsersIDPasswordJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, userID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostUsersIDPasswordParams, domain.PostUsersIDPasswordJSONRequestBody) error); ok {
		r1 = rf(ctx, userID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostUsersIDPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUsersIDPassword'
type ClientInterface_PostUsersIDPassword_Call struct {
	*mock.Call
}

// PostUsersIDPassword is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.PostUsersIDPasswordParams
//  - body domain.PostUsersIDPasswordJSONRequestBody
func (_e *ClientInterface_Expecter) PostUsersIDPassword(ctx interface{}, userID interface{}, params interface{}, body interface{}) *ClientInterface_PostUsersIDPassword_Call {
	return &ClientInterface_PostUsersIDPassword_Call{Call: _e.mock.On("PostUsersIDPassword", ctx, userID, params, body)}
}

func (_c *ClientInterface_PostUsersIDPassword_Call) Run(run func(ctx context.Context, userID string, params *domain.PostUsersIDPasswordParams, body domain.PostUsersIDPasswordJSONRequestBody)) *ClientInterface_PostUsersIDPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostUsersIDPasswordParams), args[3].(domain.PostUsersIDPasswordJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostUsersIDPassword_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostUsersIDPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostUsersIDPasswordWithBody provides a mock function with given fields: ctx, userID, params, contentType, body
func (_m *ClientInterface) PostUsersIDPasswordWithBody(ctx context.Context, userID string, params *domain.PostUsersIDPasswordParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, userID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostUsersIDPasswordParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, userID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostUsersIDPasswordParams, string, io.Reader) error); ok {
		r1 = rf(ctx, userID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostUsersIDPasswordWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUsersIDPasswordWithBody'
type ClientInterface_PostUsersIDPasswordWithBody_Call struct {
	*mock.Call
}

// PostUsersIDPasswordWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.PostUsersIDPasswordParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostUsersIDPasswordWithBody(ctx interface{}, userID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostUsersIDPasswordWithBody_Call {
	return &ClientInterface_PostUsersIDPasswordWithBody_Call{Call: _e.mock.On("PostUsersIDPasswordWithBody", ctx, userID, params, contentType, body)}
}

func (_c *ClientInterface_PostUsersIDPasswordWithBody_Call) Run(run func(ctx context.Context, userID string, params *domain.PostUsersIDPasswordParams, contentType string, body io.Reader)) *ClientInterface_PostUsersIDPasswordWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostUsersIDPasswordParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostUsersIDPasswordWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostUsersIDPasswordWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostUsersWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostUsersWithBody(ctx context.Context, params *domain.PostUsersParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostUsersParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostUsersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostUsersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUsersWithBody'
type ClientInterface_PostUsersWithBody_Call struct {
	*mock.Call
}

// PostUsersWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostUsersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostUsersWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostUsersWithBody_Call {
	return &ClientInterface_PostUsersWithBody_Call{Call: _e.mock.On("PostUsersWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostUsersWithBody_Call) Run(run func(ctx context.Context, params *domain.PostUsersParams, contentType string, body io.Reader)) *ClientInterface_PostUsersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostUsersParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostUsersWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostUsersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostValidateReplicationByID provides a mock function with given fields: ctx, replicationID, params
func (_m *ClientInterface) PostValidateReplicationByID(ctx context.Context, replicationID string, params *domain.PostValidateReplicationByIDParams) (*http.Response, error) {
	ret := _m.Called(ctx, replicationID, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostValidateReplicationByIDParams) *http.Response); ok {
		r0 = rf(ctx, replicationID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostValidateReplicationByIDParams) error); ok {
		r1 = rf(ctx, replicationID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostValidateReplicationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostValidateReplicationByID'
type ClientInterface_PostValidateReplicationByID_Call struct {
	*mock.Call
}

// PostValidateReplicationByID is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.PostValidateReplicationByIDParams
func (_e *ClientInterface_Expecter) PostValidateReplicationByID(ctx interface{}, replicationID interface{}, params interface{}) *ClientInterface_PostValidateReplicationByID_Call {
	return &ClientInterface_PostValidateReplicationByID_Call{Call: _e.mock.On("PostValidateReplicationByID", ctx, replicationID, params)}
}

func (_c *ClientInterface_PostValidateReplicationByID_Call) Run(run func(ctx context.Context, replicationID string, params *domain.PostValidateReplicationByIDParams)) *ClientInterface_PostValidateReplicationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostValidateReplicationByIDParams))
	})
	return _c
}

func (_c *ClientInterface_PostValidateReplicationByID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostValidateReplicationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostVariables provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PostVariables(ctx context.Context, params *domain.PostVariablesParams, body domain.PostVariablesJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostVariablesParams, domain.PostVariablesJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostVariablesParams, domain.PostVariablesJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostVariables'
type ClientInterface_PostVariables_Call struct {
	*mock.Call
}

// PostVariables is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostVariablesParams
//  - body domain.PostVariablesJSONRequestBody
func (_e *ClientInterface_Expecter) PostVariables(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PostVariables_Call {
	return &ClientInterface_PostVariables_Call{Call: _e.mock.On("PostVariables", ctx, params, body)}
}

func (_c *ClientInterface_PostVariables_Call) Run(run func(ctx context.Context, params *domain.PostVariablesParams, body domain.PostVariablesJSONRequestBody)) *ClientInterface_PostVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostVariablesParams), args[2].(domain.PostVariablesJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostVariables_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostVariables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostVariablesIDLabels provides a mock function with given fields: ctx, variableID, params, body
func (_m *ClientInterface) PostVariablesIDLabels(ctx context.Context, variableID string, params *domain.PostVariablesIDLabelsParams, body domain.PostVariablesIDLabelsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostVariablesIDLabelsParams, domain.PostVariablesIDLabelsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, variableID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostVariablesIDLabelsParams, domain.PostVariablesIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, variableID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostVariablesIDLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostVariablesIDLabels'
type ClientInterface_PostVariablesIDLabels_Call struct {
	*mock.Call
}

// PostVariablesIDLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PostVariablesIDLabelsParams
//  - body domain.PostVariablesIDLabelsJSONRequestBody
func (_e *ClientInterface_Expecter) PostVariablesIDLabels(ctx interface{}, variableID interface{}, params interface{}, body interface{}) *ClientInterface_PostVariablesIDLabels_Call {
	return &ClientInterface_PostVariablesIDLabels_Call{Call: _e.mock.On("PostVariablesIDLabels", ctx, variableID, params, body)}
}

func (_c *ClientInterface_PostVariablesIDLabels_Call) Run(run func(ctx context.Context, variableID string, params *domain.PostVariablesIDLabelsParams, body domain.PostVariablesIDLabelsJSONRequestBody)) *ClientInterface_PostVariablesIDLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostVariablesIDLabelsParams), args[3].(domain.PostVariablesIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PostVariablesIDLabels_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostVariablesIDLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostVariablesIDLabelsWithBody provides a mock function with given fields: ctx, variableID, params, contentType, body
func (_m *ClientInterface) PostVariablesIDLabelsWithBody(ctx context.Context, variableID string, params *domain.PostVariablesIDLabelsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostVariablesIDLabelsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, variableID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostVariablesIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, variableID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostVariablesIDLabelsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostVariablesIDLabelsWithBody'
type ClientInterface_PostVariablesIDLabelsWithBody_Call struct {
	*mock.Call
}

// PostVariablesIDLabelsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PostVariablesIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostVariablesIDLabelsWithBody(ctx interface{}, variableID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostVariablesIDLabelsWithBody_Call {
	return &ClientInterface_PostVariablesIDLabelsWithBody_Call{Call: _e.mock.On("PostVariablesIDLabelsWithBody", ctx, variableID, params, contentType, body)}
}

func (_c *ClientInterface_PostVariablesIDLabelsWithBody_Call) Run(run func(ctx context.Context, variableID string, params *domain.PostVariablesIDLabelsParams, contentType string, body io.Reader)) *ClientInterface_PostVariablesIDLabelsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostVariablesIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostVariablesIDLabelsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostVariablesIDLabelsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostVariablesWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostVariablesWithBody(ctx context.Context, params *domain.PostVariablesParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostVariablesParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostVariablesParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostVariablesWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostVariablesWithBody'
type ClientInterface_PostVariablesWithBody_Call struct {
	*mock.Call
}

// PostVariablesWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostVariablesParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostVariablesWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostVariablesWithBody_Call {
	return &ClientInterface_PostVariablesWithBody_Call{Call: _e.mock.On("PostVariablesWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostVariablesWithBody_Call) Run(run func(ctx context.Context, params *domain.PostVariablesParams, contentType string, body io.Reader)) *ClientInterface_PostVariablesWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostVariablesParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostVariablesWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostVariablesWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostWriteWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PostWriteWithBody(ctx context.Context, params *domain.PostWriteParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostWriteParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostWriteParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PostWriteWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostWriteWithBody'
type ClientInterface_PostWriteWithBody_Call struct {
	*mock.Call
}

// PostWriteWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostWriteParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PostWriteWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PostWriteWithBody_Call {
	return &ClientInterface_PostWriteWithBody_Call{Call: _e.mock.On("PostWriteWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PostWriteWithBody_Call) Run(run func(ctx context.Context, params *domain.PostWriteParams, contentType string, body io.Reader)) *ClientInterface_PostWriteWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostWriteParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PostWriteWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PostWriteWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutChecksID provides a mock function with given fields: ctx, checkID, params, body
func (_m *ClientInterface) PutChecksID(ctx context.Context, checkID string, params *domain.PutChecksIDParams, body domain.PutChecksIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutChecksIDParams, domain.PutChecksIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, checkID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutChecksIDParams, domain.PutChecksIDJSONRequestBody) error); ok {
		r1 = rf(ctx, checkID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutChecksID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutChecksID'
type ClientInterface_PutChecksID_Call struct {
	*mock.Call
}

// PutChecksID is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PutChecksIDParams
//  - body domain.PutChecksIDJSONRequestBody
func (_e *ClientInterface_Expecter) PutChecksID(ctx interface{}, checkID interface{}, params interface{}, body interface{}) *ClientInterface_PutChecksID_Call {
	return &ClientInterface_PutChecksID_Call{Call: _e.mock.On("PutChecksID", ctx, checkID, params, body)}
}

func (_c *ClientInterface_PutChecksID_Call) Run(run func(ctx context.Context, checkID string, params *domain.PutChecksIDParams, body domain.PutChecksIDJSONRequestBody)) *ClientInterface_PutChecksID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutChecksIDParams), args[3].(domain.PutChecksIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PutChecksID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutChecksID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutChecksIDWithBody provides a mock function with given fields: ctx, checkID, params, contentType, body
func (_m *ClientInterface) PutChecksIDWithBody(ctx context.Context, checkID string, params *domain.PutChecksIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, checkID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutChecksIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, checkID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutChecksIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, checkID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutChecksIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutChecksIDWithBody'
type ClientInterface_PutChecksIDWithBody_Call struct {
	*mock.Call
}

// PutChecksIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PutChecksIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PutChecksIDWithBody(ctx interface{}, checkID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PutChecksIDWithBody_Call {
	return &ClientInterface_PutChecksIDWithBody_Call{Call: _e.mock.On("PutChecksIDWithBody", ctx, checkID, params, contentType, body)}
}

func (_c *ClientInterface_PutChecksIDWithBody_Call) Run(run func(ctx context.Context, checkID string, params *domain.PutChecksIDParams, contentType string, body io.Reader)) *ClientInterface_PutChecksIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutChecksIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PutChecksIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutChecksIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutDashboardsIDCells provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientInterface) PutDashboardsIDCells(ctx context.Context, dashboardID string, params *domain.PutDashboardsIDCellsParams, body domain.PutDashboardsIDCellsJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutDashboardsIDCellsParams, domain.PutDashboardsIDCellsJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutDashboardsIDCellsParams, domain.PutDashboardsIDCellsJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutDashboardsIDCells_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDashboardsIDCells'
type ClientInterface_PutDashboardsIDCells_Call struct {
	*mock.Call
}

// PutDashboardsIDCells is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PutDashboardsIDCellsParams
//  - body domain.PutDashboardsIDCellsJSONRequestBody
func (_e *ClientInterface_Expecter) PutDashboardsIDCells(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientInterface_PutDashboardsIDCells_Call {
	return &ClientInterface_PutDashboardsIDCells_Call{Call: _e.mock.On("PutDashboardsIDCells", ctx, dashboardID, params, body)}
}

func (_c *ClientInterface_PutDashboardsIDCells_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PutDashboardsIDCellsParams, body domain.PutDashboardsIDCellsJSONRequestBody)) *ClientInterface_PutDashboardsIDCells_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutDashboardsIDCellsParams), args[3].(domain.PutDashboardsIDCellsJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PutDashboardsIDCells_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutDashboardsIDCells_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutDashboardsIDCellsWithBody provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientInterface) PutDashboardsIDCellsWithBody(ctx context.Context, dashboardID string, params *domain.PutDashboardsIDCellsParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutDashboardsIDCellsParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutDashboardsIDCellsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutDashboardsIDCellsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDashboardsIDCellsWithBody'
type ClientInterface_PutDashboardsIDCellsWithBody_Call struct {
	*mock.Call
}

// PutDashboardsIDCellsWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PutDashboardsIDCellsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PutDashboardsIDCellsWithBody(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PutDashboardsIDCellsWithBody_Call {
	return &ClientInterface_PutDashboardsIDCellsWithBody_Call{Call: _e.mock.On("PutDashboardsIDCellsWithBody", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientInterface_PutDashboardsIDCellsWithBody_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PutDashboardsIDCellsParams, contentType string, body io.Reader)) *ClientInterface_PutDashboardsIDCellsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutDashboardsIDCellsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PutDashboardsIDCellsWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutDashboardsIDCellsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutMePassword provides a mock function with given fields: ctx, params, body
func (_m *ClientInterface) PutMePassword(ctx context.Context, params *domain.PutMePasswordParams, body domain.PutMePasswordJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PutMePasswordParams, domain.PutMePasswordJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PutMePasswordParams, domain.PutMePasswordJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutMePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMePassword'
type ClientInterface_PutMePassword_Call struct {
	*mock.Call
}

// PutMePassword is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PutMePasswordParams
//  - body domain.PutMePasswordJSONRequestBody
func (_e *ClientInterface_Expecter) PutMePassword(ctx interface{}, params interface{}, body interface{}) *ClientInterface_PutMePassword_Call {
	return &ClientInterface_PutMePassword_Call{Call: _e.mock.On("PutMePassword", ctx, params, body)}
}

func (_c *ClientInterface_PutMePassword_Call) Run(run func(ctx context.Context, params *domain.PutMePasswordParams, body domain.PutMePasswordJSONRequestBody)) *ClientInterface_PutMePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PutMePasswordParams), args[2].(domain.PutMePasswordJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PutMePassword_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutMePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutMePasswordWithBody provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientInterface) PutMePasswordWithBody(ctx context.Context, params *domain.PutMePasswordParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PutMePasswordParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PutMePasswordParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutMePasswordWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMePasswordWithBody'
type ClientInterface_PutMePasswordWithBody_Call struct {
	*mock.Call
}

// PutMePasswordWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PutMePasswordParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PutMePasswordWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PutMePasswordWithBody_Call {
	return &ClientInterface_PutMePasswordWithBody_Call{Call: _e.mock.On("PutMePasswordWithBody", ctx, params, contentType, body)}
}

func (_c *ClientInterface_PutMePasswordWithBody_Call) Run(run func(ctx context.Context, params *domain.PutMePasswordParams, contentType string, body io.Reader)) *ClientInterface_PutMePasswordWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PutMePasswordParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PutMePasswordWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutMePasswordWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutNotificationEndpointsID provides a mock function with given fields: ctx, endpointID, params, body
func (_m *ClientInterface) PutNotificationEndpointsID(ctx context.Context, endpointID string, params *domain.PutNotificationEndpointsIDParams, body domain.PutNotificationEndpointsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutNotificationEndpointsIDParams, domain.PutNotificationEndpointsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, endpointID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutNotificationEndpointsIDParams, domain.PutNotificationEndpointsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, endpointID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutNotificationEndpointsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutNotificationEndpointsID'
type ClientInterface_PutNotificationEndpointsID_Call struct {
	*mock.Call
}

// PutNotificationEndpointsID is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PutNotificationEndpointsIDParams
//  - body domain.PutNotificationEndpointsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PutNotificationEndpointsID(ctx interface{}, endpointID interface{}, params interface{}, body interface{}) *ClientInterface_PutNotificationEndpointsID_Call {
	return &ClientInterface_PutNotificationEndpointsID_Call{Call: _e.mock.On("PutNotificationEndpointsID", ctx, endpointID, params, body)}
}

func (_c *ClientInterface_PutNotificationEndpointsID_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PutNotificationEndpointsIDParams, body domain.PutNotificationEndpointsIDJSONRequestBody)) *ClientInterface_PutNotificationEndpointsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutNotificationEndpointsIDParams), args[3].(domain.PutNotificationEndpointsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PutNotificationEndpointsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutNotificationEndpointsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutNotificationEndpointsIDWithBody provides a mock function with given fields: ctx, endpointID, params, contentType, body
func (_m *ClientInterface) PutNotificationEndpointsIDWithBody(ctx context.Context, endpointID string, params *domain.PutNotificationEndpointsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, endpointID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutNotificationEndpointsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, endpointID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutNotificationEndpointsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, endpointID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutNotificationEndpointsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutNotificationEndpointsIDWithBody'
type ClientInterface_PutNotificationEndpointsIDWithBody_Call struct {
	*mock.Call
}

// PutNotificationEndpointsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PutNotificationEndpointsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PutNotificationEndpointsIDWithBody(ctx interface{}, endpointID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PutNotificationEndpointsIDWithBody_Call {
	return &ClientInterface_PutNotificationEndpointsIDWithBody_Call{Call: _e.mock.On("PutNotificationEndpointsIDWithBody", ctx, endpointID, params, contentType, body)}
}

func (_c *ClientInterface_PutNotificationEndpointsIDWithBody_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PutNotificationEndpointsIDParams, contentType string, body io.Reader)) *ClientInterface_PutNotificationEndpointsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutNotificationEndpointsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PutNotificationEndpointsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutNotificationEndpointsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutNotificationRulesID provides a mock function with given fields: ctx, ruleID, params, body
func (_m *ClientInterface) PutNotificationRulesID(ctx context.Context, ruleID string, params *domain.PutNotificationRulesIDParams, body domain.PutNotificationRulesIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutNotificationRulesIDParams, domain.PutNotificationRulesIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, ruleID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutNotificationRulesIDParams, domain.PutNotificationRulesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, ruleID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutNotificationRulesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutNotificationRulesID'
type ClientInterface_PutNotificationRulesID_Call struct {
	*mock.Call
}

// PutNotificationRulesID is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PutNotificationRulesIDParams
//  - body domain.PutNotificationRulesIDJSONRequestBody
func (_e *ClientInterface_Expecter) PutNotificationRulesID(ctx interface{}, ruleID interface{}, params interface{}, body interface{}) *ClientInterface_PutNotificationRulesID_Call {
	return &ClientInterface_PutNotificationRulesID_Call{Call: _e.mock.On("PutNotificationRulesID", ctx, ruleID, params, body)}
}

func (_c *ClientInterface_PutNotificationRulesID_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PutNotificationRulesIDParams, body domain.PutNotificationRulesIDJSONRequestBody)) *ClientInterface_PutNotificationRulesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutNotificationRulesIDParams), args[3].(domain.PutNotificationRulesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PutNotificationRulesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutNotificationRulesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutNotificationRulesIDWithBody provides a mock function with given fields: ctx, ruleID, params, contentType, body
func (_m *ClientInterface) PutNotificationRulesIDWithBody(ctx context.Context, ruleID string, params *domain.PutNotificationRulesIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, ruleID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutNotificationRulesIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, ruleID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutNotificationRulesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, ruleID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutNotificationRulesIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutNotificationRulesIDWithBody'
type ClientInterface_PutNotificationRulesIDWithBody_Call struct {
	*mock.Call
}

// PutNotificationRulesIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PutNotificationRulesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PutNotificationRulesIDWithBody(ctx interface{}, ruleID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PutNotificationRulesIDWithBody_Call {
	return &ClientInterface_PutNotificationRulesIDWithBody_Call{Call: _e.mock.On("PutNotificationRulesIDWithBody", ctx, ruleID, params, contentType, body)}
}

func (_c *ClientInterface_PutNotificationRulesIDWithBody_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PutNotificationRulesIDParams, contentType string, body io.Reader)) *ClientInterface_PutNotificationRulesIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutNotificationRulesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PutNotificationRulesIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutNotificationRulesIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutTelegrafsID provides a mock function with given fields: ctx, telegrafID, params, body
func (_m *ClientInterface) PutTelegrafsID(ctx context.Context, telegrafID string, params *domain.PutTelegrafsIDParams, body domain.PutTelegrafsIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutTelegrafsIDParams, domain.PutTelegrafsIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutTelegrafsIDParams, domain.PutTelegrafsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, telegrafID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutTelegrafsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTelegrafsID'
type ClientInterface_PutTelegrafsID_Call struct {
	*mock.Call
}

// PutTelegrafsID is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PutTelegrafsIDParams
//  - body domain.PutTelegrafsIDJSONRequestBody
func (_e *ClientInterface_Expecter) PutTelegrafsID(ctx interface{}, telegrafID interface{}, params interface{}, body interface{}) *ClientInterface_PutTelegrafsID_Call {
	return &ClientInterface_PutTelegrafsID_Call{Call: _e.mock.On("PutTelegrafsID", ctx, telegrafID, params, body)}
}

func (_c *ClientInterface_PutTelegrafsID_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PutTelegrafsIDParams, body domain.PutTelegrafsIDJSONRequestBody)) *ClientInterface_PutTelegrafsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutTelegrafsIDParams), args[3].(domain.PutTelegrafsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PutTelegrafsID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutTelegrafsID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutTelegrafsIDWithBody provides a mock function with given fields: ctx, telegrafID, params, contentType, body
func (_m *ClientInterface) PutTelegrafsIDWithBody(ctx context.Context, telegrafID string, params *domain.PutTelegrafsIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, telegrafID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutTelegrafsIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutTelegrafsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutTelegrafsIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTelegrafsIDWithBody'
type ClientInterface_PutTelegrafsIDWithBody_Call struct {
	*mock.Call
}

// PutTelegrafsIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PutTelegrafsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PutTelegrafsIDWithBody(ctx interface{}, telegrafID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PutTelegrafsIDWithBody_Call {
	return &ClientInterface_PutTelegrafsIDWithBody_Call{Call: _e.mock.On("PutTelegrafsIDWithBody", ctx, telegrafID, params, contentType, body)}
}

func (_c *ClientInterface_PutTelegrafsIDWithBody_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PutTelegrafsIDParams, contentType string, body io.Reader)) *ClientInterface_PutTelegrafsIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutTelegrafsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PutTelegrafsIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutTelegrafsIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutVariablesID provides a mock function with given fields: ctx, variableID, params, body
func (_m *ClientInterface) PutVariablesID(ctx context.Context, variableID string, params *domain.PutVariablesIDParams, body domain.PutVariablesIDJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, params, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutVariablesIDParams, domain.PutVariablesIDJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, variableID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutVariablesIDParams, domain.PutVariablesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, variableID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutVariablesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutVariablesID'
type ClientInterface_PutVariablesID_Call struct {
	*mock.Call
}

// PutVariablesID is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PutVariablesIDParams
//  - body domain.PutVariablesIDJSONRequestBody
func (_e *ClientInterface_Expecter) PutVariablesID(ctx interface{}, variableID interface{}, params interface{}, body interface{}) *ClientInterface_PutVariablesID_Call {
	return &ClientInterface_PutVariablesID_Call{Call: _e.mock.On("PutVariablesID", ctx, variableID, params, body)}
}

func (_c *ClientInterface_PutVariablesID_Call) Run(run func(ctx context.Context, variableID string, params *domain.PutVariablesIDParams, body domain.PutVariablesIDJSONRequestBody)) *ClientInterface_PutVariablesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutVariablesIDParams), args[3].(domain.PutVariablesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_PutVariablesID_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutVariablesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutVariablesIDWithBody provides a mock function with given fields: ctx, variableID, params, contentType, body
func (_m *ClientInterface) PutVariablesIDWithBody(ctx context.Context, variableID string, params *domain.PutVariablesIDParams, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, variableID, params, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutVariablesIDParams, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, variableID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutVariablesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, variableID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_PutVariablesIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutVariablesIDWithBody'
type ClientInterface_PutVariablesIDWithBody_Call struct {
	*mock.Call
}

// PutVariablesIDWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PutVariablesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) PutVariablesIDWithBody(ctx interface{}, variableID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientInterface_PutVariablesIDWithBody_Call {
	return &ClientInterface_PutVariablesIDWithBody_Call{Call: _e.mock.On("PutVariablesIDWithBody", ctx, variableID, params, contentType, body)}
}

func (_c *ClientInterface_PutVariablesIDWithBody_Call) Run(run func(ctx context.Context, variableID string, params *domain.PutVariablesIDParams, contentType string, body io.Reader)) *ClientInterface_PutVariablesIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutVariablesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_PutVariablesIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_PutVariablesIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ReadStack provides a mock function with given fields: ctx, stackId
func (_m *ClientInterface) ReadStack(ctx context.Context, stackId string) (*http.Response, error) {
	ret := _m.Called(ctx, stackId)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, stackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_ReadStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadStack'
type ClientInterface_ReadStack_Call struct {
	*mock.Call
}

// ReadStack is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
func (_e *ClientInterface_Expecter) ReadStack(ctx interface{}, stackId interface{}) *ClientInterface_ReadStack_Call {
	return &ClientInterface_ReadStack_Call{Call: _e.mock.On("ReadStack", ctx, stackId)}
}

func (_c *ClientInterface_ReadStack_Call) Run(run func(ctx context.Context, stackId string)) *ClientInterface_ReadStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientInterface_ReadStack_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_ReadStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UninstallStack provides a mock function with given fields: ctx, stackId
func (_m *ClientInterface) UninstallStack(ctx context.Context, stackId string) (*http.Response, error) {
	ret := _m.Called(ctx, stackId)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, stackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_UninstallStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UninstallStack'
type ClientInterface_UninstallStack_Call struct {
	*mock.Call
}

// UninstallStack is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
func (_e *ClientInterface_Expecter) UninstallStack(ctx interface{}, stackId interface{}) *ClientInterface_UninstallStack_Call {
	return &ClientInterface_UninstallStack_Call{Call: _e.mock.On("UninstallStack", ctx, stackId)}
}

func (_c *ClientInterface_UninstallStack_Call) Run(run func(ctx context.Context, stackId string)) *ClientInterface_UninstallStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientInterface_UninstallStack_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_UninstallStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStack provides a mock function with given fields: ctx, stackId, body
func (_m *ClientInterface) UpdateStack(ctx context.Context, stackId string, body domain.UpdateStackJSONRequestBody) (*http.Response, error) {
	ret := _m.Called(ctx, stackId, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateStackJSONRequestBody) *http.Response); ok {
		r0 = rf(ctx, stackId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, domain.UpdateStackJSONRequestBody) error); ok {
		r1 = rf(ctx, stackId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_UpdateStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStack'
type ClientInterface_UpdateStack_Call struct {
	*mock.Call
}

// UpdateStack is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
//  - body domain.UpdateStackJSONRequestBody
func (_e *ClientInterface_Expecter) UpdateStack(ctx interface{}, stackId interface{}, body interface{}) *ClientInterface_UpdateStack_Call {
	return &ClientInterface_UpdateStack_Call{Call: _e.mock.On("UpdateStack", ctx, stackId, body)}
}

func (_c *ClientInterface_UpdateStack_Call) Run(run func(ctx context.Context, stackId string, body domain.UpdateStackJSONRequestBody)) *ClientInterface_UpdateStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.UpdateStackJSONRequestBody))
	})
	return _c
}

func (_c *ClientInterface_UpdateStack_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_UpdateStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStackWithBody provides a mock function with given fields: ctx, stackId, contentType, body
func (_m *ClientInterface) UpdateStackWithBody(ctx context.Context, stackId string, contentType string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, stackId, contentType, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, stackId, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader) error); ok {
		r1 = rf(ctx, stackId, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_UpdateStackWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStackWithBody'
type ClientInterface_UpdateStackWithBody_Call struct {
	*mock.Call
}

// UpdateStackWithBody is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
//  - contentType string
//  - body io.Reader
func (_e *ClientInterface_Expecter) UpdateStackWithBody(ctx interface{}, stackId interface{}, contentType interface{}, body interface{}) *ClientInterface_UpdateStackWithBody_Call {
	return &ClientInterface_UpdateStackWithBody_Call{Call: _e.mock.On("UpdateStackWithBody", ctx, stackId, contentType, body)}
}

func (_c *ClientInterface_UpdateStackWithBody_Call) Run(run func(ctx context.Context, stackId string, contentType string, body io.Reader)) *ClientInterface_UpdateStackWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientInterface_UpdateStackWithBody_Call) Return(_a0 *http.Response, _a1 error) *ClientInterface_UpdateStackWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientInterface(t mockConstructorTestingTNewClientInterface) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
