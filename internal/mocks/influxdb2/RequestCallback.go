// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// RequestCallback is an autogenerated mock type for the RequestCallback type
type RequestCallback struct {
	mock.Mock
}

type RequestCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestCallback) EXPECT() *RequestCallback_Expecter {
	return &RequestCallback_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: req
func (_m *RequestCallback) Execute(req *http.Request) {
	_m.Called(req)
}

// RequestCallback_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type RequestCallback_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - req *http.Request
func (_e *RequestCallback_Expecter) Execute(req interface{}) *RequestCallback_Execute_Call {
	return &RequestCallback_Execute_Call{Call: _e.mock.On("Execute", req)}
}

func (_c *RequestCallback_Execute_Call) Run(run func(req *http.Request)) *RequestCallback_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *RequestCallback_Execute_Call) Return() *RequestCallback_Execute_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewRequestCallback interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestCallback creates a new instance of RequestCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestCallback(t mockConstructorTestingTNewRequestCallback) *RequestCallback {
	mock := &RequestCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
