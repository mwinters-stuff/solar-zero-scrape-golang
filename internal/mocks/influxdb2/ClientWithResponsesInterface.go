// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	domain "github.com/influxdata/influxdb-client-go/v2/domain"

	mock "github.com/stretchr/testify/mock"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

type ClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientWithResponsesInterface) EXPECT() *ClientWithResponsesInterface_Expecter {
	return &ClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// ApplyTemplateWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body
func (_m *ClientWithResponsesInterface) ApplyTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*domain.ApplyTemplateResponse, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *domain.ApplyTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *domain.ApplyTemplateResponse); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ApplyTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_ApplyTemplateWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyTemplateWithBodyWithResponse'
type ClientWithResponsesInterface_ApplyTemplateWithBodyWithResponse_Call struct {
	*mock.Call
}

// ApplyTemplateWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) ApplyTemplateWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_ApplyTemplateWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_ApplyTemplateWithBodyWithResponse_Call{Call: _e.mock.On("ApplyTemplateWithBodyWithResponse", ctx, contentType, body)}
}

func (_c *ClientWithResponsesInterface_ApplyTemplateWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientWithResponsesInterface_ApplyTemplateWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_ApplyTemplateWithBodyWithResponse_Call) Return(_a0 *domain.ApplyTemplateResponse, _a1 error) *ClientWithResponsesInterface_ApplyTemplateWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ApplyTemplateWithResponse provides a mock function with given fields: ctx, body
func (_m *ClientWithResponsesInterface) ApplyTemplateWithResponse(ctx context.Context, body domain.ApplyTemplateJSONRequestBody) (*domain.ApplyTemplateResponse, error) {
	ret := _m.Called(ctx, body)

	var r0 *domain.ApplyTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.ApplyTemplateJSONRequestBody) *domain.ApplyTemplateResponse); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ApplyTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ApplyTemplateJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_ApplyTemplateWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyTemplateWithResponse'
type ClientWithResponsesInterface_ApplyTemplateWithResponse_Call struct {
	*mock.Call
}

// ApplyTemplateWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.ApplyTemplateJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) ApplyTemplateWithResponse(ctx interface{}, body interface{}) *ClientWithResponsesInterface_ApplyTemplateWithResponse_Call {
	return &ClientWithResponsesInterface_ApplyTemplateWithResponse_Call{Call: _e.mock.On("ApplyTemplateWithResponse", ctx, body)}
}

func (_c *ClientWithResponsesInterface_ApplyTemplateWithResponse_Call) Run(run func(ctx context.Context, body domain.ApplyTemplateJSONRequestBody)) *ClientWithResponsesInterface_ApplyTemplateWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ApplyTemplateJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_ApplyTemplateWithResponse_Call) Return(_a0 *domain.ApplyTemplateResponse, _a1 error) *ClientWithResponsesInterface_ApplyTemplateWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateCheckWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body
func (_m *ClientWithResponsesInterface) CreateCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*domain.CreateCheckResponse, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *domain.CreateCheckResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *domain.CreateCheckResponse); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateCheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_CreateCheckWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheckWithBodyWithResponse'
type ClientWithResponsesInterface_CreateCheckWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateCheckWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) CreateCheckWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_CreateCheckWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_CreateCheckWithBodyWithResponse_Call{Call: _e.mock.On("CreateCheckWithBodyWithResponse", ctx, contentType, body)}
}

func (_c *ClientWithResponsesInterface_CreateCheckWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientWithResponsesInterface_CreateCheckWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_CreateCheckWithBodyWithResponse_Call) Return(_a0 *domain.CreateCheckResponse, _a1 error) *ClientWithResponsesInterface_CreateCheckWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateCheckWithResponse provides a mock function with given fields: ctx, body
func (_m *ClientWithResponsesInterface) CreateCheckWithResponse(ctx context.Context, body domain.CreateCheckJSONRequestBody) (*domain.CreateCheckResponse, error) {
	ret := _m.Called(ctx, body)

	var r0 *domain.CreateCheckResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCheckJSONRequestBody) *domain.CreateCheckResponse); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateCheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateCheckJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_CreateCheckWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheckWithResponse'
type ClientWithResponsesInterface_CreateCheckWithResponse_Call struct {
	*mock.Call
}

// CreateCheckWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.CreateCheckJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) CreateCheckWithResponse(ctx interface{}, body interface{}) *ClientWithResponsesInterface_CreateCheckWithResponse_Call {
	return &ClientWithResponsesInterface_CreateCheckWithResponse_Call{Call: _e.mock.On("CreateCheckWithResponse", ctx, body)}
}

func (_c *ClientWithResponsesInterface_CreateCheckWithResponse_Call) Run(run func(ctx context.Context, body domain.CreateCheckJSONRequestBody)) *ClientWithResponsesInterface_CreateCheckWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateCheckJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_CreateCheckWithResponse_Call) Return(_a0 *domain.CreateCheckResponse, _a1 error) *ClientWithResponsesInterface_CreateCheckWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateNotificationEndpointWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body
func (_m *ClientWithResponsesInterface) CreateNotificationEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*domain.CreateNotificationEndpointResponse, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *domain.CreateNotificationEndpointResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *domain.CreateNotificationEndpointResponse); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateNotificationEndpointResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_CreateNotificationEndpointWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationEndpointWithBodyWithResponse'
type ClientWithResponsesInterface_CreateNotificationEndpointWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateNotificationEndpointWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) CreateNotificationEndpointWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_CreateNotificationEndpointWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_CreateNotificationEndpointWithBodyWithResponse_Call{Call: _e.mock.On("CreateNotificationEndpointWithBodyWithResponse", ctx, contentType, body)}
}

func (_c *ClientWithResponsesInterface_CreateNotificationEndpointWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientWithResponsesInterface_CreateNotificationEndpointWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_CreateNotificationEndpointWithBodyWithResponse_Call) Return(_a0 *domain.CreateNotificationEndpointResponse, _a1 error) *ClientWithResponsesInterface_CreateNotificationEndpointWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateNotificationEndpointWithResponse provides a mock function with given fields: ctx, body
func (_m *ClientWithResponsesInterface) CreateNotificationEndpointWithResponse(ctx context.Context, body domain.CreateNotificationEndpointJSONRequestBody) (*domain.CreateNotificationEndpointResponse, error) {
	ret := _m.Called(ctx, body)

	var r0 *domain.CreateNotificationEndpointResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateNotificationEndpointJSONRequestBody) *domain.CreateNotificationEndpointResponse); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateNotificationEndpointResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateNotificationEndpointJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_CreateNotificationEndpointWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationEndpointWithResponse'
type ClientWithResponsesInterface_CreateNotificationEndpointWithResponse_Call struct {
	*mock.Call
}

// CreateNotificationEndpointWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.CreateNotificationEndpointJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) CreateNotificationEndpointWithResponse(ctx interface{}, body interface{}) *ClientWithResponsesInterface_CreateNotificationEndpointWithResponse_Call {
	return &ClientWithResponsesInterface_CreateNotificationEndpointWithResponse_Call{Call: _e.mock.On("CreateNotificationEndpointWithResponse", ctx, body)}
}

func (_c *ClientWithResponsesInterface_CreateNotificationEndpointWithResponse_Call) Run(run func(ctx context.Context, body domain.CreateNotificationEndpointJSONRequestBody)) *ClientWithResponsesInterface_CreateNotificationEndpointWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateNotificationEndpointJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_CreateNotificationEndpointWithResponse_Call) Return(_a0 *domain.CreateNotificationEndpointResponse, _a1 error) *ClientWithResponsesInterface_CreateNotificationEndpointWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateNotificationRuleWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body
func (_m *ClientWithResponsesInterface) CreateNotificationRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*domain.CreateNotificationRuleResponse, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *domain.CreateNotificationRuleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *domain.CreateNotificationRuleResponse); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateNotificationRuleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_CreateNotificationRuleWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationRuleWithBodyWithResponse'
type ClientWithResponsesInterface_CreateNotificationRuleWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateNotificationRuleWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) CreateNotificationRuleWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_CreateNotificationRuleWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_CreateNotificationRuleWithBodyWithResponse_Call{Call: _e.mock.On("CreateNotificationRuleWithBodyWithResponse", ctx, contentType, body)}
}

func (_c *ClientWithResponsesInterface_CreateNotificationRuleWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientWithResponsesInterface_CreateNotificationRuleWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_CreateNotificationRuleWithBodyWithResponse_Call) Return(_a0 *domain.CreateNotificationRuleResponse, _a1 error) *ClientWithResponsesInterface_CreateNotificationRuleWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateNotificationRuleWithResponse provides a mock function with given fields: ctx, body
func (_m *ClientWithResponsesInterface) CreateNotificationRuleWithResponse(ctx context.Context, body domain.CreateNotificationRuleJSONRequestBody) (*domain.CreateNotificationRuleResponse, error) {
	ret := _m.Called(ctx, body)

	var r0 *domain.CreateNotificationRuleResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateNotificationRuleJSONRequestBody) *domain.CreateNotificationRuleResponse); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateNotificationRuleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateNotificationRuleJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_CreateNotificationRuleWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationRuleWithResponse'
type ClientWithResponsesInterface_CreateNotificationRuleWithResponse_Call struct {
	*mock.Call
}

// CreateNotificationRuleWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.CreateNotificationRuleJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) CreateNotificationRuleWithResponse(ctx interface{}, body interface{}) *ClientWithResponsesInterface_CreateNotificationRuleWithResponse_Call {
	return &ClientWithResponsesInterface_CreateNotificationRuleWithResponse_Call{Call: _e.mock.On("CreateNotificationRuleWithResponse", ctx, body)}
}

func (_c *ClientWithResponsesInterface_CreateNotificationRuleWithResponse_Call) Run(run func(ctx context.Context, body domain.CreateNotificationRuleJSONRequestBody)) *ClientWithResponsesInterface_CreateNotificationRuleWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateNotificationRuleJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_CreateNotificationRuleWithResponse_Call) Return(_a0 *domain.CreateNotificationRuleResponse, _a1 error) *ClientWithResponsesInterface_CreateNotificationRuleWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateStackWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body
func (_m *ClientWithResponsesInterface) CreateStackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*domain.CreateStackResponse, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *domain.CreateStackResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *domain.CreateStackResponse); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateStackResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_CreateStackWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStackWithBodyWithResponse'
type ClientWithResponsesInterface_CreateStackWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateStackWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) CreateStackWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_CreateStackWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_CreateStackWithBodyWithResponse_Call{Call: _e.mock.On("CreateStackWithBodyWithResponse", ctx, contentType, body)}
}

func (_c *ClientWithResponsesInterface_CreateStackWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientWithResponsesInterface_CreateStackWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_CreateStackWithBodyWithResponse_Call) Return(_a0 *domain.CreateStackResponse, _a1 error) *ClientWithResponsesInterface_CreateStackWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateStackWithResponse provides a mock function with given fields: ctx, body
func (_m *ClientWithResponsesInterface) CreateStackWithResponse(ctx context.Context, body domain.CreateStackJSONRequestBody) (*domain.CreateStackResponse, error) {
	ret := _m.Called(ctx, body)

	var r0 *domain.CreateStackResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateStackJSONRequestBody) *domain.CreateStackResponse); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateStackResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CreateStackJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_CreateStackWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStackWithResponse'
type ClientWithResponsesInterface_CreateStackWithResponse_Call struct {
	*mock.Call
}

// CreateStackWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.CreateStackJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) CreateStackWithResponse(ctx interface{}, body interface{}) *ClientWithResponsesInterface_CreateStackWithResponse_Call {
	return &ClientWithResponsesInterface_CreateStackWithResponse_Call{Call: _e.mock.On("CreateStackWithResponse", ctx, body)}
}

func (_c *ClientWithResponsesInterface_CreateStackWithResponse_Call) Run(run func(ctx context.Context, body domain.CreateStackJSONRequestBody)) *ClientWithResponsesInterface_CreateStackWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateStackJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_CreateStackWithResponse_Call) Return(_a0 *domain.CreateStackResponse, _a1 error) *ClientWithResponsesInterface_CreateStackWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteAuthorizationsIDWithResponse provides a mock function with given fields: ctx, authID, params
func (_m *ClientWithResponsesInterface) DeleteAuthorizationsIDWithResponse(ctx context.Context, authID string, params *domain.DeleteAuthorizationsIDParams) (*domain.DeleteAuthorizationsIDResponse, error) {
	ret := _m.Called(ctx, authID, params)

	var r0 *domain.DeleteAuthorizationsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteAuthorizationsIDParams) *domain.DeleteAuthorizationsIDResponse); ok {
		r0 = rf(ctx, authID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteAuthorizationsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteAuthorizationsIDParams) error); ok {
		r1 = rf(ctx, authID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteAuthorizationsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthorizationsIDWithResponse'
type ClientWithResponsesInterface_DeleteAuthorizationsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteAuthorizationsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.DeleteAuthorizationsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteAuthorizationsIDWithResponse(ctx interface{}, authID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteAuthorizationsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteAuthorizationsIDWithResponse_Call{Call: _e.mock.On("DeleteAuthorizationsIDWithResponse", ctx, authID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteAuthorizationsIDWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.DeleteAuthorizationsIDParams)) *ClientWithResponsesInterface_DeleteAuthorizationsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteAuthorizationsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteAuthorizationsIDWithResponse_Call) Return(_a0 *domain.DeleteAuthorizationsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteAuthorizationsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteBucketsIDLabelsIDWithResponse provides a mock function with given fields: ctx, bucketID, labelID, params
func (_m *ClientWithResponsesInterface) DeleteBucketsIDLabelsIDWithResponse(ctx context.Context, bucketID string, labelID string, params *domain.DeleteBucketsIDLabelsIDParams) (*domain.DeleteBucketsIDLabelsIDResponse, error) {
	ret := _m.Called(ctx, bucketID, labelID, params)

	var r0 *domain.DeleteBucketsIDLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteBucketsIDLabelsIDParams) *domain.DeleteBucketsIDLabelsIDResponse); ok {
		r0 = rf(ctx, bucketID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteBucketsIDLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteBucketsIDLabelsIDParams) error); ok {
		r1 = rf(ctx, bucketID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteBucketsIDLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucketsIDLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteBucketsIDLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteBucketsIDLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - labelID string
//  - params *domain.DeleteBucketsIDLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteBucketsIDLabelsIDWithResponse(ctx interface{}, bucketID interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteBucketsIDLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteBucketsIDLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteBucketsIDLabelsIDWithResponse", ctx, bucketID, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteBucketsIDLabelsIDWithResponse_Call) Run(run func(ctx context.Context, bucketID string, labelID string, params *domain.DeleteBucketsIDLabelsIDParams)) *ClientWithResponsesInterface_DeleteBucketsIDLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteBucketsIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteBucketsIDLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteBucketsIDLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteBucketsIDLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteBucketsIDMembersIDWithResponse provides a mock function with given fields: ctx, bucketID, userID, params
func (_m *ClientWithResponsesInterface) DeleteBucketsIDMembersIDWithResponse(ctx context.Context, bucketID string, userID string, params *domain.DeleteBucketsIDMembersIDParams) (*domain.DeleteBucketsIDMembersIDResponse, error) {
	ret := _m.Called(ctx, bucketID, userID, params)

	var r0 *domain.DeleteBucketsIDMembersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteBucketsIDMembersIDParams) *domain.DeleteBucketsIDMembersIDResponse); ok {
		r0 = rf(ctx, bucketID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteBucketsIDMembersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteBucketsIDMembersIDParams) error); ok {
		r1 = rf(ctx, bucketID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteBucketsIDMembersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucketsIDMembersIDWithResponse'
type ClientWithResponsesInterface_DeleteBucketsIDMembersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteBucketsIDMembersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - userID string
//  - params *domain.DeleteBucketsIDMembersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteBucketsIDMembersIDWithResponse(ctx interface{}, bucketID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteBucketsIDMembersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteBucketsIDMembersIDWithResponse_Call{Call: _e.mock.On("DeleteBucketsIDMembersIDWithResponse", ctx, bucketID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteBucketsIDMembersIDWithResponse_Call) Run(run func(ctx context.Context, bucketID string, userID string, params *domain.DeleteBucketsIDMembersIDParams)) *ClientWithResponsesInterface_DeleteBucketsIDMembersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteBucketsIDMembersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteBucketsIDMembersIDWithResponse_Call) Return(_a0 *domain.DeleteBucketsIDMembersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteBucketsIDMembersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteBucketsIDOwnersIDWithResponse provides a mock function with given fields: ctx, bucketID, userID, params
func (_m *ClientWithResponsesInterface) DeleteBucketsIDOwnersIDWithResponse(ctx context.Context, bucketID string, userID string, params *domain.DeleteBucketsIDOwnersIDParams) (*domain.DeleteBucketsIDOwnersIDResponse, error) {
	ret := _m.Called(ctx, bucketID, userID, params)

	var r0 *domain.DeleteBucketsIDOwnersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteBucketsIDOwnersIDParams) *domain.DeleteBucketsIDOwnersIDResponse); ok {
		r0 = rf(ctx, bucketID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteBucketsIDOwnersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteBucketsIDOwnersIDParams) error); ok {
		r1 = rf(ctx, bucketID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteBucketsIDOwnersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucketsIDOwnersIDWithResponse'
type ClientWithResponsesInterface_DeleteBucketsIDOwnersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteBucketsIDOwnersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - userID string
//  - params *domain.DeleteBucketsIDOwnersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteBucketsIDOwnersIDWithResponse(ctx interface{}, bucketID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteBucketsIDOwnersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteBucketsIDOwnersIDWithResponse_Call{Call: _e.mock.On("DeleteBucketsIDOwnersIDWithResponse", ctx, bucketID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteBucketsIDOwnersIDWithResponse_Call) Run(run func(ctx context.Context, bucketID string, userID string, params *domain.DeleteBucketsIDOwnersIDParams)) *ClientWithResponsesInterface_DeleteBucketsIDOwnersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteBucketsIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteBucketsIDOwnersIDWithResponse_Call) Return(_a0 *domain.DeleteBucketsIDOwnersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteBucketsIDOwnersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteBucketsIDWithResponse provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientWithResponsesInterface) DeleteBucketsIDWithResponse(ctx context.Context, bucketID string, params *domain.DeleteBucketsIDParams) (*domain.DeleteBucketsIDResponse, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *domain.DeleteBucketsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteBucketsIDParams) *domain.DeleteBucketsIDResponse); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteBucketsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteBucketsIDParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteBucketsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucketsIDWithResponse'
type ClientWithResponsesInterface_DeleteBucketsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteBucketsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.DeleteBucketsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteBucketsIDWithResponse(ctx interface{}, bucketID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteBucketsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteBucketsIDWithResponse_Call{Call: _e.mock.On("DeleteBucketsIDWithResponse", ctx, bucketID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteBucketsIDWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.DeleteBucketsIDParams)) *ClientWithResponsesInterface_DeleteBucketsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteBucketsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteBucketsIDWithResponse_Call) Return(_a0 *domain.DeleteBucketsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteBucketsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteChecksIDLabelsIDWithResponse provides a mock function with given fields: ctx, checkID, labelID, params
func (_m *ClientWithResponsesInterface) DeleteChecksIDLabelsIDWithResponse(ctx context.Context, checkID string, labelID string, params *domain.DeleteChecksIDLabelsIDParams) (*domain.DeleteChecksIDLabelsIDResponse, error) {
	ret := _m.Called(ctx, checkID, labelID, params)

	var r0 *domain.DeleteChecksIDLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteChecksIDLabelsIDParams) *domain.DeleteChecksIDLabelsIDResponse); ok {
		r0 = rf(ctx, checkID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteChecksIDLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteChecksIDLabelsIDParams) error); ok {
		r1 = rf(ctx, checkID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteChecksIDLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChecksIDLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteChecksIDLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteChecksIDLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - labelID string
//  - params *domain.DeleteChecksIDLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteChecksIDLabelsIDWithResponse(ctx interface{}, checkID interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteChecksIDLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteChecksIDLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteChecksIDLabelsIDWithResponse", ctx, checkID, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteChecksIDLabelsIDWithResponse_Call) Run(run func(ctx context.Context, checkID string, labelID string, params *domain.DeleteChecksIDLabelsIDParams)) *ClientWithResponsesInterface_DeleteChecksIDLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteChecksIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteChecksIDLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteChecksIDLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteChecksIDLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteChecksIDWithResponse provides a mock function with given fields: ctx, checkID, params
func (_m *ClientWithResponsesInterface) DeleteChecksIDWithResponse(ctx context.Context, checkID string, params *domain.DeleteChecksIDParams) (*domain.DeleteChecksIDResponse, error) {
	ret := _m.Called(ctx, checkID, params)

	var r0 *domain.DeleteChecksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteChecksIDParams) *domain.DeleteChecksIDResponse); ok {
		r0 = rf(ctx, checkID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteChecksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteChecksIDParams) error); ok {
		r1 = rf(ctx, checkID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteChecksIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChecksIDWithResponse'
type ClientWithResponsesInterface_DeleteChecksIDWithResponse_Call struct {
	*mock.Call
}

// DeleteChecksIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.DeleteChecksIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteChecksIDWithResponse(ctx interface{}, checkID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteChecksIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteChecksIDWithResponse_Call{Call: _e.mock.On("DeleteChecksIDWithResponse", ctx, checkID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteChecksIDWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.DeleteChecksIDParams)) *ClientWithResponsesInterface_DeleteChecksIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteChecksIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteChecksIDWithResponse_Call) Return(_a0 *domain.DeleteChecksIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteChecksIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDBRPIDWithResponse provides a mock function with given fields: ctx, dbrpID, params
func (_m *ClientWithResponsesInterface) DeleteDBRPIDWithResponse(ctx context.Context, dbrpID string, params *domain.DeleteDBRPIDParams) (*domain.DeleteDBRPIDResponse, error) {
	ret := _m.Called(ctx, dbrpID, params)

	var r0 *domain.DeleteDBRPIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteDBRPIDParams) *domain.DeleteDBRPIDResponse); ok {
		r0 = rf(ctx, dbrpID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteDBRPIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteDBRPIDParams) error); ok {
		r1 = rf(ctx, dbrpID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteDBRPIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDBRPIDWithResponse'
type ClientWithResponsesInterface_DeleteDBRPIDWithResponse_Call struct {
	*mock.Call
}

// DeleteDBRPIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dbrpID string
//  - params *domain.DeleteDBRPIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteDBRPIDWithResponse(ctx interface{}, dbrpID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteDBRPIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteDBRPIDWithResponse_Call{Call: _e.mock.On("DeleteDBRPIDWithResponse", ctx, dbrpID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteDBRPIDWithResponse_Call) Run(run func(ctx context.Context, dbrpID string, params *domain.DeleteDBRPIDParams)) *ClientWithResponsesInterface_DeleteDBRPIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteDBRPIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteDBRPIDWithResponse_Call) Return(_a0 *domain.DeleteDBRPIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteDBRPIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsIDCellsIDWithResponse provides a mock function with given fields: ctx, dashboardID, cellID, params
func (_m *ClientWithResponsesInterface) DeleteDashboardsIDCellsIDWithResponse(ctx context.Context, dashboardID string, cellID string, params *domain.DeleteDashboardsIDCellsIDParams) (*domain.DeleteDashboardsIDCellsIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params)

	var r0 *domain.DeleteDashboardsIDCellsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteDashboardsIDCellsIDParams) *domain.DeleteDashboardsIDCellsIDResponse); ok {
		r0 = rf(ctx, dashboardID, cellID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteDashboardsIDCellsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteDashboardsIDCellsIDParams) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteDashboardsIDCellsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsIDCellsIDWithResponse'
type ClientWithResponsesInterface_DeleteDashboardsIDCellsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteDashboardsIDCellsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.DeleteDashboardsIDCellsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteDashboardsIDCellsIDWithResponse(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteDashboardsIDCellsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteDashboardsIDCellsIDWithResponse_Call{Call: _e.mock.On("DeleteDashboardsIDCellsIDWithResponse", ctx, dashboardID, cellID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDCellsIDWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.DeleteDashboardsIDCellsIDParams)) *ClientWithResponsesInterface_DeleteDashboardsIDCellsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteDashboardsIDCellsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDCellsIDWithResponse_Call) Return(_a0 *domain.DeleteDashboardsIDCellsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteDashboardsIDCellsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsIDLabelsIDWithResponse provides a mock function with given fields: ctx, dashboardID, labelID, params
func (_m *ClientWithResponsesInterface) DeleteDashboardsIDLabelsIDWithResponse(ctx context.Context, dashboardID string, labelID string, params *domain.DeleteDashboardsIDLabelsIDParams) (*domain.DeleteDashboardsIDLabelsIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, labelID, params)

	var r0 *domain.DeleteDashboardsIDLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteDashboardsIDLabelsIDParams) *domain.DeleteDashboardsIDLabelsIDResponse); ok {
		r0 = rf(ctx, dashboardID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteDashboardsIDLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteDashboardsIDLabelsIDParams) error); ok {
		r1 = rf(ctx, dashboardID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteDashboardsIDLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsIDLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteDashboardsIDLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteDashboardsIDLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - labelID string
//  - params *domain.DeleteDashboardsIDLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteDashboardsIDLabelsIDWithResponse(ctx interface{}, dashboardID interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteDashboardsIDLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteDashboardsIDLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteDashboardsIDLabelsIDWithResponse", ctx, dashboardID, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDLabelsIDWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, labelID string, params *domain.DeleteDashboardsIDLabelsIDParams)) *ClientWithResponsesInterface_DeleteDashboardsIDLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteDashboardsIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteDashboardsIDLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteDashboardsIDLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsIDMembersIDWithResponse provides a mock function with given fields: ctx, dashboardID, userID, params
func (_m *ClientWithResponsesInterface) DeleteDashboardsIDMembersIDWithResponse(ctx context.Context, dashboardID string, userID string, params *domain.DeleteDashboardsIDMembersIDParams) (*domain.DeleteDashboardsIDMembersIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, userID, params)

	var r0 *domain.DeleteDashboardsIDMembersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteDashboardsIDMembersIDParams) *domain.DeleteDashboardsIDMembersIDResponse); ok {
		r0 = rf(ctx, dashboardID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteDashboardsIDMembersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteDashboardsIDMembersIDParams) error); ok {
		r1 = rf(ctx, dashboardID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteDashboardsIDMembersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsIDMembersIDWithResponse'
type ClientWithResponsesInterface_DeleteDashboardsIDMembersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteDashboardsIDMembersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - userID string
//  - params *domain.DeleteDashboardsIDMembersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteDashboardsIDMembersIDWithResponse(ctx interface{}, dashboardID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteDashboardsIDMembersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteDashboardsIDMembersIDWithResponse_Call{Call: _e.mock.On("DeleteDashboardsIDMembersIDWithResponse", ctx, dashboardID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDMembersIDWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, userID string, params *domain.DeleteDashboardsIDMembersIDParams)) *ClientWithResponsesInterface_DeleteDashboardsIDMembersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteDashboardsIDMembersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDMembersIDWithResponse_Call) Return(_a0 *domain.DeleteDashboardsIDMembersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteDashboardsIDMembersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsIDOwnersIDWithResponse provides a mock function with given fields: ctx, dashboardID, userID, params
func (_m *ClientWithResponsesInterface) DeleteDashboardsIDOwnersIDWithResponse(ctx context.Context, dashboardID string, userID string, params *domain.DeleteDashboardsIDOwnersIDParams) (*domain.DeleteDashboardsIDOwnersIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, userID, params)

	var r0 *domain.DeleteDashboardsIDOwnersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteDashboardsIDOwnersIDParams) *domain.DeleteDashboardsIDOwnersIDResponse); ok {
		r0 = rf(ctx, dashboardID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteDashboardsIDOwnersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteDashboardsIDOwnersIDParams) error); ok {
		r1 = rf(ctx, dashboardID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteDashboardsIDOwnersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsIDOwnersIDWithResponse'
type ClientWithResponsesInterface_DeleteDashboardsIDOwnersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteDashboardsIDOwnersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - userID string
//  - params *domain.DeleteDashboardsIDOwnersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteDashboardsIDOwnersIDWithResponse(ctx interface{}, dashboardID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteDashboardsIDOwnersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteDashboardsIDOwnersIDWithResponse_Call{Call: _e.mock.On("DeleteDashboardsIDOwnersIDWithResponse", ctx, dashboardID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDOwnersIDWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, userID string, params *domain.DeleteDashboardsIDOwnersIDParams)) *ClientWithResponsesInterface_DeleteDashboardsIDOwnersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteDashboardsIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDOwnersIDWithResponse_Call) Return(_a0 *domain.DeleteDashboardsIDOwnersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteDashboardsIDOwnersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteDashboardsIDWithResponse provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientWithResponsesInterface) DeleteDashboardsIDWithResponse(ctx context.Context, dashboardID string, params *domain.DeleteDashboardsIDParams) (*domain.DeleteDashboardsIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *domain.DeleteDashboardsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteDashboardsIDParams) *domain.DeleteDashboardsIDResponse); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteDashboardsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteDashboardsIDParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteDashboardsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDashboardsIDWithResponse'
type ClientWithResponsesInterface_DeleteDashboardsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteDashboardsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.DeleteDashboardsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteDashboardsIDWithResponse(ctx interface{}, dashboardID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteDashboardsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteDashboardsIDWithResponse_Call{Call: _e.mock.On("DeleteDashboardsIDWithResponse", ctx, dashboardID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.DeleteDashboardsIDParams)) *ClientWithResponsesInterface_DeleteDashboardsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteDashboardsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteDashboardsIDWithResponse_Call) Return(_a0 *domain.DeleteDashboardsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteDashboardsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteLabelsIDWithResponse provides a mock function with given fields: ctx, labelID, params
func (_m *ClientWithResponsesInterface) DeleteLabelsIDWithResponse(ctx context.Context, labelID string, params *domain.DeleteLabelsIDParams) (*domain.DeleteLabelsIDResponse, error) {
	ret := _m.Called(ctx, labelID, params)

	var r0 *domain.DeleteLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteLabelsIDParams) *domain.DeleteLabelsIDResponse); ok {
		r0 = rf(ctx, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteLabelsIDParams) error); ok {
		r1 = rf(ctx, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
//  - params *domain.DeleteLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteLabelsIDWithResponse(ctx interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteLabelsIDWithResponse", ctx, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteLabelsIDWithResponse_Call) Run(run func(ctx context.Context, labelID string, params *domain.DeleteLabelsIDParams)) *ClientWithResponsesInterface_DeleteLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteLegacyAuthorizationsIDWithResponse provides a mock function with given fields: ctx, authID, params
func (_m *ClientWithResponsesInterface) DeleteLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *domain.DeleteLegacyAuthorizationsIDParams) (*domain.DeleteLegacyAuthorizationsIDResponse, error) {
	ret := _m.Called(ctx, authID, params)

	var r0 *domain.DeleteLegacyAuthorizationsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteLegacyAuthorizationsIDParams) *domain.DeleteLegacyAuthorizationsIDResponse); ok {
		r0 = rf(ctx, authID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteLegacyAuthorizationsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteLegacyAuthorizationsIDParams) error); ok {
		r1 = rf(ctx, authID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteLegacyAuthorizationsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLegacyAuthorizationsIDWithResponse'
type ClientWithResponsesInterface_DeleteLegacyAuthorizationsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteLegacyAuthorizationsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.DeleteLegacyAuthorizationsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteLegacyAuthorizationsIDWithResponse(ctx interface{}, authID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteLegacyAuthorizationsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteLegacyAuthorizationsIDWithResponse_Call{Call: _e.mock.On("DeleteLegacyAuthorizationsIDWithResponse", ctx, authID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteLegacyAuthorizationsIDWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.DeleteLegacyAuthorizationsIDParams)) *ClientWithResponsesInterface_DeleteLegacyAuthorizationsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteLegacyAuthorizationsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteLegacyAuthorizationsIDWithResponse_Call) Return(_a0 *domain.DeleteLegacyAuthorizationsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteLegacyAuthorizationsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteNotificationEndpointsIDLabelsIDWithResponse provides a mock function with given fields: ctx, endpointID, labelID, params
func (_m *ClientWithResponsesInterface) DeleteNotificationEndpointsIDLabelsIDWithResponse(ctx context.Context, endpointID string, labelID string, params *domain.DeleteNotificationEndpointsIDLabelsIDParams) (*domain.DeleteNotificationEndpointsIDLabelsIDResponse, error) {
	ret := _m.Called(ctx, endpointID, labelID, params)

	var r0 *domain.DeleteNotificationEndpointsIDLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteNotificationEndpointsIDLabelsIDParams) *domain.DeleteNotificationEndpointsIDLabelsIDResponse); ok {
		r0 = rf(ctx, endpointID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteNotificationEndpointsIDLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteNotificationEndpointsIDLabelsIDParams) error); ok {
		r1 = rf(ctx, endpointID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteNotificationEndpointsIDLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationEndpointsIDLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteNotificationEndpointsIDLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteNotificationEndpointsIDLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - labelID string
//  - params *domain.DeleteNotificationEndpointsIDLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteNotificationEndpointsIDLabelsIDWithResponse(ctx interface{}, endpointID interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteNotificationEndpointsIDLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteNotificationEndpointsIDLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteNotificationEndpointsIDLabelsIDWithResponse", ctx, endpointID, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteNotificationEndpointsIDLabelsIDWithResponse_Call) Run(run func(ctx context.Context, endpointID string, labelID string, params *domain.DeleteNotificationEndpointsIDLabelsIDParams)) *ClientWithResponsesInterface_DeleteNotificationEndpointsIDLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteNotificationEndpointsIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteNotificationEndpointsIDLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteNotificationEndpointsIDLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteNotificationEndpointsIDLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteNotificationEndpointsIDWithResponse provides a mock function with given fields: ctx, endpointID, params
func (_m *ClientWithResponsesInterface) DeleteNotificationEndpointsIDWithResponse(ctx context.Context, endpointID string, params *domain.DeleteNotificationEndpointsIDParams) (*domain.DeleteNotificationEndpointsIDResponse, error) {
	ret := _m.Called(ctx, endpointID, params)

	var r0 *domain.DeleteNotificationEndpointsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteNotificationEndpointsIDParams) *domain.DeleteNotificationEndpointsIDResponse); ok {
		r0 = rf(ctx, endpointID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteNotificationEndpointsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteNotificationEndpointsIDParams) error); ok {
		r1 = rf(ctx, endpointID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteNotificationEndpointsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationEndpointsIDWithResponse'
type ClientWithResponsesInterface_DeleteNotificationEndpointsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteNotificationEndpointsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.DeleteNotificationEndpointsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteNotificationEndpointsIDWithResponse(ctx interface{}, endpointID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteNotificationEndpointsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteNotificationEndpointsIDWithResponse_Call{Call: _e.mock.On("DeleteNotificationEndpointsIDWithResponse", ctx, endpointID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteNotificationEndpointsIDWithResponse_Call) Run(run func(ctx context.Context, endpointID string, params *domain.DeleteNotificationEndpointsIDParams)) *ClientWithResponsesInterface_DeleteNotificationEndpointsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteNotificationEndpointsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteNotificationEndpointsIDWithResponse_Call) Return(_a0 *domain.DeleteNotificationEndpointsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteNotificationEndpointsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteNotificationRulesIDLabelsIDWithResponse provides a mock function with given fields: ctx, ruleID, labelID, params
func (_m *ClientWithResponsesInterface) DeleteNotificationRulesIDLabelsIDWithResponse(ctx context.Context, ruleID string, labelID string, params *domain.DeleteNotificationRulesIDLabelsIDParams) (*domain.DeleteNotificationRulesIDLabelsIDResponse, error) {
	ret := _m.Called(ctx, ruleID, labelID, params)

	var r0 *domain.DeleteNotificationRulesIDLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteNotificationRulesIDLabelsIDParams) *domain.DeleteNotificationRulesIDLabelsIDResponse); ok {
		r0 = rf(ctx, ruleID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteNotificationRulesIDLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteNotificationRulesIDLabelsIDParams) error); ok {
		r1 = rf(ctx, ruleID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteNotificationRulesIDLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRulesIDLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteNotificationRulesIDLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteNotificationRulesIDLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - labelID string
//  - params *domain.DeleteNotificationRulesIDLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteNotificationRulesIDLabelsIDWithResponse(ctx interface{}, ruleID interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteNotificationRulesIDLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteNotificationRulesIDLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteNotificationRulesIDLabelsIDWithResponse", ctx, ruleID, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteNotificationRulesIDLabelsIDWithResponse_Call) Run(run func(ctx context.Context, ruleID string, labelID string, params *domain.DeleteNotificationRulesIDLabelsIDParams)) *ClientWithResponsesInterface_DeleteNotificationRulesIDLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteNotificationRulesIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteNotificationRulesIDLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteNotificationRulesIDLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteNotificationRulesIDLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteNotificationRulesIDWithResponse provides a mock function with given fields: ctx, ruleID, params
func (_m *ClientWithResponsesInterface) DeleteNotificationRulesIDWithResponse(ctx context.Context, ruleID string, params *domain.DeleteNotificationRulesIDParams) (*domain.DeleteNotificationRulesIDResponse, error) {
	ret := _m.Called(ctx, ruleID, params)

	var r0 *domain.DeleteNotificationRulesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteNotificationRulesIDParams) *domain.DeleteNotificationRulesIDResponse); ok {
		r0 = rf(ctx, ruleID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteNotificationRulesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteNotificationRulesIDParams) error); ok {
		r1 = rf(ctx, ruleID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteNotificationRulesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRulesIDWithResponse'
type ClientWithResponsesInterface_DeleteNotificationRulesIDWithResponse_Call struct {
	*mock.Call
}

// DeleteNotificationRulesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.DeleteNotificationRulesIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteNotificationRulesIDWithResponse(ctx interface{}, ruleID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteNotificationRulesIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteNotificationRulesIDWithResponse_Call{Call: _e.mock.On("DeleteNotificationRulesIDWithResponse", ctx, ruleID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteNotificationRulesIDWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.DeleteNotificationRulesIDParams)) *ClientWithResponsesInterface_DeleteNotificationRulesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteNotificationRulesIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteNotificationRulesIDWithResponse_Call) Return(_a0 *domain.DeleteNotificationRulesIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteNotificationRulesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteOrgsIDMembersIDWithResponse provides a mock function with given fields: ctx, orgID, userID, params
func (_m *ClientWithResponsesInterface) DeleteOrgsIDMembersIDWithResponse(ctx context.Context, orgID string, userID string, params *domain.DeleteOrgsIDMembersIDParams) (*domain.DeleteOrgsIDMembersIDResponse, error) {
	ret := _m.Called(ctx, orgID, userID, params)

	var r0 *domain.DeleteOrgsIDMembersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteOrgsIDMembersIDParams) *domain.DeleteOrgsIDMembersIDResponse); ok {
		r0 = rf(ctx, orgID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteOrgsIDMembersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteOrgsIDMembersIDParams) error); ok {
		r1 = rf(ctx, orgID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteOrgsIDMembersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsIDMembersIDWithResponse'
type ClientWithResponsesInterface_DeleteOrgsIDMembersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteOrgsIDMembersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - userID string
//  - params *domain.DeleteOrgsIDMembersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteOrgsIDMembersIDWithResponse(ctx interface{}, orgID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteOrgsIDMembersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteOrgsIDMembersIDWithResponse_Call{Call: _e.mock.On("DeleteOrgsIDMembersIDWithResponse", ctx, orgID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteOrgsIDMembersIDWithResponse_Call) Run(run func(ctx context.Context, orgID string, userID string, params *domain.DeleteOrgsIDMembersIDParams)) *ClientWithResponsesInterface_DeleteOrgsIDMembersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteOrgsIDMembersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteOrgsIDMembersIDWithResponse_Call) Return(_a0 *domain.DeleteOrgsIDMembersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteOrgsIDMembersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteOrgsIDOwnersIDWithResponse provides a mock function with given fields: ctx, orgID, userID, params
func (_m *ClientWithResponsesInterface) DeleteOrgsIDOwnersIDWithResponse(ctx context.Context, orgID string, userID string, params *domain.DeleteOrgsIDOwnersIDParams) (*domain.DeleteOrgsIDOwnersIDResponse, error) {
	ret := _m.Called(ctx, orgID, userID, params)

	var r0 *domain.DeleteOrgsIDOwnersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteOrgsIDOwnersIDParams) *domain.DeleteOrgsIDOwnersIDResponse); ok {
		r0 = rf(ctx, orgID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteOrgsIDOwnersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteOrgsIDOwnersIDParams) error); ok {
		r1 = rf(ctx, orgID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteOrgsIDOwnersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsIDOwnersIDWithResponse'
type ClientWithResponsesInterface_DeleteOrgsIDOwnersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteOrgsIDOwnersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - userID string
//  - params *domain.DeleteOrgsIDOwnersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteOrgsIDOwnersIDWithResponse(ctx interface{}, orgID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteOrgsIDOwnersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteOrgsIDOwnersIDWithResponse_Call{Call: _e.mock.On("DeleteOrgsIDOwnersIDWithResponse", ctx, orgID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteOrgsIDOwnersIDWithResponse_Call) Run(run func(ctx context.Context, orgID string, userID string, params *domain.DeleteOrgsIDOwnersIDParams)) *ClientWithResponsesInterface_DeleteOrgsIDOwnersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteOrgsIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteOrgsIDOwnersIDWithResponse_Call) Return(_a0 *domain.DeleteOrgsIDOwnersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteOrgsIDOwnersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteOrgsIDSecretsIDWithResponse provides a mock function with given fields: ctx, orgID, secretID, params
func (_m *ClientWithResponsesInterface) DeleteOrgsIDSecretsIDWithResponse(ctx context.Context, orgID string, secretID string, params *domain.DeleteOrgsIDSecretsIDParams) (*domain.DeleteOrgsIDSecretsIDResponse, error) {
	ret := _m.Called(ctx, orgID, secretID, params)

	var r0 *domain.DeleteOrgsIDSecretsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteOrgsIDSecretsIDParams) *domain.DeleteOrgsIDSecretsIDResponse); ok {
		r0 = rf(ctx, orgID, secretID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteOrgsIDSecretsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteOrgsIDSecretsIDParams) error); ok {
		r1 = rf(ctx, orgID, secretID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteOrgsIDSecretsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsIDSecretsIDWithResponse'
type ClientWithResponsesInterface_DeleteOrgsIDSecretsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteOrgsIDSecretsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - secretID string
//  - params *domain.DeleteOrgsIDSecretsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteOrgsIDSecretsIDWithResponse(ctx interface{}, orgID interface{}, secretID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteOrgsIDSecretsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteOrgsIDSecretsIDWithResponse_Call{Call: _e.mock.On("DeleteOrgsIDSecretsIDWithResponse", ctx, orgID, secretID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteOrgsIDSecretsIDWithResponse_Call) Run(run func(ctx context.Context, orgID string, secretID string, params *domain.DeleteOrgsIDSecretsIDParams)) *ClientWithResponsesInterface_DeleteOrgsIDSecretsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteOrgsIDSecretsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteOrgsIDSecretsIDWithResponse_Call) Return(_a0 *domain.DeleteOrgsIDSecretsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteOrgsIDSecretsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteOrgsIDWithResponse provides a mock function with given fields: ctx, orgID, params
func (_m *ClientWithResponsesInterface) DeleteOrgsIDWithResponse(ctx context.Context, orgID string, params *domain.DeleteOrgsIDParams) (*domain.DeleteOrgsIDResponse, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *domain.DeleteOrgsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteOrgsIDParams) *domain.DeleteOrgsIDResponse); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteOrgsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteOrgsIDParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteOrgsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsIDWithResponse'
type ClientWithResponsesInterface_DeleteOrgsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteOrgsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.DeleteOrgsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteOrgsIDWithResponse(ctx interface{}, orgID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteOrgsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteOrgsIDWithResponse_Call{Call: _e.mock.On("DeleteOrgsIDWithResponse", ctx, orgID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteOrgsIDWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.DeleteOrgsIDParams)) *ClientWithResponsesInterface_DeleteOrgsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteOrgsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteOrgsIDWithResponse_Call) Return(_a0 *domain.DeleteOrgsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteOrgsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteRemoteConnectionByIDWithResponse provides a mock function with given fields: ctx, remoteID, params
func (_m *ClientWithResponsesInterface) DeleteRemoteConnectionByIDWithResponse(ctx context.Context, remoteID string, params *domain.DeleteRemoteConnectionByIDParams) (*domain.DeleteRemoteConnectionByIDResponse, error) {
	ret := _m.Called(ctx, remoteID, params)

	var r0 *domain.DeleteRemoteConnectionByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteRemoteConnectionByIDParams) *domain.DeleteRemoteConnectionByIDResponse); ok {
		r0 = rf(ctx, remoteID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteRemoteConnectionByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteRemoteConnectionByIDParams) error); ok {
		r1 = rf(ctx, remoteID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteRemoteConnectionByIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRemoteConnectionByIDWithResponse'
type ClientWithResponsesInterface_DeleteRemoteConnectionByIDWithResponse_Call struct {
	*mock.Call
}

// DeleteRemoteConnectionByIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - remoteID string
//  - params *domain.DeleteRemoteConnectionByIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteRemoteConnectionByIDWithResponse(ctx interface{}, remoteID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteRemoteConnectionByIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteRemoteConnectionByIDWithResponse_Call{Call: _e.mock.On("DeleteRemoteConnectionByIDWithResponse", ctx, remoteID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteRemoteConnectionByIDWithResponse_Call) Run(run func(ctx context.Context, remoteID string, params *domain.DeleteRemoteConnectionByIDParams)) *ClientWithResponsesInterface_DeleteRemoteConnectionByIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteRemoteConnectionByIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteRemoteConnectionByIDWithResponse_Call) Return(_a0 *domain.DeleteRemoteConnectionByIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteRemoteConnectionByIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteReplicationByIDWithResponse provides a mock function with given fields: ctx, replicationID, params
func (_m *ClientWithResponsesInterface) DeleteReplicationByIDWithResponse(ctx context.Context, replicationID string, params *domain.DeleteReplicationByIDParams) (*domain.DeleteReplicationByIDResponse, error) {
	ret := _m.Called(ctx, replicationID, params)

	var r0 *domain.DeleteReplicationByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteReplicationByIDParams) *domain.DeleteReplicationByIDResponse); ok {
		r0 = rf(ctx, replicationID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteReplicationByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteReplicationByIDParams) error); ok {
		r1 = rf(ctx, replicationID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteReplicationByIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReplicationByIDWithResponse'
type ClientWithResponsesInterface_DeleteReplicationByIDWithResponse_Call struct {
	*mock.Call
}

// DeleteReplicationByIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.DeleteReplicationByIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteReplicationByIDWithResponse(ctx interface{}, replicationID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteReplicationByIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteReplicationByIDWithResponse_Call{Call: _e.mock.On("DeleteReplicationByIDWithResponse", ctx, replicationID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteReplicationByIDWithResponse_Call) Run(run func(ctx context.Context, replicationID string, params *domain.DeleteReplicationByIDParams)) *ClientWithResponsesInterface_DeleteReplicationByIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteReplicationByIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteReplicationByIDWithResponse_Call) Return(_a0 *domain.DeleteReplicationByIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteReplicationByIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteScrapersIDLabelsIDWithResponse provides a mock function with given fields: ctx, scraperTargetID, labelID, params
func (_m *ClientWithResponsesInterface) DeleteScrapersIDLabelsIDWithResponse(ctx context.Context, scraperTargetID string, labelID string, params *domain.DeleteScrapersIDLabelsIDParams) (*domain.DeleteScrapersIDLabelsIDResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, labelID, params)

	var r0 *domain.DeleteScrapersIDLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteScrapersIDLabelsIDParams) *domain.DeleteScrapersIDLabelsIDResponse); ok {
		r0 = rf(ctx, scraperTargetID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteScrapersIDLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteScrapersIDLabelsIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteScrapersIDLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScrapersIDLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteScrapersIDLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteScrapersIDLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - labelID string
//  - params *domain.DeleteScrapersIDLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteScrapersIDLabelsIDWithResponse(ctx interface{}, scraperTargetID interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteScrapersIDLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteScrapersIDLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteScrapersIDLabelsIDWithResponse", ctx, scraperTargetID, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteScrapersIDLabelsIDWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, labelID string, params *domain.DeleteScrapersIDLabelsIDParams)) *ClientWithResponsesInterface_DeleteScrapersIDLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteScrapersIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteScrapersIDLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteScrapersIDLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteScrapersIDLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteScrapersIDMembersIDWithResponse provides a mock function with given fields: ctx, scraperTargetID, userID, params
func (_m *ClientWithResponsesInterface) DeleteScrapersIDMembersIDWithResponse(ctx context.Context, scraperTargetID string, userID string, params *domain.DeleteScrapersIDMembersIDParams) (*domain.DeleteScrapersIDMembersIDResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, userID, params)

	var r0 *domain.DeleteScrapersIDMembersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteScrapersIDMembersIDParams) *domain.DeleteScrapersIDMembersIDResponse); ok {
		r0 = rf(ctx, scraperTargetID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteScrapersIDMembersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteScrapersIDMembersIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteScrapersIDMembersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScrapersIDMembersIDWithResponse'
type ClientWithResponsesInterface_DeleteScrapersIDMembersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteScrapersIDMembersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - userID string
//  - params *domain.DeleteScrapersIDMembersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteScrapersIDMembersIDWithResponse(ctx interface{}, scraperTargetID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteScrapersIDMembersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteScrapersIDMembersIDWithResponse_Call{Call: _e.mock.On("DeleteScrapersIDMembersIDWithResponse", ctx, scraperTargetID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteScrapersIDMembersIDWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, userID string, params *domain.DeleteScrapersIDMembersIDParams)) *ClientWithResponsesInterface_DeleteScrapersIDMembersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteScrapersIDMembersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteScrapersIDMembersIDWithResponse_Call) Return(_a0 *domain.DeleteScrapersIDMembersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteScrapersIDMembersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteScrapersIDOwnersIDWithResponse provides a mock function with given fields: ctx, scraperTargetID, userID, params
func (_m *ClientWithResponsesInterface) DeleteScrapersIDOwnersIDWithResponse(ctx context.Context, scraperTargetID string, userID string, params *domain.DeleteScrapersIDOwnersIDParams) (*domain.DeleteScrapersIDOwnersIDResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, userID, params)

	var r0 *domain.DeleteScrapersIDOwnersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteScrapersIDOwnersIDParams) *domain.DeleteScrapersIDOwnersIDResponse); ok {
		r0 = rf(ctx, scraperTargetID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteScrapersIDOwnersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteScrapersIDOwnersIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteScrapersIDOwnersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScrapersIDOwnersIDWithResponse'
type ClientWithResponsesInterface_DeleteScrapersIDOwnersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteScrapersIDOwnersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - userID string
//  - params *domain.DeleteScrapersIDOwnersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteScrapersIDOwnersIDWithResponse(ctx interface{}, scraperTargetID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteScrapersIDOwnersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteScrapersIDOwnersIDWithResponse_Call{Call: _e.mock.On("DeleteScrapersIDOwnersIDWithResponse", ctx, scraperTargetID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteScrapersIDOwnersIDWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, userID string, params *domain.DeleteScrapersIDOwnersIDParams)) *ClientWithResponsesInterface_DeleteScrapersIDOwnersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteScrapersIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteScrapersIDOwnersIDWithResponse_Call) Return(_a0 *domain.DeleteScrapersIDOwnersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteScrapersIDOwnersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteScrapersIDWithResponse provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientWithResponsesInterface) DeleteScrapersIDWithResponse(ctx context.Context, scraperTargetID string, params *domain.DeleteScrapersIDParams) (*domain.DeleteScrapersIDResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *domain.DeleteScrapersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteScrapersIDParams) *domain.DeleteScrapersIDResponse); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteScrapersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteScrapersIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteScrapersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScrapersIDWithResponse'
type ClientWithResponsesInterface_DeleteScrapersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteScrapersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.DeleteScrapersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteScrapersIDWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteScrapersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteScrapersIDWithResponse_Call{Call: _e.mock.On("DeleteScrapersIDWithResponse", ctx, scraperTargetID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteScrapersIDWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.DeleteScrapersIDParams)) *ClientWithResponsesInterface_DeleteScrapersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteScrapersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteScrapersIDWithResponse_Call) Return(_a0 *domain.DeleteScrapersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteScrapersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteSourcesIDWithResponse provides a mock function with given fields: ctx, sourceID, params
func (_m *ClientWithResponsesInterface) DeleteSourcesIDWithResponse(ctx context.Context, sourceID string, params *domain.DeleteSourcesIDParams) (*domain.DeleteSourcesIDResponse, error) {
	ret := _m.Called(ctx, sourceID, params)

	var r0 *domain.DeleteSourcesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteSourcesIDParams) *domain.DeleteSourcesIDResponse); ok {
		r0 = rf(ctx, sourceID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteSourcesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteSourcesIDParams) error); ok {
		r1 = rf(ctx, sourceID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteSourcesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSourcesIDWithResponse'
type ClientWithResponsesInterface_DeleteSourcesIDWithResponse_Call struct {
	*mock.Call
}

// DeleteSourcesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.DeleteSourcesIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteSourcesIDWithResponse(ctx interface{}, sourceID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteSourcesIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteSourcesIDWithResponse_Call{Call: _e.mock.On("DeleteSourcesIDWithResponse", ctx, sourceID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteSourcesIDWithResponse_Call) Run(run func(ctx context.Context, sourceID string, params *domain.DeleteSourcesIDParams)) *ClientWithResponsesInterface_DeleteSourcesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteSourcesIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteSourcesIDWithResponse_Call) Return(_a0 *domain.DeleteSourcesIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteSourcesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteStackWithResponse provides a mock function with given fields: ctx, stackId, params
func (_m *ClientWithResponsesInterface) DeleteStackWithResponse(ctx context.Context, stackId string, params *domain.DeleteStackParams) (*domain.DeleteStackResponse, error) {
	ret := _m.Called(ctx, stackId, params)

	var r0 *domain.DeleteStackResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteStackParams) *domain.DeleteStackResponse); ok {
		r0 = rf(ctx, stackId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteStackResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteStackParams) error); ok {
		r1 = rf(ctx, stackId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteStackWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStackWithResponse'
type ClientWithResponsesInterface_DeleteStackWithResponse_Call struct {
	*mock.Call
}

// DeleteStackWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
//  - params *domain.DeleteStackParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteStackWithResponse(ctx interface{}, stackId interface{}, params interface{}) *ClientWithResponsesInterface_DeleteStackWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteStackWithResponse_Call{Call: _e.mock.On("DeleteStackWithResponse", ctx, stackId, params)}
}

func (_c *ClientWithResponsesInterface_DeleteStackWithResponse_Call) Run(run func(ctx context.Context, stackId string, params *domain.DeleteStackParams)) *ClientWithResponsesInterface_DeleteStackWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteStackParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteStackWithResponse_Call) Return(_a0 *domain.DeleteStackResponse, _a1 error) *ClientWithResponsesInterface_DeleteStackWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksIDLabelsIDWithResponse provides a mock function with given fields: ctx, taskID, labelID, params
func (_m *ClientWithResponsesInterface) DeleteTasksIDLabelsIDWithResponse(ctx context.Context, taskID string, labelID string, params *domain.DeleteTasksIDLabelsIDParams) (*domain.DeleteTasksIDLabelsIDResponse, error) {
	ret := _m.Called(ctx, taskID, labelID, params)

	var r0 *domain.DeleteTasksIDLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTasksIDLabelsIDParams) *domain.DeleteTasksIDLabelsIDResponse); ok {
		r0 = rf(ctx, taskID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteTasksIDLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTasksIDLabelsIDParams) error); ok {
		r1 = rf(ctx, taskID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteTasksIDLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksIDLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteTasksIDLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteTasksIDLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - labelID string
//  - params *domain.DeleteTasksIDLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteTasksIDLabelsIDWithResponse(ctx interface{}, taskID interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteTasksIDLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteTasksIDLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteTasksIDLabelsIDWithResponse", ctx, taskID, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDLabelsIDWithResponse_Call) Run(run func(ctx context.Context, taskID string, labelID string, params *domain.DeleteTasksIDLabelsIDParams)) *ClientWithResponsesInterface_DeleteTasksIDLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTasksIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteTasksIDLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteTasksIDLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksIDMembersIDWithResponse provides a mock function with given fields: ctx, taskID, userID, params
func (_m *ClientWithResponsesInterface) DeleteTasksIDMembersIDWithResponse(ctx context.Context, taskID string, userID string, params *domain.DeleteTasksIDMembersIDParams) (*domain.DeleteTasksIDMembersIDResponse, error) {
	ret := _m.Called(ctx, taskID, userID, params)

	var r0 *domain.DeleteTasksIDMembersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTasksIDMembersIDParams) *domain.DeleteTasksIDMembersIDResponse); ok {
		r0 = rf(ctx, taskID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteTasksIDMembersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTasksIDMembersIDParams) error); ok {
		r1 = rf(ctx, taskID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteTasksIDMembersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksIDMembersIDWithResponse'
type ClientWithResponsesInterface_DeleteTasksIDMembersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteTasksIDMembersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - userID string
//  - params *domain.DeleteTasksIDMembersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteTasksIDMembersIDWithResponse(ctx interface{}, taskID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteTasksIDMembersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteTasksIDMembersIDWithResponse_Call{Call: _e.mock.On("DeleteTasksIDMembersIDWithResponse", ctx, taskID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDMembersIDWithResponse_Call) Run(run func(ctx context.Context, taskID string, userID string, params *domain.DeleteTasksIDMembersIDParams)) *ClientWithResponsesInterface_DeleteTasksIDMembersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTasksIDMembersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDMembersIDWithResponse_Call) Return(_a0 *domain.DeleteTasksIDMembersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteTasksIDMembersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksIDOwnersIDWithResponse provides a mock function with given fields: ctx, taskID, userID, params
func (_m *ClientWithResponsesInterface) DeleteTasksIDOwnersIDWithResponse(ctx context.Context, taskID string, userID string, params *domain.DeleteTasksIDOwnersIDParams) (*domain.DeleteTasksIDOwnersIDResponse, error) {
	ret := _m.Called(ctx, taskID, userID, params)

	var r0 *domain.DeleteTasksIDOwnersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTasksIDOwnersIDParams) *domain.DeleteTasksIDOwnersIDResponse); ok {
		r0 = rf(ctx, taskID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteTasksIDOwnersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTasksIDOwnersIDParams) error); ok {
		r1 = rf(ctx, taskID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteTasksIDOwnersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksIDOwnersIDWithResponse'
type ClientWithResponsesInterface_DeleteTasksIDOwnersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteTasksIDOwnersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - userID string
//  - params *domain.DeleteTasksIDOwnersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteTasksIDOwnersIDWithResponse(ctx interface{}, taskID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteTasksIDOwnersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteTasksIDOwnersIDWithResponse_Call{Call: _e.mock.On("DeleteTasksIDOwnersIDWithResponse", ctx, taskID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDOwnersIDWithResponse_Call) Run(run func(ctx context.Context, taskID string, userID string, params *domain.DeleteTasksIDOwnersIDParams)) *ClientWithResponsesInterface_DeleteTasksIDOwnersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTasksIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDOwnersIDWithResponse_Call) Return(_a0 *domain.DeleteTasksIDOwnersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteTasksIDOwnersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksIDRunsIDWithResponse provides a mock function with given fields: ctx, taskID, runID, params
func (_m *ClientWithResponsesInterface) DeleteTasksIDRunsIDWithResponse(ctx context.Context, taskID string, runID string, params *domain.DeleteTasksIDRunsIDParams) (*domain.DeleteTasksIDRunsIDResponse, error) {
	ret := _m.Called(ctx, taskID, runID, params)

	var r0 *domain.DeleteTasksIDRunsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTasksIDRunsIDParams) *domain.DeleteTasksIDRunsIDResponse); ok {
		r0 = rf(ctx, taskID, runID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteTasksIDRunsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTasksIDRunsIDParams) error); ok {
		r1 = rf(ctx, taskID, runID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteTasksIDRunsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksIDRunsIDWithResponse'
type ClientWithResponsesInterface_DeleteTasksIDRunsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteTasksIDRunsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
//  - params *domain.DeleteTasksIDRunsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteTasksIDRunsIDWithResponse(ctx interface{}, taskID interface{}, runID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteTasksIDRunsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteTasksIDRunsIDWithResponse_Call{Call: _e.mock.On("DeleteTasksIDRunsIDWithResponse", ctx, taskID, runID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDRunsIDWithResponse_Call) Run(run func(ctx context.Context, taskID string, runID string, params *domain.DeleteTasksIDRunsIDParams)) *ClientWithResponsesInterface_DeleteTasksIDRunsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTasksIDRunsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDRunsIDWithResponse_Call) Return(_a0 *domain.DeleteTasksIDRunsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteTasksIDRunsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTasksIDWithResponse provides a mock function with given fields: ctx, taskID, params
func (_m *ClientWithResponsesInterface) DeleteTasksIDWithResponse(ctx context.Context, taskID string, params *domain.DeleteTasksIDParams) (*domain.DeleteTasksIDResponse, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *domain.DeleteTasksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteTasksIDParams) *domain.DeleteTasksIDResponse); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteTasksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteTasksIDParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteTasksIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksIDWithResponse'
type ClientWithResponsesInterface_DeleteTasksIDWithResponse_Call struct {
	*mock.Call
}

// DeleteTasksIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.DeleteTasksIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteTasksIDWithResponse(ctx interface{}, taskID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteTasksIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteTasksIDWithResponse_Call{Call: _e.mock.On("DeleteTasksIDWithResponse", ctx, taskID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.DeleteTasksIDParams)) *ClientWithResponsesInterface_DeleteTasksIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteTasksIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteTasksIDWithResponse_Call) Return(_a0 *domain.DeleteTasksIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteTasksIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTelegrafsIDLabelsIDWithResponse provides a mock function with given fields: ctx, telegrafID, labelID, params
func (_m *ClientWithResponsesInterface) DeleteTelegrafsIDLabelsIDWithResponse(ctx context.Context, telegrafID string, labelID string, params *domain.DeleteTelegrafsIDLabelsIDParams) (*domain.DeleteTelegrafsIDLabelsIDResponse, error) {
	ret := _m.Called(ctx, telegrafID, labelID, params)

	var r0 *domain.DeleteTelegrafsIDLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTelegrafsIDLabelsIDParams) *domain.DeleteTelegrafsIDLabelsIDResponse); ok {
		r0 = rf(ctx, telegrafID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteTelegrafsIDLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTelegrafsIDLabelsIDParams) error); ok {
		r1 = rf(ctx, telegrafID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteTelegrafsIDLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTelegrafsIDLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteTelegrafsIDLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteTelegrafsIDLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - labelID string
//  - params *domain.DeleteTelegrafsIDLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteTelegrafsIDLabelsIDWithResponse(ctx interface{}, telegrafID interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteTelegrafsIDLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteTelegrafsIDLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteTelegrafsIDLabelsIDWithResponse", ctx, telegrafID, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteTelegrafsIDLabelsIDWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, labelID string, params *domain.DeleteTelegrafsIDLabelsIDParams)) *ClientWithResponsesInterface_DeleteTelegrafsIDLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTelegrafsIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteTelegrafsIDLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteTelegrafsIDLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteTelegrafsIDLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTelegrafsIDMembersIDWithResponse provides a mock function with given fields: ctx, telegrafID, userID, params
func (_m *ClientWithResponsesInterface) DeleteTelegrafsIDMembersIDWithResponse(ctx context.Context, telegrafID string, userID string, params *domain.DeleteTelegrafsIDMembersIDParams) (*domain.DeleteTelegrafsIDMembersIDResponse, error) {
	ret := _m.Called(ctx, telegrafID, userID, params)

	var r0 *domain.DeleteTelegrafsIDMembersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTelegrafsIDMembersIDParams) *domain.DeleteTelegrafsIDMembersIDResponse); ok {
		r0 = rf(ctx, telegrafID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteTelegrafsIDMembersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTelegrafsIDMembersIDParams) error); ok {
		r1 = rf(ctx, telegrafID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteTelegrafsIDMembersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTelegrafsIDMembersIDWithResponse'
type ClientWithResponsesInterface_DeleteTelegrafsIDMembersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteTelegrafsIDMembersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - userID string
//  - params *domain.DeleteTelegrafsIDMembersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteTelegrafsIDMembersIDWithResponse(ctx interface{}, telegrafID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteTelegrafsIDMembersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteTelegrafsIDMembersIDWithResponse_Call{Call: _e.mock.On("DeleteTelegrafsIDMembersIDWithResponse", ctx, telegrafID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteTelegrafsIDMembersIDWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, userID string, params *domain.DeleteTelegrafsIDMembersIDParams)) *ClientWithResponsesInterface_DeleteTelegrafsIDMembersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTelegrafsIDMembersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteTelegrafsIDMembersIDWithResponse_Call) Return(_a0 *domain.DeleteTelegrafsIDMembersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteTelegrafsIDMembersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTelegrafsIDOwnersIDWithResponse provides a mock function with given fields: ctx, telegrafID, userID, params
func (_m *ClientWithResponsesInterface) DeleteTelegrafsIDOwnersIDWithResponse(ctx context.Context, telegrafID string, userID string, params *domain.DeleteTelegrafsIDOwnersIDParams) (*domain.DeleteTelegrafsIDOwnersIDResponse, error) {
	ret := _m.Called(ctx, telegrafID, userID, params)

	var r0 *domain.DeleteTelegrafsIDOwnersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteTelegrafsIDOwnersIDParams) *domain.DeleteTelegrafsIDOwnersIDResponse); ok {
		r0 = rf(ctx, telegrafID, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteTelegrafsIDOwnersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteTelegrafsIDOwnersIDParams) error); ok {
		r1 = rf(ctx, telegrafID, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteTelegrafsIDOwnersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTelegrafsIDOwnersIDWithResponse'
type ClientWithResponsesInterface_DeleteTelegrafsIDOwnersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteTelegrafsIDOwnersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - userID string
//  - params *domain.DeleteTelegrafsIDOwnersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteTelegrafsIDOwnersIDWithResponse(ctx interface{}, telegrafID interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteTelegrafsIDOwnersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteTelegrafsIDOwnersIDWithResponse_Call{Call: _e.mock.On("DeleteTelegrafsIDOwnersIDWithResponse", ctx, telegrafID, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteTelegrafsIDOwnersIDWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, userID string, params *domain.DeleteTelegrafsIDOwnersIDParams)) *ClientWithResponsesInterface_DeleteTelegrafsIDOwnersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteTelegrafsIDOwnersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteTelegrafsIDOwnersIDWithResponse_Call) Return(_a0 *domain.DeleteTelegrafsIDOwnersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteTelegrafsIDOwnersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTelegrafsIDWithResponse provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientWithResponsesInterface) DeleteTelegrafsIDWithResponse(ctx context.Context, telegrafID string, params *domain.DeleteTelegrafsIDParams) (*domain.DeleteTelegrafsIDResponse, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *domain.DeleteTelegrafsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteTelegrafsIDParams) *domain.DeleteTelegrafsIDResponse); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteTelegrafsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteTelegrafsIDParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteTelegrafsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTelegrafsIDWithResponse'
type ClientWithResponsesInterface_DeleteTelegrafsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteTelegrafsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.DeleteTelegrafsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteTelegrafsIDWithResponse(ctx interface{}, telegrafID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteTelegrafsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteTelegrafsIDWithResponse_Call{Call: _e.mock.On("DeleteTelegrafsIDWithResponse", ctx, telegrafID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteTelegrafsIDWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.DeleteTelegrafsIDParams)) *ClientWithResponsesInterface_DeleteTelegrafsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteTelegrafsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteTelegrafsIDWithResponse_Call) Return(_a0 *domain.DeleteTelegrafsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteTelegrafsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteUsersIDWithResponse provides a mock function with given fields: ctx, userID, params
func (_m *ClientWithResponsesInterface) DeleteUsersIDWithResponse(ctx context.Context, userID string, params *domain.DeleteUsersIDParams) (*domain.DeleteUsersIDResponse, error) {
	ret := _m.Called(ctx, userID, params)

	var r0 *domain.DeleteUsersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteUsersIDParams) *domain.DeleteUsersIDResponse); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteUsersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteUsersIDParams) error); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteUsersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUsersIDWithResponse'
type ClientWithResponsesInterface_DeleteUsersIDWithResponse_Call struct {
	*mock.Call
}

// DeleteUsersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.DeleteUsersIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteUsersIDWithResponse(ctx interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteUsersIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteUsersIDWithResponse_Call{Call: _e.mock.On("DeleteUsersIDWithResponse", ctx, userID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteUsersIDWithResponse_Call) Run(run func(ctx context.Context, userID string, params *domain.DeleteUsersIDParams)) *ClientWithResponsesInterface_DeleteUsersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteUsersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteUsersIDWithResponse_Call) Return(_a0 *domain.DeleteUsersIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteUsersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteVariablesIDLabelsIDWithResponse provides a mock function with given fields: ctx, variableID, labelID, params
func (_m *ClientWithResponsesInterface) DeleteVariablesIDLabelsIDWithResponse(ctx context.Context, variableID string, labelID string, params *domain.DeleteVariablesIDLabelsIDParams) (*domain.DeleteVariablesIDLabelsIDResponse, error) {
	ret := _m.Called(ctx, variableID, labelID, params)

	var r0 *domain.DeleteVariablesIDLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DeleteVariablesIDLabelsIDParams) *domain.DeleteVariablesIDLabelsIDResponse); ok {
		r0 = rf(ctx, variableID, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteVariablesIDLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.DeleteVariablesIDLabelsIDParams) error); ok {
		r1 = rf(ctx, variableID, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteVariablesIDLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVariablesIDLabelsIDWithResponse'
type ClientWithResponsesInterface_DeleteVariablesIDLabelsIDWithResponse_Call struct {
	*mock.Call
}

// DeleteVariablesIDLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - labelID string
//  - params *domain.DeleteVariablesIDLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteVariablesIDLabelsIDWithResponse(ctx interface{}, variableID interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteVariablesIDLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteVariablesIDLabelsIDWithResponse_Call{Call: _e.mock.On("DeleteVariablesIDLabelsIDWithResponse", ctx, variableID, labelID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteVariablesIDLabelsIDWithResponse_Call) Run(run func(ctx context.Context, variableID string, labelID string, params *domain.DeleteVariablesIDLabelsIDParams)) *ClientWithResponsesInterface_DeleteVariablesIDLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.DeleteVariablesIDLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteVariablesIDLabelsIDWithResponse_Call) Return(_a0 *domain.DeleteVariablesIDLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteVariablesIDLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteVariablesIDWithResponse provides a mock function with given fields: ctx, variableID, params
func (_m *ClientWithResponsesInterface) DeleteVariablesIDWithResponse(ctx context.Context, variableID string, params *domain.DeleteVariablesIDParams) (*domain.DeleteVariablesIDResponse, error) {
	ret := _m.Called(ctx, variableID, params)

	var r0 *domain.DeleteVariablesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.DeleteVariablesIDParams) *domain.DeleteVariablesIDResponse); ok {
		r0 = rf(ctx, variableID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeleteVariablesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.DeleteVariablesIDParams) error); ok {
		r1 = rf(ctx, variableID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_DeleteVariablesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVariablesIDWithResponse'
type ClientWithResponsesInterface_DeleteVariablesIDWithResponse_Call struct {
	*mock.Call
}

// DeleteVariablesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.DeleteVariablesIDParams
func (_e *ClientWithResponsesInterface_Expecter) DeleteVariablesIDWithResponse(ctx interface{}, variableID interface{}, params interface{}) *ClientWithResponsesInterface_DeleteVariablesIDWithResponse_Call {
	return &ClientWithResponsesInterface_DeleteVariablesIDWithResponse_Call{Call: _e.mock.On("DeleteVariablesIDWithResponse", ctx, variableID, params)}
}

func (_c *ClientWithResponsesInterface_DeleteVariablesIDWithResponse_Call) Run(run func(ctx context.Context, variableID string, params *domain.DeleteVariablesIDParams)) *ClientWithResponsesInterface_DeleteVariablesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.DeleteVariablesIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_DeleteVariablesIDWithResponse_Call) Return(_a0 *domain.DeleteVariablesIDResponse, _a1 error) *ClientWithResponsesInterface_DeleteVariablesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ExportTemplateWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body
func (_m *ClientWithResponsesInterface) ExportTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*domain.ExportTemplateResponse, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *domain.ExportTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *domain.ExportTemplateResponse); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ExportTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_ExportTemplateWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTemplateWithBodyWithResponse'
type ClientWithResponsesInterface_ExportTemplateWithBodyWithResponse_Call struct {
	*mock.Call
}

// ExportTemplateWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) ExportTemplateWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_ExportTemplateWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_ExportTemplateWithBodyWithResponse_Call{Call: _e.mock.On("ExportTemplateWithBodyWithResponse", ctx, contentType, body)}
}

func (_c *ClientWithResponsesInterface_ExportTemplateWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientWithResponsesInterface_ExportTemplateWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_ExportTemplateWithBodyWithResponse_Call) Return(_a0 *domain.ExportTemplateResponse, _a1 error) *ClientWithResponsesInterface_ExportTemplateWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ExportTemplateWithResponse provides a mock function with given fields: ctx, body
func (_m *ClientWithResponsesInterface) ExportTemplateWithResponse(ctx context.Context, body domain.ExportTemplateJSONRequestBody) (*domain.ExportTemplateResponse, error) {
	ret := _m.Called(ctx, body)

	var r0 *domain.ExportTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.ExportTemplateJSONRequestBody) *domain.ExportTemplateResponse); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ExportTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.ExportTemplateJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_ExportTemplateWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTemplateWithResponse'
type ClientWithResponsesInterface_ExportTemplateWithResponse_Call struct {
	*mock.Call
}

// ExportTemplateWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.ExportTemplateJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) ExportTemplateWithResponse(ctx interface{}, body interface{}) *ClientWithResponsesInterface_ExportTemplateWithResponse_Call {
	return &ClientWithResponsesInterface_ExportTemplateWithResponse_Call{Call: _e.mock.On("ExportTemplateWithResponse", ctx, body)}
}

func (_c *ClientWithResponsesInterface_ExportTemplateWithResponse_Call) Run(run func(ctx context.Context, body domain.ExportTemplateJSONRequestBody)) *ClientWithResponsesInterface_ExportTemplateWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ExportTemplateJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_ExportTemplateWithResponse_Call) Return(_a0 *domain.ExportTemplateResponse, _a1 error) *ClientWithResponsesInterface_ExportTemplateWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAuthorizationsIDWithResponse provides a mock function with given fields: ctx, authID, params
func (_m *ClientWithResponsesInterface) GetAuthorizationsIDWithResponse(ctx context.Context, authID string, params *domain.GetAuthorizationsIDParams) (*domain.GetAuthorizationsIDResponse, error) {
	ret := _m.Called(ctx, authID, params)

	var r0 *domain.GetAuthorizationsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetAuthorizationsIDParams) *domain.GetAuthorizationsIDResponse); ok {
		r0 = rf(ctx, authID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetAuthorizationsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetAuthorizationsIDParams) error); ok {
		r1 = rf(ctx, authID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetAuthorizationsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationsIDWithResponse'
type ClientWithResponsesInterface_GetAuthorizationsIDWithResponse_Call struct {
	*mock.Call
}

// GetAuthorizationsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.GetAuthorizationsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetAuthorizationsIDWithResponse(ctx interface{}, authID interface{}, params interface{}) *ClientWithResponsesInterface_GetAuthorizationsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetAuthorizationsIDWithResponse_Call{Call: _e.mock.On("GetAuthorizationsIDWithResponse", ctx, authID, params)}
}

func (_c *ClientWithResponsesInterface_GetAuthorizationsIDWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.GetAuthorizationsIDParams)) *ClientWithResponsesInterface_GetAuthorizationsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetAuthorizationsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetAuthorizationsIDWithResponse_Call) Return(_a0 *domain.GetAuthorizationsIDResponse, _a1 error) *ClientWithResponsesInterface_GetAuthorizationsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAuthorizationsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetAuthorizationsWithResponse(ctx context.Context, params *domain.GetAuthorizationsParams) (*domain.GetAuthorizationsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetAuthorizationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetAuthorizationsParams) *domain.GetAuthorizationsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetAuthorizationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetAuthorizationsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetAuthorizationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationsWithResponse'
type ClientWithResponsesInterface_GetAuthorizationsWithResponse_Call struct {
	*mock.Call
}

// GetAuthorizationsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetAuthorizationsParams
func (_e *ClientWithResponsesInterface_Expecter) GetAuthorizationsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetAuthorizationsWithResponse_Call {
	return &ClientWithResponsesInterface_GetAuthorizationsWithResponse_Call{Call: _e.mock.On("GetAuthorizationsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetAuthorizationsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetAuthorizationsParams)) *ClientWithResponsesInterface_GetAuthorizationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetAuthorizationsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetAuthorizationsWithResponse_Call) Return(_a0 *domain.GetAuthorizationsResponse, _a1 error) *ClientWithResponsesInterface_GetAuthorizationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBackupKVWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetBackupKVWithResponse(ctx context.Context, params *domain.GetBackupKVParams) (*domain.GetBackupKVResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetBackupKVResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetBackupKVParams) *domain.GetBackupKVResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetBackupKVResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetBackupKVParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetBackupKVWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupKVWithResponse'
type ClientWithResponsesInterface_GetBackupKVWithResponse_Call struct {
	*mock.Call
}

// GetBackupKVWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetBackupKVParams
func (_e *ClientWithResponsesInterface_Expecter) GetBackupKVWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetBackupKVWithResponse_Call {
	return &ClientWithResponsesInterface_GetBackupKVWithResponse_Call{Call: _e.mock.On("GetBackupKVWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetBackupKVWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetBackupKVParams)) *ClientWithResponsesInterface_GetBackupKVWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetBackupKVParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetBackupKVWithResponse_Call) Return(_a0 *domain.GetBackupKVResponse, _a1 error) *ClientWithResponsesInterface_GetBackupKVWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBackupMetadataWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetBackupMetadataWithResponse(ctx context.Context, params *domain.GetBackupMetadataParams) (*domain.GetBackupMetadataResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetBackupMetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetBackupMetadataParams) *domain.GetBackupMetadataResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetBackupMetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetBackupMetadataParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetBackupMetadataWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupMetadataWithResponse'
type ClientWithResponsesInterface_GetBackupMetadataWithResponse_Call struct {
	*mock.Call
}

// GetBackupMetadataWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetBackupMetadataParams
func (_e *ClientWithResponsesInterface_Expecter) GetBackupMetadataWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetBackupMetadataWithResponse_Call {
	return &ClientWithResponsesInterface_GetBackupMetadataWithResponse_Call{Call: _e.mock.On("GetBackupMetadataWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetBackupMetadataWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetBackupMetadataParams)) *ClientWithResponsesInterface_GetBackupMetadataWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetBackupMetadataParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetBackupMetadataWithResponse_Call) Return(_a0 *domain.GetBackupMetadataResponse, _a1 error) *ClientWithResponsesInterface_GetBackupMetadataWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBackupShardIdWithResponse provides a mock function with given fields: ctx, shardID, params
func (_m *ClientWithResponsesInterface) GetBackupShardIdWithResponse(ctx context.Context, shardID int64, params *domain.GetBackupShardIdParams) (*domain.GetBackupShardIdResponse, error) {
	ret := _m.Called(ctx, shardID, params)

	var r0 *domain.GetBackupShardIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.GetBackupShardIdParams) *domain.GetBackupShardIdResponse); ok {
		r0 = rf(ctx, shardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetBackupShardIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *domain.GetBackupShardIdParams) error); ok {
		r1 = rf(ctx, shardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetBackupShardIdWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackupShardIdWithResponse'
type ClientWithResponsesInterface_GetBackupShardIdWithResponse_Call struct {
	*mock.Call
}

// GetBackupShardIdWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - shardID int64
//  - params *domain.GetBackupShardIdParams
func (_e *ClientWithResponsesInterface_Expecter) GetBackupShardIdWithResponse(ctx interface{}, shardID interface{}, params interface{}) *ClientWithResponsesInterface_GetBackupShardIdWithResponse_Call {
	return &ClientWithResponsesInterface_GetBackupShardIdWithResponse_Call{Call: _e.mock.On("GetBackupShardIdWithResponse", ctx, shardID, params)}
}

func (_c *ClientWithResponsesInterface_GetBackupShardIdWithResponse_Call) Run(run func(ctx context.Context, shardID int64, params *domain.GetBackupShardIdParams)) *ClientWithResponsesInterface_GetBackupShardIdWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*domain.GetBackupShardIdParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetBackupShardIdWithResponse_Call) Return(_a0 *domain.GetBackupShardIdResponse, _a1 error) *ClientWithResponsesInterface_GetBackupShardIdWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBucketsIDLabelsWithResponse provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientWithResponsesInterface) GetBucketsIDLabelsWithResponse(ctx context.Context, bucketID string, params *domain.GetBucketsIDLabelsParams) (*domain.GetBucketsIDLabelsResponse, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *domain.GetBucketsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetBucketsIDLabelsParams) *domain.GetBucketsIDLabelsResponse); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetBucketsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetBucketsIDLabelsParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetBucketsIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketsIDLabelsWithResponse'
type ClientWithResponsesInterface_GetBucketsIDLabelsWithResponse_Call struct {
	*mock.Call
}

// GetBucketsIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.GetBucketsIDLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetBucketsIDLabelsWithResponse(ctx interface{}, bucketID interface{}, params interface{}) *ClientWithResponsesInterface_GetBucketsIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetBucketsIDLabelsWithResponse_Call{Call: _e.mock.On("GetBucketsIDLabelsWithResponse", ctx, bucketID, params)}
}

func (_c *ClientWithResponsesInterface_GetBucketsIDLabelsWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.GetBucketsIDLabelsParams)) *ClientWithResponsesInterface_GetBucketsIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetBucketsIDLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetBucketsIDLabelsWithResponse_Call) Return(_a0 *domain.GetBucketsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetBucketsIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBucketsIDMembersWithResponse provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientWithResponsesInterface) GetBucketsIDMembersWithResponse(ctx context.Context, bucketID string, params *domain.GetBucketsIDMembersParams) (*domain.GetBucketsIDMembersResponse, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *domain.GetBucketsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetBucketsIDMembersParams) *domain.GetBucketsIDMembersResponse); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetBucketsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetBucketsIDMembersParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetBucketsIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketsIDMembersWithResponse'
type ClientWithResponsesInterface_GetBucketsIDMembersWithResponse_Call struct {
	*mock.Call
}

// GetBucketsIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.GetBucketsIDMembersParams
func (_e *ClientWithResponsesInterface_Expecter) GetBucketsIDMembersWithResponse(ctx interface{}, bucketID interface{}, params interface{}) *ClientWithResponsesInterface_GetBucketsIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_GetBucketsIDMembersWithResponse_Call{Call: _e.mock.On("GetBucketsIDMembersWithResponse", ctx, bucketID, params)}
}

func (_c *ClientWithResponsesInterface_GetBucketsIDMembersWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.GetBucketsIDMembersParams)) *ClientWithResponsesInterface_GetBucketsIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetBucketsIDMembersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetBucketsIDMembersWithResponse_Call) Return(_a0 *domain.GetBucketsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_GetBucketsIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBucketsIDOwnersWithResponse provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientWithResponsesInterface) GetBucketsIDOwnersWithResponse(ctx context.Context, bucketID string, params *domain.GetBucketsIDOwnersParams) (*domain.GetBucketsIDOwnersResponse, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *domain.GetBucketsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetBucketsIDOwnersParams) *domain.GetBucketsIDOwnersResponse); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetBucketsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetBucketsIDOwnersParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetBucketsIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketsIDOwnersWithResponse'
type ClientWithResponsesInterface_GetBucketsIDOwnersWithResponse_Call struct {
	*mock.Call
}

// GetBucketsIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.GetBucketsIDOwnersParams
func (_e *ClientWithResponsesInterface_Expecter) GetBucketsIDOwnersWithResponse(ctx interface{}, bucketID interface{}, params interface{}) *ClientWithResponsesInterface_GetBucketsIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_GetBucketsIDOwnersWithResponse_Call{Call: _e.mock.On("GetBucketsIDOwnersWithResponse", ctx, bucketID, params)}
}

func (_c *ClientWithResponsesInterface_GetBucketsIDOwnersWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.GetBucketsIDOwnersParams)) *ClientWithResponsesInterface_GetBucketsIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetBucketsIDOwnersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetBucketsIDOwnersWithResponse_Call) Return(_a0 *domain.GetBucketsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_GetBucketsIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBucketsIDWithResponse provides a mock function with given fields: ctx, bucketID, params
func (_m *ClientWithResponsesInterface) GetBucketsIDWithResponse(ctx context.Context, bucketID string, params *domain.GetBucketsIDParams) (*domain.GetBucketsIDResponse, error) {
	ret := _m.Called(ctx, bucketID, params)

	var r0 *domain.GetBucketsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetBucketsIDParams) *domain.GetBucketsIDResponse); ok {
		r0 = rf(ctx, bucketID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetBucketsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetBucketsIDParams) error); ok {
		r1 = rf(ctx, bucketID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetBucketsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketsIDWithResponse'
type ClientWithResponsesInterface_GetBucketsIDWithResponse_Call struct {
	*mock.Call
}

// GetBucketsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.GetBucketsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetBucketsIDWithResponse(ctx interface{}, bucketID interface{}, params interface{}) *ClientWithResponsesInterface_GetBucketsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetBucketsIDWithResponse_Call{Call: _e.mock.On("GetBucketsIDWithResponse", ctx, bucketID, params)}
}

func (_c *ClientWithResponsesInterface_GetBucketsIDWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.GetBucketsIDParams)) *ClientWithResponsesInterface_GetBucketsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetBucketsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetBucketsIDWithResponse_Call) Return(_a0 *domain.GetBucketsIDResponse, _a1 error) *ClientWithResponsesInterface_GetBucketsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBucketsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetBucketsWithResponse(ctx context.Context, params *domain.GetBucketsParams) (*domain.GetBucketsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetBucketsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetBucketsParams) *domain.GetBucketsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetBucketsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetBucketsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetBucketsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBucketsWithResponse'
type ClientWithResponsesInterface_GetBucketsWithResponse_Call struct {
	*mock.Call
}

// GetBucketsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetBucketsParams
func (_e *ClientWithResponsesInterface_Expecter) GetBucketsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetBucketsWithResponse_Call {
	return &ClientWithResponsesInterface_GetBucketsWithResponse_Call{Call: _e.mock.On("GetBucketsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetBucketsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetBucketsParams)) *ClientWithResponsesInterface_GetBucketsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetBucketsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetBucketsWithResponse_Call) Return(_a0 *domain.GetBucketsResponse, _a1 error) *ClientWithResponsesInterface_GetBucketsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetChecksIDLabelsWithResponse provides a mock function with given fields: ctx, checkID, params
func (_m *ClientWithResponsesInterface) GetChecksIDLabelsWithResponse(ctx context.Context, checkID string, params *domain.GetChecksIDLabelsParams) (*domain.GetChecksIDLabelsResponse, error) {
	ret := _m.Called(ctx, checkID, params)

	var r0 *domain.GetChecksIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetChecksIDLabelsParams) *domain.GetChecksIDLabelsResponse); ok {
		r0 = rf(ctx, checkID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetChecksIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetChecksIDLabelsParams) error); ok {
		r1 = rf(ctx, checkID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetChecksIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksIDLabelsWithResponse'
type ClientWithResponsesInterface_GetChecksIDLabelsWithResponse_Call struct {
	*mock.Call
}

// GetChecksIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.GetChecksIDLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetChecksIDLabelsWithResponse(ctx interface{}, checkID interface{}, params interface{}) *ClientWithResponsesInterface_GetChecksIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetChecksIDLabelsWithResponse_Call{Call: _e.mock.On("GetChecksIDLabelsWithResponse", ctx, checkID, params)}
}

func (_c *ClientWithResponsesInterface_GetChecksIDLabelsWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.GetChecksIDLabelsParams)) *ClientWithResponsesInterface_GetChecksIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetChecksIDLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetChecksIDLabelsWithResponse_Call) Return(_a0 *domain.GetChecksIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetChecksIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetChecksIDQueryWithResponse provides a mock function with given fields: ctx, checkID, params
func (_m *ClientWithResponsesInterface) GetChecksIDQueryWithResponse(ctx context.Context, checkID string, params *domain.GetChecksIDQueryParams) (*domain.GetChecksIDQueryResponse, error) {
	ret := _m.Called(ctx, checkID, params)

	var r0 *domain.GetChecksIDQueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetChecksIDQueryParams) *domain.GetChecksIDQueryResponse); ok {
		r0 = rf(ctx, checkID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetChecksIDQueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetChecksIDQueryParams) error); ok {
		r1 = rf(ctx, checkID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetChecksIDQueryWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksIDQueryWithResponse'
type ClientWithResponsesInterface_GetChecksIDQueryWithResponse_Call struct {
	*mock.Call
}

// GetChecksIDQueryWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.GetChecksIDQueryParams
func (_e *ClientWithResponsesInterface_Expecter) GetChecksIDQueryWithResponse(ctx interface{}, checkID interface{}, params interface{}) *ClientWithResponsesInterface_GetChecksIDQueryWithResponse_Call {
	return &ClientWithResponsesInterface_GetChecksIDQueryWithResponse_Call{Call: _e.mock.On("GetChecksIDQueryWithResponse", ctx, checkID, params)}
}

func (_c *ClientWithResponsesInterface_GetChecksIDQueryWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.GetChecksIDQueryParams)) *ClientWithResponsesInterface_GetChecksIDQueryWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetChecksIDQueryParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetChecksIDQueryWithResponse_Call) Return(_a0 *domain.GetChecksIDQueryResponse, _a1 error) *ClientWithResponsesInterface_GetChecksIDQueryWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetChecksIDWithResponse provides a mock function with given fields: ctx, checkID, params
func (_m *ClientWithResponsesInterface) GetChecksIDWithResponse(ctx context.Context, checkID string, params *domain.GetChecksIDParams) (*domain.GetChecksIDResponse, error) {
	ret := _m.Called(ctx, checkID, params)

	var r0 *domain.GetChecksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetChecksIDParams) *domain.GetChecksIDResponse); ok {
		r0 = rf(ctx, checkID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetChecksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetChecksIDParams) error); ok {
		r1 = rf(ctx, checkID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetChecksIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksIDWithResponse'
type ClientWithResponsesInterface_GetChecksIDWithResponse_Call struct {
	*mock.Call
}

// GetChecksIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.GetChecksIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetChecksIDWithResponse(ctx interface{}, checkID interface{}, params interface{}) *ClientWithResponsesInterface_GetChecksIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetChecksIDWithResponse_Call{Call: _e.mock.On("GetChecksIDWithResponse", ctx, checkID, params)}
}

func (_c *ClientWithResponsesInterface_GetChecksIDWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.GetChecksIDParams)) *ClientWithResponsesInterface_GetChecksIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetChecksIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetChecksIDWithResponse_Call) Return(_a0 *domain.GetChecksIDResponse, _a1 error) *ClientWithResponsesInterface_GetChecksIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetChecksWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetChecksWithResponse(ctx context.Context, params *domain.GetChecksParams) (*domain.GetChecksResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetChecksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetChecksParams) *domain.GetChecksResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetChecksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetChecksParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetChecksWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksWithResponse'
type ClientWithResponsesInterface_GetChecksWithResponse_Call struct {
	*mock.Call
}

// GetChecksWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetChecksParams
func (_e *ClientWithResponsesInterface_Expecter) GetChecksWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetChecksWithResponse_Call {
	return &ClientWithResponsesInterface_GetChecksWithResponse_Call{Call: _e.mock.On("GetChecksWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetChecksWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetChecksParams)) *ClientWithResponsesInterface_GetChecksWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetChecksParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetChecksWithResponse_Call) Return(_a0 *domain.GetChecksResponse, _a1 error) *ClientWithResponsesInterface_GetChecksWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetConfigWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetConfigWithResponse(ctx context.Context, params *domain.GetConfigParams) (*domain.GetConfigResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetConfigParams) *domain.GetConfigResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetConfigParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetConfigWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigWithResponse'
type ClientWithResponsesInterface_GetConfigWithResponse_Call struct {
	*mock.Call
}

// GetConfigWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetConfigParams
func (_e *ClientWithResponsesInterface_Expecter) GetConfigWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetConfigWithResponse_Call {
	return &ClientWithResponsesInterface_GetConfigWithResponse_Call{Call: _e.mock.On("GetConfigWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetConfigWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetConfigParams)) *ClientWithResponsesInterface_GetConfigWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetConfigParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetConfigWithResponse_Call) Return(_a0 *domain.GetConfigResponse, _a1 error) *ClientWithResponsesInterface_GetConfigWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDBRPsIDWithResponse provides a mock function with given fields: ctx, dbrpID, params
func (_m *ClientWithResponsesInterface) GetDBRPsIDWithResponse(ctx context.Context, dbrpID string, params *domain.GetDBRPsIDParams) (*domain.GetDBRPsIDResponse, error) {
	ret := _m.Called(ctx, dbrpID, params)

	var r0 *domain.GetDBRPsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDBRPsIDParams) *domain.GetDBRPsIDResponse); ok {
		r0 = rf(ctx, dbrpID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetDBRPsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDBRPsIDParams) error); ok {
		r1 = rf(ctx, dbrpID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetDBRPsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDBRPsIDWithResponse'
type ClientWithResponsesInterface_GetDBRPsIDWithResponse_Call struct {
	*mock.Call
}

// GetDBRPsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dbrpID string
//  - params *domain.GetDBRPsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetDBRPsIDWithResponse(ctx interface{}, dbrpID interface{}, params interface{}) *ClientWithResponsesInterface_GetDBRPsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetDBRPsIDWithResponse_Call{Call: _e.mock.On("GetDBRPsIDWithResponse", ctx, dbrpID, params)}
}

func (_c *ClientWithResponsesInterface_GetDBRPsIDWithResponse_Call) Run(run func(ctx context.Context, dbrpID string, params *domain.GetDBRPsIDParams)) *ClientWithResponsesInterface_GetDBRPsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDBRPsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetDBRPsIDWithResponse_Call) Return(_a0 *domain.GetDBRPsIDResponse, _a1 error) *ClientWithResponsesInterface_GetDBRPsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDBRPsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetDBRPsWithResponse(ctx context.Context, params *domain.GetDBRPsParams) (*domain.GetDBRPsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetDBRPsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetDBRPsParams) *domain.GetDBRPsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetDBRPsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetDBRPsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetDBRPsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDBRPsWithResponse'
type ClientWithResponsesInterface_GetDBRPsWithResponse_Call struct {
	*mock.Call
}

// GetDBRPsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetDBRPsParams
func (_e *ClientWithResponsesInterface_Expecter) GetDBRPsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetDBRPsWithResponse_Call {
	return &ClientWithResponsesInterface_GetDBRPsWithResponse_Call{Call: _e.mock.On("GetDBRPsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetDBRPsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetDBRPsParams)) *ClientWithResponsesInterface_GetDBRPsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetDBRPsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetDBRPsWithResponse_Call) Return(_a0 *domain.GetDBRPsResponse, _a1 error) *ClientWithResponsesInterface_GetDBRPsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsIDCellsIDViewWithResponse provides a mock function with given fields: ctx, dashboardID, cellID, params
func (_m *ClientWithResponsesInterface) GetDashboardsIDCellsIDViewWithResponse(ctx context.Context, dashboardID string, cellID string, params *domain.GetDashboardsIDCellsIDViewParams) (*domain.GetDashboardsIDCellsIDViewResponse, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params)

	var r0 *domain.GetDashboardsIDCellsIDViewResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.GetDashboardsIDCellsIDViewParams) *domain.GetDashboardsIDCellsIDViewResponse); ok {
		r0 = rf(ctx, dashboardID, cellID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetDashboardsIDCellsIDViewResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.GetDashboardsIDCellsIDViewParams) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetDashboardsIDCellsIDViewWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsIDCellsIDViewWithResponse'
type ClientWithResponsesInterface_GetDashboardsIDCellsIDViewWithResponse_Call struct {
	*mock.Call
}

// GetDashboardsIDCellsIDViewWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.GetDashboardsIDCellsIDViewParams
func (_e *ClientWithResponsesInterface_Expecter) GetDashboardsIDCellsIDViewWithResponse(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}) *ClientWithResponsesInterface_GetDashboardsIDCellsIDViewWithResponse_Call {
	return &ClientWithResponsesInterface_GetDashboardsIDCellsIDViewWithResponse_Call{Call: _e.mock.On("GetDashboardsIDCellsIDViewWithResponse", ctx, dashboardID, cellID, params)}
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDCellsIDViewWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.GetDashboardsIDCellsIDViewParams)) *ClientWithResponsesInterface_GetDashboardsIDCellsIDViewWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.GetDashboardsIDCellsIDViewParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDCellsIDViewWithResponse_Call) Return(_a0 *domain.GetDashboardsIDCellsIDViewResponse, _a1 error) *ClientWithResponsesInterface_GetDashboardsIDCellsIDViewWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsIDLabelsWithResponse provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientWithResponsesInterface) GetDashboardsIDLabelsWithResponse(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDLabelsParams) (*domain.GetDashboardsIDLabelsResponse, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *domain.GetDashboardsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDashboardsIDLabelsParams) *domain.GetDashboardsIDLabelsResponse); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetDashboardsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDashboardsIDLabelsParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetDashboardsIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsIDLabelsWithResponse'
type ClientWithResponsesInterface_GetDashboardsIDLabelsWithResponse_Call struct {
	*mock.Call
}

// GetDashboardsIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.GetDashboardsIDLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetDashboardsIDLabelsWithResponse(ctx interface{}, dashboardID interface{}, params interface{}) *ClientWithResponsesInterface_GetDashboardsIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetDashboardsIDLabelsWithResponse_Call{Call: _e.mock.On("GetDashboardsIDLabelsWithResponse", ctx, dashboardID, params)}
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDLabelsWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDLabelsParams)) *ClientWithResponsesInterface_GetDashboardsIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDashboardsIDLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDLabelsWithResponse_Call) Return(_a0 *domain.GetDashboardsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetDashboardsIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsIDMembersWithResponse provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientWithResponsesInterface) GetDashboardsIDMembersWithResponse(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDMembersParams) (*domain.GetDashboardsIDMembersResponse, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *domain.GetDashboardsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDashboardsIDMembersParams) *domain.GetDashboardsIDMembersResponse); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetDashboardsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDashboardsIDMembersParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetDashboardsIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsIDMembersWithResponse'
type ClientWithResponsesInterface_GetDashboardsIDMembersWithResponse_Call struct {
	*mock.Call
}

// GetDashboardsIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.GetDashboardsIDMembersParams
func (_e *ClientWithResponsesInterface_Expecter) GetDashboardsIDMembersWithResponse(ctx interface{}, dashboardID interface{}, params interface{}) *ClientWithResponsesInterface_GetDashboardsIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_GetDashboardsIDMembersWithResponse_Call{Call: _e.mock.On("GetDashboardsIDMembersWithResponse", ctx, dashboardID, params)}
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDMembersWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDMembersParams)) *ClientWithResponsesInterface_GetDashboardsIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDashboardsIDMembersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDMembersWithResponse_Call) Return(_a0 *domain.GetDashboardsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_GetDashboardsIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsIDOwnersWithResponse provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientWithResponsesInterface) GetDashboardsIDOwnersWithResponse(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDOwnersParams) (*domain.GetDashboardsIDOwnersResponse, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *domain.GetDashboardsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDashboardsIDOwnersParams) *domain.GetDashboardsIDOwnersResponse); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetDashboardsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDashboardsIDOwnersParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetDashboardsIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsIDOwnersWithResponse'
type ClientWithResponsesInterface_GetDashboardsIDOwnersWithResponse_Call struct {
	*mock.Call
}

// GetDashboardsIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.GetDashboardsIDOwnersParams
func (_e *ClientWithResponsesInterface_Expecter) GetDashboardsIDOwnersWithResponse(ctx interface{}, dashboardID interface{}, params interface{}) *ClientWithResponsesInterface_GetDashboardsIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_GetDashboardsIDOwnersWithResponse_Call{Call: _e.mock.On("GetDashboardsIDOwnersWithResponse", ctx, dashboardID, params)}
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDOwnersWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDOwnersParams)) *ClientWithResponsesInterface_GetDashboardsIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDashboardsIDOwnersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDOwnersWithResponse_Call) Return(_a0 *domain.GetDashboardsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_GetDashboardsIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsIDWithResponse provides a mock function with given fields: ctx, dashboardID, params
func (_m *ClientWithResponsesInterface) GetDashboardsIDWithResponse(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDParams) (*domain.GetDashboardsIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, params)

	var r0 *domain.GetDashboardsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetDashboardsIDParams) *domain.GetDashboardsIDResponse); ok {
		r0 = rf(ctx, dashboardID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetDashboardsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetDashboardsIDParams) error); ok {
		r1 = rf(ctx, dashboardID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetDashboardsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsIDWithResponse'
type ClientWithResponsesInterface_GetDashboardsIDWithResponse_Call struct {
	*mock.Call
}

// GetDashboardsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.GetDashboardsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetDashboardsIDWithResponse(ctx interface{}, dashboardID interface{}, params interface{}) *ClientWithResponsesInterface_GetDashboardsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetDashboardsIDWithResponse_Call{Call: _e.mock.On("GetDashboardsIDWithResponse", ctx, dashboardID, params)}
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.GetDashboardsIDParams)) *ClientWithResponsesInterface_GetDashboardsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetDashboardsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetDashboardsIDWithResponse_Call) Return(_a0 *domain.GetDashboardsIDResponse, _a1 error) *ClientWithResponsesInterface_GetDashboardsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDashboardsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetDashboardsWithResponse(ctx context.Context, params *domain.GetDashboardsParams) (*domain.GetDashboardsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetDashboardsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetDashboardsParams) *domain.GetDashboardsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetDashboardsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetDashboardsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetDashboardsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardsWithResponse'
type ClientWithResponsesInterface_GetDashboardsWithResponse_Call struct {
	*mock.Call
}

// GetDashboardsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetDashboardsParams
func (_e *ClientWithResponsesInterface_Expecter) GetDashboardsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetDashboardsWithResponse_Call {
	return &ClientWithResponsesInterface_GetDashboardsWithResponse_Call{Call: _e.mock.On("GetDashboardsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetDashboardsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetDashboardsParams)) *ClientWithResponsesInterface_GetDashboardsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetDashboardsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetDashboardsWithResponse_Call) Return(_a0 *domain.GetDashboardsResponse, _a1 error) *ClientWithResponsesInterface_GetDashboardsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetFlagsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetFlagsWithResponse(ctx context.Context, params *domain.GetFlagsParams) (*domain.GetFlagsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetFlagsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetFlagsParams) *domain.GetFlagsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetFlagsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetFlagsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetFlagsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlagsWithResponse'
type ClientWithResponsesInterface_GetFlagsWithResponse_Call struct {
	*mock.Call
}

// GetFlagsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetFlagsParams
func (_e *ClientWithResponsesInterface_Expecter) GetFlagsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetFlagsWithResponse_Call {
	return &ClientWithResponsesInterface_GetFlagsWithResponse_Call{Call: _e.mock.On("GetFlagsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetFlagsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetFlagsParams)) *ClientWithResponsesInterface_GetFlagsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetFlagsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetFlagsWithResponse_Call) Return(_a0 *domain.GetFlagsResponse, _a1 error) *ClientWithResponsesInterface_GetFlagsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetHealthWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetHealthWithResponse(ctx context.Context, params *domain.GetHealthParams) (*domain.GetHealthResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetHealthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetHealthParams) *domain.GetHealthResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetHealthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetHealthParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetHealthWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealthWithResponse'
type ClientWithResponsesInterface_GetHealthWithResponse_Call struct {
	*mock.Call
}

// GetHealthWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetHealthParams
func (_e *ClientWithResponsesInterface_Expecter) GetHealthWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetHealthWithResponse_Call {
	return &ClientWithResponsesInterface_GetHealthWithResponse_Call{Call: _e.mock.On("GetHealthWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetHealthWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetHealthParams)) *ClientWithResponsesInterface_GetHealthWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetHealthParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetHealthWithResponse_Call) Return(_a0 *domain.GetHealthResponse, _a1 error) *ClientWithResponsesInterface_GetHealthWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLabelsIDWithResponse provides a mock function with given fields: ctx, labelID, params
func (_m *ClientWithResponsesInterface) GetLabelsIDWithResponse(ctx context.Context, labelID string, params *domain.GetLabelsIDParams) (*domain.GetLabelsIDResponse, error) {
	ret := _m.Called(ctx, labelID, params)

	var r0 *domain.GetLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetLabelsIDParams) *domain.GetLabelsIDResponse); ok {
		r0 = rf(ctx, labelID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetLabelsIDParams) error); ok {
		r1 = rf(ctx, labelID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabelsIDWithResponse'
type ClientWithResponsesInterface_GetLabelsIDWithResponse_Call struct {
	*mock.Call
}

// GetLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
//  - params *domain.GetLabelsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetLabelsIDWithResponse(ctx interface{}, labelID interface{}, params interface{}) *ClientWithResponsesInterface_GetLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetLabelsIDWithResponse_Call{Call: _e.mock.On("GetLabelsIDWithResponse", ctx, labelID, params)}
}

func (_c *ClientWithResponsesInterface_GetLabelsIDWithResponse_Call) Run(run func(ctx context.Context, labelID string, params *domain.GetLabelsIDParams)) *ClientWithResponsesInterface_GetLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetLabelsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetLabelsIDWithResponse_Call) Return(_a0 *domain.GetLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_GetLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLabelsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetLabelsWithResponse(ctx context.Context, params *domain.GetLabelsParams) (*domain.GetLabelsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetLabelsParams) *domain.GetLabelsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetLabelsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabelsWithResponse'
type ClientWithResponsesInterface_GetLabelsWithResponse_Call struct {
	*mock.Call
}

// GetLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetLabelsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetLabelsWithResponse_Call{Call: _e.mock.On("GetLabelsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetLabelsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetLabelsParams)) *ClientWithResponsesInterface_GetLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetLabelsWithResponse_Call) Return(_a0 *domain.GetLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLegacyAuthorizationsIDWithResponse provides a mock function with given fields: ctx, authID, params
func (_m *ClientWithResponsesInterface) GetLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *domain.GetLegacyAuthorizationsIDParams) (*domain.GetLegacyAuthorizationsIDResponse, error) {
	ret := _m.Called(ctx, authID, params)

	var r0 *domain.GetLegacyAuthorizationsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetLegacyAuthorizationsIDParams) *domain.GetLegacyAuthorizationsIDResponse); ok {
		r0 = rf(ctx, authID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetLegacyAuthorizationsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetLegacyAuthorizationsIDParams) error); ok {
		r1 = rf(ctx, authID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetLegacyAuthorizationsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLegacyAuthorizationsIDWithResponse'
type ClientWithResponsesInterface_GetLegacyAuthorizationsIDWithResponse_Call struct {
	*mock.Call
}

// GetLegacyAuthorizationsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.GetLegacyAuthorizationsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetLegacyAuthorizationsIDWithResponse(ctx interface{}, authID interface{}, params interface{}) *ClientWithResponsesInterface_GetLegacyAuthorizationsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetLegacyAuthorizationsIDWithResponse_Call{Call: _e.mock.On("GetLegacyAuthorizationsIDWithResponse", ctx, authID, params)}
}

func (_c *ClientWithResponsesInterface_GetLegacyAuthorizationsIDWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.GetLegacyAuthorizationsIDParams)) *ClientWithResponsesInterface_GetLegacyAuthorizationsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetLegacyAuthorizationsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetLegacyAuthorizationsIDWithResponse_Call) Return(_a0 *domain.GetLegacyAuthorizationsIDResponse, _a1 error) *ClientWithResponsesInterface_GetLegacyAuthorizationsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLegacyAuthorizationsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetLegacyAuthorizationsWithResponse(ctx context.Context, params *domain.GetLegacyAuthorizationsParams) (*domain.GetLegacyAuthorizationsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetLegacyAuthorizationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetLegacyAuthorizationsParams) *domain.GetLegacyAuthorizationsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetLegacyAuthorizationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetLegacyAuthorizationsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetLegacyAuthorizationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLegacyAuthorizationsWithResponse'
type ClientWithResponsesInterface_GetLegacyAuthorizationsWithResponse_Call struct {
	*mock.Call
}

// GetLegacyAuthorizationsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetLegacyAuthorizationsParams
func (_e *ClientWithResponsesInterface_Expecter) GetLegacyAuthorizationsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetLegacyAuthorizationsWithResponse_Call {
	return &ClientWithResponsesInterface_GetLegacyAuthorizationsWithResponse_Call{Call: _e.mock.On("GetLegacyAuthorizationsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetLegacyAuthorizationsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetLegacyAuthorizationsParams)) *ClientWithResponsesInterface_GetLegacyAuthorizationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetLegacyAuthorizationsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetLegacyAuthorizationsWithResponse_Call) Return(_a0 *domain.GetLegacyAuthorizationsResponse, _a1 error) *ClientWithResponsesInterface_GetLegacyAuthorizationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMeWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetMeWithResponse(ctx context.Context, params *domain.GetMeParams) (*domain.GetMeResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetMeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetMeParams) *domain.GetMeResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetMeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetMeParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetMeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeWithResponse'
type ClientWithResponsesInterface_GetMeWithResponse_Call struct {
	*mock.Call
}

// GetMeWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetMeParams
func (_e *ClientWithResponsesInterface_Expecter) GetMeWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetMeWithResponse_Call {
	return &ClientWithResponsesInterface_GetMeWithResponse_Call{Call: _e.mock.On("GetMeWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetMeWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetMeParams)) *ClientWithResponsesInterface_GetMeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetMeParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetMeWithResponse_Call) Return(_a0 *domain.GetMeResponse, _a1 error) *ClientWithResponsesInterface_GetMeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMetricsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetMetricsWithResponse(ctx context.Context, params *domain.GetMetricsParams) (*domain.GetMetricsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetMetricsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetMetricsParams) *domain.GetMetricsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetMetricsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetMetricsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetMetricsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsWithResponse'
type ClientWithResponsesInterface_GetMetricsWithResponse_Call struct {
	*mock.Call
}

// GetMetricsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetMetricsParams
func (_e *ClientWithResponsesInterface_Expecter) GetMetricsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetMetricsWithResponse_Call {
	return &ClientWithResponsesInterface_GetMetricsWithResponse_Call{Call: _e.mock.On("GetMetricsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetMetricsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetMetricsParams)) *ClientWithResponsesInterface_GetMetricsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetMetricsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetMetricsWithResponse_Call) Return(_a0 *domain.GetMetricsResponse, _a1 error) *ClientWithResponsesInterface_GetMetricsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationEndpointsIDLabelsWithResponse provides a mock function with given fields: ctx, endpointID, params
func (_m *ClientWithResponsesInterface) GetNotificationEndpointsIDLabelsWithResponse(ctx context.Context, endpointID string, params *domain.GetNotificationEndpointsIDLabelsParams) (*domain.GetNotificationEndpointsIDLabelsResponse, error) {
	ret := _m.Called(ctx, endpointID, params)

	var r0 *domain.GetNotificationEndpointsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationEndpointsIDLabelsParams) *domain.GetNotificationEndpointsIDLabelsResponse); ok {
		r0 = rf(ctx, endpointID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetNotificationEndpointsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationEndpointsIDLabelsParams) error); ok {
		r1 = rf(ctx, endpointID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetNotificationEndpointsIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationEndpointsIDLabelsWithResponse'
type ClientWithResponsesInterface_GetNotificationEndpointsIDLabelsWithResponse_Call struct {
	*mock.Call
}

// GetNotificationEndpointsIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.GetNotificationEndpointsIDLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetNotificationEndpointsIDLabelsWithResponse(ctx interface{}, endpointID interface{}, params interface{}) *ClientWithResponsesInterface_GetNotificationEndpointsIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetNotificationEndpointsIDLabelsWithResponse_Call{Call: _e.mock.On("GetNotificationEndpointsIDLabelsWithResponse", ctx, endpointID, params)}
}

func (_c *ClientWithResponsesInterface_GetNotificationEndpointsIDLabelsWithResponse_Call) Run(run func(ctx context.Context, endpointID string, params *domain.GetNotificationEndpointsIDLabelsParams)) *ClientWithResponsesInterface_GetNotificationEndpointsIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationEndpointsIDLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetNotificationEndpointsIDLabelsWithResponse_Call) Return(_a0 *domain.GetNotificationEndpointsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetNotificationEndpointsIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationEndpointsIDWithResponse provides a mock function with given fields: ctx, endpointID, params
func (_m *ClientWithResponsesInterface) GetNotificationEndpointsIDWithResponse(ctx context.Context, endpointID string, params *domain.GetNotificationEndpointsIDParams) (*domain.GetNotificationEndpointsIDResponse, error) {
	ret := _m.Called(ctx, endpointID, params)

	var r0 *domain.GetNotificationEndpointsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationEndpointsIDParams) *domain.GetNotificationEndpointsIDResponse); ok {
		r0 = rf(ctx, endpointID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetNotificationEndpointsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationEndpointsIDParams) error); ok {
		r1 = rf(ctx, endpointID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetNotificationEndpointsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationEndpointsIDWithResponse'
type ClientWithResponsesInterface_GetNotificationEndpointsIDWithResponse_Call struct {
	*mock.Call
}

// GetNotificationEndpointsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.GetNotificationEndpointsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetNotificationEndpointsIDWithResponse(ctx interface{}, endpointID interface{}, params interface{}) *ClientWithResponsesInterface_GetNotificationEndpointsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetNotificationEndpointsIDWithResponse_Call{Call: _e.mock.On("GetNotificationEndpointsIDWithResponse", ctx, endpointID, params)}
}

func (_c *ClientWithResponsesInterface_GetNotificationEndpointsIDWithResponse_Call) Run(run func(ctx context.Context, endpointID string, params *domain.GetNotificationEndpointsIDParams)) *ClientWithResponsesInterface_GetNotificationEndpointsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationEndpointsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetNotificationEndpointsIDWithResponse_Call) Return(_a0 *domain.GetNotificationEndpointsIDResponse, _a1 error) *ClientWithResponsesInterface_GetNotificationEndpointsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationEndpointsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetNotificationEndpointsWithResponse(ctx context.Context, params *domain.GetNotificationEndpointsParams) (*domain.GetNotificationEndpointsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetNotificationEndpointsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetNotificationEndpointsParams) *domain.GetNotificationEndpointsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetNotificationEndpointsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetNotificationEndpointsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetNotificationEndpointsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationEndpointsWithResponse'
type ClientWithResponsesInterface_GetNotificationEndpointsWithResponse_Call struct {
	*mock.Call
}

// GetNotificationEndpointsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetNotificationEndpointsParams
func (_e *ClientWithResponsesInterface_Expecter) GetNotificationEndpointsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetNotificationEndpointsWithResponse_Call {
	return &ClientWithResponsesInterface_GetNotificationEndpointsWithResponse_Call{Call: _e.mock.On("GetNotificationEndpointsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetNotificationEndpointsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetNotificationEndpointsParams)) *ClientWithResponsesInterface_GetNotificationEndpointsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetNotificationEndpointsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetNotificationEndpointsWithResponse_Call) Return(_a0 *domain.GetNotificationEndpointsResponse, _a1 error) *ClientWithResponsesInterface_GetNotificationEndpointsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationRulesIDLabelsWithResponse provides a mock function with given fields: ctx, ruleID, params
func (_m *ClientWithResponsesInterface) GetNotificationRulesIDLabelsWithResponse(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDLabelsParams) (*domain.GetNotificationRulesIDLabelsResponse, error) {
	ret := _m.Called(ctx, ruleID, params)

	var r0 *domain.GetNotificationRulesIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationRulesIDLabelsParams) *domain.GetNotificationRulesIDLabelsResponse); ok {
		r0 = rf(ctx, ruleID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetNotificationRulesIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationRulesIDLabelsParams) error); ok {
		r1 = rf(ctx, ruleID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetNotificationRulesIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRulesIDLabelsWithResponse'
type ClientWithResponsesInterface_GetNotificationRulesIDLabelsWithResponse_Call struct {
	*mock.Call
}

// GetNotificationRulesIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.GetNotificationRulesIDLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetNotificationRulesIDLabelsWithResponse(ctx interface{}, ruleID interface{}, params interface{}) *ClientWithResponsesInterface_GetNotificationRulesIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetNotificationRulesIDLabelsWithResponse_Call{Call: _e.mock.On("GetNotificationRulesIDLabelsWithResponse", ctx, ruleID, params)}
}

func (_c *ClientWithResponsesInterface_GetNotificationRulesIDLabelsWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDLabelsParams)) *ClientWithResponsesInterface_GetNotificationRulesIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationRulesIDLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetNotificationRulesIDLabelsWithResponse_Call) Return(_a0 *domain.GetNotificationRulesIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetNotificationRulesIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationRulesIDQueryWithResponse provides a mock function with given fields: ctx, ruleID, params
func (_m *ClientWithResponsesInterface) GetNotificationRulesIDQueryWithResponse(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDQueryParams) (*domain.GetNotificationRulesIDQueryResponse, error) {
	ret := _m.Called(ctx, ruleID, params)

	var r0 *domain.GetNotificationRulesIDQueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationRulesIDQueryParams) *domain.GetNotificationRulesIDQueryResponse); ok {
		r0 = rf(ctx, ruleID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetNotificationRulesIDQueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationRulesIDQueryParams) error); ok {
		r1 = rf(ctx, ruleID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetNotificationRulesIDQueryWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRulesIDQueryWithResponse'
type ClientWithResponsesInterface_GetNotificationRulesIDQueryWithResponse_Call struct {
	*mock.Call
}

// GetNotificationRulesIDQueryWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.GetNotificationRulesIDQueryParams
func (_e *ClientWithResponsesInterface_Expecter) GetNotificationRulesIDQueryWithResponse(ctx interface{}, ruleID interface{}, params interface{}) *ClientWithResponsesInterface_GetNotificationRulesIDQueryWithResponse_Call {
	return &ClientWithResponsesInterface_GetNotificationRulesIDQueryWithResponse_Call{Call: _e.mock.On("GetNotificationRulesIDQueryWithResponse", ctx, ruleID, params)}
}

func (_c *ClientWithResponsesInterface_GetNotificationRulesIDQueryWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDQueryParams)) *ClientWithResponsesInterface_GetNotificationRulesIDQueryWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationRulesIDQueryParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetNotificationRulesIDQueryWithResponse_Call) Return(_a0 *domain.GetNotificationRulesIDQueryResponse, _a1 error) *ClientWithResponsesInterface_GetNotificationRulesIDQueryWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationRulesIDWithResponse provides a mock function with given fields: ctx, ruleID, params
func (_m *ClientWithResponsesInterface) GetNotificationRulesIDWithResponse(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDParams) (*domain.GetNotificationRulesIDResponse, error) {
	ret := _m.Called(ctx, ruleID, params)

	var r0 *domain.GetNotificationRulesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetNotificationRulesIDParams) *domain.GetNotificationRulesIDResponse); ok {
		r0 = rf(ctx, ruleID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetNotificationRulesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetNotificationRulesIDParams) error); ok {
		r1 = rf(ctx, ruleID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetNotificationRulesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRulesIDWithResponse'
type ClientWithResponsesInterface_GetNotificationRulesIDWithResponse_Call struct {
	*mock.Call
}

// GetNotificationRulesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.GetNotificationRulesIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetNotificationRulesIDWithResponse(ctx interface{}, ruleID interface{}, params interface{}) *ClientWithResponsesInterface_GetNotificationRulesIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetNotificationRulesIDWithResponse_Call{Call: _e.mock.On("GetNotificationRulesIDWithResponse", ctx, ruleID, params)}
}

func (_c *ClientWithResponsesInterface_GetNotificationRulesIDWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.GetNotificationRulesIDParams)) *ClientWithResponsesInterface_GetNotificationRulesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetNotificationRulesIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetNotificationRulesIDWithResponse_Call) Return(_a0 *domain.GetNotificationRulesIDResponse, _a1 error) *ClientWithResponsesInterface_GetNotificationRulesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNotificationRulesWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetNotificationRulesWithResponse(ctx context.Context, params *domain.GetNotificationRulesParams) (*domain.GetNotificationRulesResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetNotificationRulesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetNotificationRulesParams) *domain.GetNotificationRulesResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetNotificationRulesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetNotificationRulesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetNotificationRulesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRulesWithResponse'
type ClientWithResponsesInterface_GetNotificationRulesWithResponse_Call struct {
	*mock.Call
}

// GetNotificationRulesWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetNotificationRulesParams
func (_e *ClientWithResponsesInterface_Expecter) GetNotificationRulesWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetNotificationRulesWithResponse_Call {
	return &ClientWithResponsesInterface_GetNotificationRulesWithResponse_Call{Call: _e.mock.On("GetNotificationRulesWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetNotificationRulesWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetNotificationRulesParams)) *ClientWithResponsesInterface_GetNotificationRulesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetNotificationRulesParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetNotificationRulesWithResponse_Call) Return(_a0 *domain.GetNotificationRulesResponse, _a1 error) *ClientWithResponsesInterface_GetNotificationRulesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgsIDMembersWithResponse provides a mock function with given fields: ctx, orgID, params
func (_m *ClientWithResponsesInterface) GetOrgsIDMembersWithResponse(ctx context.Context, orgID string, params *domain.GetOrgsIDMembersParams) (*domain.GetOrgsIDMembersResponse, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *domain.GetOrgsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetOrgsIDMembersParams) *domain.GetOrgsIDMembersResponse); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetOrgsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetOrgsIDMembersParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetOrgsIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsIDMembersWithResponse'
type ClientWithResponsesInterface_GetOrgsIDMembersWithResponse_Call struct {
	*mock.Call
}

// GetOrgsIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.GetOrgsIDMembersParams
func (_e *ClientWithResponsesInterface_Expecter) GetOrgsIDMembersWithResponse(ctx interface{}, orgID interface{}, params interface{}) *ClientWithResponsesInterface_GetOrgsIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_GetOrgsIDMembersWithResponse_Call{Call: _e.mock.On("GetOrgsIDMembersWithResponse", ctx, orgID, params)}
}

func (_c *ClientWithResponsesInterface_GetOrgsIDMembersWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.GetOrgsIDMembersParams)) *ClientWithResponsesInterface_GetOrgsIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetOrgsIDMembersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetOrgsIDMembersWithResponse_Call) Return(_a0 *domain.GetOrgsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_GetOrgsIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgsIDOwnersWithResponse provides a mock function with given fields: ctx, orgID, params
func (_m *ClientWithResponsesInterface) GetOrgsIDOwnersWithResponse(ctx context.Context, orgID string, params *domain.GetOrgsIDOwnersParams) (*domain.GetOrgsIDOwnersResponse, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *domain.GetOrgsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetOrgsIDOwnersParams) *domain.GetOrgsIDOwnersResponse); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetOrgsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetOrgsIDOwnersParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetOrgsIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsIDOwnersWithResponse'
type ClientWithResponsesInterface_GetOrgsIDOwnersWithResponse_Call struct {
	*mock.Call
}

// GetOrgsIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.GetOrgsIDOwnersParams
func (_e *ClientWithResponsesInterface_Expecter) GetOrgsIDOwnersWithResponse(ctx interface{}, orgID interface{}, params interface{}) *ClientWithResponsesInterface_GetOrgsIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_GetOrgsIDOwnersWithResponse_Call{Call: _e.mock.On("GetOrgsIDOwnersWithResponse", ctx, orgID, params)}
}

func (_c *ClientWithResponsesInterface_GetOrgsIDOwnersWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.GetOrgsIDOwnersParams)) *ClientWithResponsesInterface_GetOrgsIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetOrgsIDOwnersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetOrgsIDOwnersWithResponse_Call) Return(_a0 *domain.GetOrgsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_GetOrgsIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgsIDSecretsWithResponse provides a mock function with given fields: ctx, orgID, params
func (_m *ClientWithResponsesInterface) GetOrgsIDSecretsWithResponse(ctx context.Context, orgID string, params *domain.GetOrgsIDSecretsParams) (*domain.GetOrgsIDSecretsResponse, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *domain.GetOrgsIDSecretsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetOrgsIDSecretsParams) *domain.GetOrgsIDSecretsResponse); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetOrgsIDSecretsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetOrgsIDSecretsParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetOrgsIDSecretsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsIDSecretsWithResponse'
type ClientWithResponsesInterface_GetOrgsIDSecretsWithResponse_Call struct {
	*mock.Call
}

// GetOrgsIDSecretsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.GetOrgsIDSecretsParams
func (_e *ClientWithResponsesInterface_Expecter) GetOrgsIDSecretsWithResponse(ctx interface{}, orgID interface{}, params interface{}) *ClientWithResponsesInterface_GetOrgsIDSecretsWithResponse_Call {
	return &ClientWithResponsesInterface_GetOrgsIDSecretsWithResponse_Call{Call: _e.mock.On("GetOrgsIDSecretsWithResponse", ctx, orgID, params)}
}

func (_c *ClientWithResponsesInterface_GetOrgsIDSecretsWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.GetOrgsIDSecretsParams)) *ClientWithResponsesInterface_GetOrgsIDSecretsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetOrgsIDSecretsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetOrgsIDSecretsWithResponse_Call) Return(_a0 *domain.GetOrgsIDSecretsResponse, _a1 error) *ClientWithResponsesInterface_GetOrgsIDSecretsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgsIDWithResponse provides a mock function with given fields: ctx, orgID, params
func (_m *ClientWithResponsesInterface) GetOrgsIDWithResponse(ctx context.Context, orgID string, params *domain.GetOrgsIDParams) (*domain.GetOrgsIDResponse, error) {
	ret := _m.Called(ctx, orgID, params)

	var r0 *domain.GetOrgsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetOrgsIDParams) *domain.GetOrgsIDResponse); ok {
		r0 = rf(ctx, orgID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetOrgsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetOrgsIDParams) error); ok {
		r1 = rf(ctx, orgID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetOrgsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsIDWithResponse'
type ClientWithResponsesInterface_GetOrgsIDWithResponse_Call struct {
	*mock.Call
}

// GetOrgsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.GetOrgsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetOrgsIDWithResponse(ctx interface{}, orgID interface{}, params interface{}) *ClientWithResponsesInterface_GetOrgsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetOrgsIDWithResponse_Call{Call: _e.mock.On("GetOrgsIDWithResponse", ctx, orgID, params)}
}

func (_c *ClientWithResponsesInterface_GetOrgsIDWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.GetOrgsIDParams)) *ClientWithResponsesInterface_GetOrgsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetOrgsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetOrgsIDWithResponse_Call) Return(_a0 *domain.GetOrgsIDResponse, _a1 error) *ClientWithResponsesInterface_GetOrgsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrgsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetOrgsWithResponse(ctx context.Context, params *domain.GetOrgsParams) (*domain.GetOrgsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetOrgsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetOrgsParams) *domain.GetOrgsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetOrgsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetOrgsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetOrgsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsWithResponse'
type ClientWithResponsesInterface_GetOrgsWithResponse_Call struct {
	*mock.Call
}

// GetOrgsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetOrgsParams
func (_e *ClientWithResponsesInterface_Expecter) GetOrgsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetOrgsWithResponse_Call {
	return &ClientWithResponsesInterface_GetOrgsWithResponse_Call{Call: _e.mock.On("GetOrgsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetOrgsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetOrgsParams)) *ClientWithResponsesInterface_GetOrgsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetOrgsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetOrgsWithResponse_Call) Return(_a0 *domain.GetOrgsResponse, _a1 error) *ClientWithResponsesInterface_GetOrgsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPingWithResponse provides a mock function with given fields: ctx
func (_m *ClientWithResponsesInterface) GetPingWithResponse(ctx context.Context) (*domain.GetPingResponse, error) {
	ret := _m.Called(ctx)

	var r0 *domain.GetPingResponse
	if rf, ok := ret.Get(0).(func(context.Context) *domain.GetPingResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetPingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetPingWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPingWithResponse'
type ClientWithResponsesInterface_GetPingWithResponse_Call struct {
	*mock.Call
}

// GetPingWithResponse is a helper method to define mock.On call
//  - ctx context.Context
func (_e *ClientWithResponsesInterface_Expecter) GetPingWithResponse(ctx interface{}) *ClientWithResponsesInterface_GetPingWithResponse_Call {
	return &ClientWithResponsesInterface_GetPingWithResponse_Call{Call: _e.mock.On("GetPingWithResponse", ctx)}
}

func (_c *ClientWithResponsesInterface_GetPingWithResponse_Call) Run(run func(ctx context.Context)) *ClientWithResponsesInterface_GetPingWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetPingWithResponse_Call) Return(_a0 *domain.GetPingResponse, _a1 error) *ClientWithResponsesInterface_GetPingWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetQuerySuggestionsNameWithResponse provides a mock function with given fields: ctx, name, params
func (_m *ClientWithResponsesInterface) GetQuerySuggestionsNameWithResponse(ctx context.Context, name string, params *domain.GetQuerySuggestionsNameParams) (*domain.GetQuerySuggestionsNameResponse, error) {
	ret := _m.Called(ctx, name, params)

	var r0 *domain.GetQuerySuggestionsNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetQuerySuggestionsNameParams) *domain.GetQuerySuggestionsNameResponse); ok {
		r0 = rf(ctx, name, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetQuerySuggestionsNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetQuerySuggestionsNameParams) error); ok {
		r1 = rf(ctx, name, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetQuerySuggestionsNameWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuerySuggestionsNameWithResponse'
type ClientWithResponsesInterface_GetQuerySuggestionsNameWithResponse_Call struct {
	*mock.Call
}

// GetQuerySuggestionsNameWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
//  - params *domain.GetQuerySuggestionsNameParams
func (_e *ClientWithResponsesInterface_Expecter) GetQuerySuggestionsNameWithResponse(ctx interface{}, name interface{}, params interface{}) *ClientWithResponsesInterface_GetQuerySuggestionsNameWithResponse_Call {
	return &ClientWithResponsesInterface_GetQuerySuggestionsNameWithResponse_Call{Call: _e.mock.On("GetQuerySuggestionsNameWithResponse", ctx, name, params)}
}

func (_c *ClientWithResponsesInterface_GetQuerySuggestionsNameWithResponse_Call) Run(run func(ctx context.Context, name string, params *domain.GetQuerySuggestionsNameParams)) *ClientWithResponsesInterface_GetQuerySuggestionsNameWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetQuerySuggestionsNameParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetQuerySuggestionsNameWithResponse_Call) Return(_a0 *domain.GetQuerySuggestionsNameResponse, _a1 error) *ClientWithResponsesInterface_GetQuerySuggestionsNameWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetQuerySuggestionsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetQuerySuggestionsWithResponse(ctx context.Context, params *domain.GetQuerySuggestionsParams) (*domain.GetQuerySuggestionsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetQuerySuggestionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetQuerySuggestionsParams) *domain.GetQuerySuggestionsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetQuerySuggestionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetQuerySuggestionsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetQuerySuggestionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuerySuggestionsWithResponse'
type ClientWithResponsesInterface_GetQuerySuggestionsWithResponse_Call struct {
	*mock.Call
}

// GetQuerySuggestionsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetQuerySuggestionsParams
func (_e *ClientWithResponsesInterface_Expecter) GetQuerySuggestionsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetQuerySuggestionsWithResponse_Call {
	return &ClientWithResponsesInterface_GetQuerySuggestionsWithResponse_Call{Call: _e.mock.On("GetQuerySuggestionsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetQuerySuggestionsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetQuerySuggestionsParams)) *ClientWithResponsesInterface_GetQuerySuggestionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetQuerySuggestionsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetQuerySuggestionsWithResponse_Call) Return(_a0 *domain.GetQuerySuggestionsResponse, _a1 error) *ClientWithResponsesInterface_GetQuerySuggestionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetReadyWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetReadyWithResponse(ctx context.Context, params *domain.GetReadyParams) (*domain.GetReadyResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetReadyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetReadyParams) *domain.GetReadyResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetReadyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetReadyParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetReadyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadyWithResponse'
type ClientWithResponsesInterface_GetReadyWithResponse_Call struct {
	*mock.Call
}

// GetReadyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetReadyParams
func (_e *ClientWithResponsesInterface_Expecter) GetReadyWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetReadyWithResponse_Call {
	return &ClientWithResponsesInterface_GetReadyWithResponse_Call{Call: _e.mock.On("GetReadyWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetReadyWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetReadyParams)) *ClientWithResponsesInterface_GetReadyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetReadyParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetReadyWithResponse_Call) Return(_a0 *domain.GetReadyResponse, _a1 error) *ClientWithResponsesInterface_GetReadyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRemoteConnectionByIDWithResponse provides a mock function with given fields: ctx, remoteID, params
func (_m *ClientWithResponsesInterface) GetRemoteConnectionByIDWithResponse(ctx context.Context, remoteID string, params *domain.GetRemoteConnectionByIDParams) (*domain.GetRemoteConnectionByIDResponse, error) {
	ret := _m.Called(ctx, remoteID, params)

	var r0 *domain.GetRemoteConnectionByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetRemoteConnectionByIDParams) *domain.GetRemoteConnectionByIDResponse); ok {
		r0 = rf(ctx, remoteID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetRemoteConnectionByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetRemoteConnectionByIDParams) error); ok {
		r1 = rf(ctx, remoteID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetRemoteConnectionByIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteConnectionByIDWithResponse'
type ClientWithResponsesInterface_GetRemoteConnectionByIDWithResponse_Call struct {
	*mock.Call
}

// GetRemoteConnectionByIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - remoteID string
//  - params *domain.GetRemoteConnectionByIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetRemoteConnectionByIDWithResponse(ctx interface{}, remoteID interface{}, params interface{}) *ClientWithResponsesInterface_GetRemoteConnectionByIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetRemoteConnectionByIDWithResponse_Call{Call: _e.mock.On("GetRemoteConnectionByIDWithResponse", ctx, remoteID, params)}
}

func (_c *ClientWithResponsesInterface_GetRemoteConnectionByIDWithResponse_Call) Run(run func(ctx context.Context, remoteID string, params *domain.GetRemoteConnectionByIDParams)) *ClientWithResponsesInterface_GetRemoteConnectionByIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetRemoteConnectionByIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetRemoteConnectionByIDWithResponse_Call) Return(_a0 *domain.GetRemoteConnectionByIDResponse, _a1 error) *ClientWithResponsesInterface_GetRemoteConnectionByIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRemoteConnectionsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetRemoteConnectionsWithResponse(ctx context.Context, params *domain.GetRemoteConnectionsParams) (*domain.GetRemoteConnectionsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetRemoteConnectionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetRemoteConnectionsParams) *domain.GetRemoteConnectionsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetRemoteConnectionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetRemoteConnectionsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetRemoteConnectionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteConnectionsWithResponse'
type ClientWithResponsesInterface_GetRemoteConnectionsWithResponse_Call struct {
	*mock.Call
}

// GetRemoteConnectionsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetRemoteConnectionsParams
func (_e *ClientWithResponsesInterface_Expecter) GetRemoteConnectionsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetRemoteConnectionsWithResponse_Call {
	return &ClientWithResponsesInterface_GetRemoteConnectionsWithResponse_Call{Call: _e.mock.On("GetRemoteConnectionsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetRemoteConnectionsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetRemoteConnectionsParams)) *ClientWithResponsesInterface_GetRemoteConnectionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetRemoteConnectionsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetRemoteConnectionsWithResponse_Call) Return(_a0 *domain.GetRemoteConnectionsResponse, _a1 error) *ClientWithResponsesInterface_GetRemoteConnectionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetReplicationByIDWithResponse provides a mock function with given fields: ctx, replicationID, params
func (_m *ClientWithResponsesInterface) GetReplicationByIDWithResponse(ctx context.Context, replicationID string, params *domain.GetReplicationByIDParams) (*domain.GetReplicationByIDResponse, error) {
	ret := _m.Called(ctx, replicationID, params)

	var r0 *domain.GetReplicationByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetReplicationByIDParams) *domain.GetReplicationByIDResponse); ok {
		r0 = rf(ctx, replicationID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetReplicationByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetReplicationByIDParams) error); ok {
		r1 = rf(ctx, replicationID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetReplicationByIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationByIDWithResponse'
type ClientWithResponsesInterface_GetReplicationByIDWithResponse_Call struct {
	*mock.Call
}

// GetReplicationByIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.GetReplicationByIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetReplicationByIDWithResponse(ctx interface{}, replicationID interface{}, params interface{}) *ClientWithResponsesInterface_GetReplicationByIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetReplicationByIDWithResponse_Call{Call: _e.mock.On("GetReplicationByIDWithResponse", ctx, replicationID, params)}
}

func (_c *ClientWithResponsesInterface_GetReplicationByIDWithResponse_Call) Run(run func(ctx context.Context, replicationID string, params *domain.GetReplicationByIDParams)) *ClientWithResponsesInterface_GetReplicationByIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetReplicationByIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetReplicationByIDWithResponse_Call) Return(_a0 *domain.GetReplicationByIDResponse, _a1 error) *ClientWithResponsesInterface_GetReplicationByIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetReplicationsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetReplicationsWithResponse(ctx context.Context, params *domain.GetReplicationsParams) (*domain.GetReplicationsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetReplicationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetReplicationsParams) *domain.GetReplicationsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetReplicationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetReplicationsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetReplicationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationsWithResponse'
type ClientWithResponsesInterface_GetReplicationsWithResponse_Call struct {
	*mock.Call
}

// GetReplicationsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetReplicationsParams
func (_e *ClientWithResponsesInterface_Expecter) GetReplicationsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetReplicationsWithResponse_Call {
	return &ClientWithResponsesInterface_GetReplicationsWithResponse_Call{Call: _e.mock.On("GetReplicationsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetReplicationsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetReplicationsParams)) *ClientWithResponsesInterface_GetReplicationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetReplicationsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetReplicationsWithResponse_Call) Return(_a0 *domain.GetReplicationsResponse, _a1 error) *ClientWithResponsesInterface_GetReplicationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetResourcesWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetResourcesWithResponse(ctx context.Context, params *domain.GetResourcesParams) (*domain.GetResourcesResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetResourcesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetResourcesParams) *domain.GetResourcesResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetResourcesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetResourcesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetResourcesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesWithResponse'
type ClientWithResponsesInterface_GetResourcesWithResponse_Call struct {
	*mock.Call
}

// GetResourcesWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetResourcesParams
func (_e *ClientWithResponsesInterface_Expecter) GetResourcesWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetResourcesWithResponse_Call {
	return &ClientWithResponsesInterface_GetResourcesWithResponse_Call{Call: _e.mock.On("GetResourcesWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetResourcesWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetResourcesParams)) *ClientWithResponsesInterface_GetResourcesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetResourcesParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetResourcesWithResponse_Call) Return(_a0 *domain.GetResourcesResponse, _a1 error) *ClientWithResponsesInterface_GetResourcesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRoutesWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetRoutesWithResponse(ctx context.Context, params *domain.GetRoutesParams) (*domain.GetRoutesResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetRoutesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetRoutesParams) *domain.GetRoutesResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetRoutesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetRoutesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetRoutesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoutesWithResponse'
type ClientWithResponsesInterface_GetRoutesWithResponse_Call struct {
	*mock.Call
}

// GetRoutesWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetRoutesParams
func (_e *ClientWithResponsesInterface_Expecter) GetRoutesWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetRoutesWithResponse_Call {
	return &ClientWithResponsesInterface_GetRoutesWithResponse_Call{Call: _e.mock.On("GetRoutesWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetRoutesWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetRoutesParams)) *ClientWithResponsesInterface_GetRoutesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetRoutesParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetRoutesWithResponse_Call) Return(_a0 *domain.GetRoutesResponse, _a1 error) *ClientWithResponsesInterface_GetRoutesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapersIDLabelsWithResponse provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientWithResponsesInterface) GetScrapersIDLabelsWithResponse(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDLabelsParams) (*domain.GetScrapersIDLabelsResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *domain.GetScrapersIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetScrapersIDLabelsParams) *domain.GetScrapersIDLabelsResponse); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetScrapersIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetScrapersIDLabelsParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetScrapersIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapersIDLabelsWithResponse'
type ClientWithResponsesInterface_GetScrapersIDLabelsWithResponse_Call struct {
	*mock.Call
}

// GetScrapersIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.GetScrapersIDLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetScrapersIDLabelsWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientWithResponsesInterface_GetScrapersIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetScrapersIDLabelsWithResponse_Call{Call: _e.mock.On("GetScrapersIDLabelsWithResponse", ctx, scraperTargetID, params)}
}

func (_c *ClientWithResponsesInterface_GetScrapersIDLabelsWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDLabelsParams)) *ClientWithResponsesInterface_GetScrapersIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetScrapersIDLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetScrapersIDLabelsWithResponse_Call) Return(_a0 *domain.GetScrapersIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetScrapersIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapersIDMembersWithResponse provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientWithResponsesInterface) GetScrapersIDMembersWithResponse(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDMembersParams) (*domain.GetScrapersIDMembersResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *domain.GetScrapersIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetScrapersIDMembersParams) *domain.GetScrapersIDMembersResponse); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetScrapersIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetScrapersIDMembersParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetScrapersIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapersIDMembersWithResponse'
type ClientWithResponsesInterface_GetScrapersIDMembersWithResponse_Call struct {
	*mock.Call
}

// GetScrapersIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.GetScrapersIDMembersParams
func (_e *ClientWithResponsesInterface_Expecter) GetScrapersIDMembersWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientWithResponsesInterface_GetScrapersIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_GetScrapersIDMembersWithResponse_Call{Call: _e.mock.On("GetScrapersIDMembersWithResponse", ctx, scraperTargetID, params)}
}

func (_c *ClientWithResponsesInterface_GetScrapersIDMembersWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDMembersParams)) *ClientWithResponsesInterface_GetScrapersIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetScrapersIDMembersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetScrapersIDMembersWithResponse_Call) Return(_a0 *domain.GetScrapersIDMembersResponse, _a1 error) *ClientWithResponsesInterface_GetScrapersIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapersIDOwnersWithResponse provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientWithResponsesInterface) GetScrapersIDOwnersWithResponse(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDOwnersParams) (*domain.GetScrapersIDOwnersResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *domain.GetScrapersIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetScrapersIDOwnersParams) *domain.GetScrapersIDOwnersResponse); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetScrapersIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetScrapersIDOwnersParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetScrapersIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapersIDOwnersWithResponse'
type ClientWithResponsesInterface_GetScrapersIDOwnersWithResponse_Call struct {
	*mock.Call
}

// GetScrapersIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.GetScrapersIDOwnersParams
func (_e *ClientWithResponsesInterface_Expecter) GetScrapersIDOwnersWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientWithResponsesInterface_GetScrapersIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_GetScrapersIDOwnersWithResponse_Call{Call: _e.mock.On("GetScrapersIDOwnersWithResponse", ctx, scraperTargetID, params)}
}

func (_c *ClientWithResponsesInterface_GetScrapersIDOwnersWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDOwnersParams)) *ClientWithResponsesInterface_GetScrapersIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetScrapersIDOwnersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetScrapersIDOwnersWithResponse_Call) Return(_a0 *domain.GetScrapersIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_GetScrapersIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapersIDWithResponse provides a mock function with given fields: ctx, scraperTargetID, params
func (_m *ClientWithResponsesInterface) GetScrapersIDWithResponse(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDParams) (*domain.GetScrapersIDResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params)

	var r0 *domain.GetScrapersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetScrapersIDParams) *domain.GetScrapersIDResponse); ok {
		r0 = rf(ctx, scraperTargetID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetScrapersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetScrapersIDParams) error); ok {
		r1 = rf(ctx, scraperTargetID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetScrapersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapersIDWithResponse'
type ClientWithResponsesInterface_GetScrapersIDWithResponse_Call struct {
	*mock.Call
}

// GetScrapersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.GetScrapersIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetScrapersIDWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}) *ClientWithResponsesInterface_GetScrapersIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetScrapersIDWithResponse_Call{Call: _e.mock.On("GetScrapersIDWithResponse", ctx, scraperTargetID, params)}
}

func (_c *ClientWithResponsesInterface_GetScrapersIDWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.GetScrapersIDParams)) *ClientWithResponsesInterface_GetScrapersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetScrapersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetScrapersIDWithResponse_Call) Return(_a0 *domain.GetScrapersIDResponse, _a1 error) *ClientWithResponsesInterface_GetScrapersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetScrapersWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetScrapersWithResponse(ctx context.Context, params *domain.GetScrapersParams) (*domain.GetScrapersResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetScrapersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetScrapersParams) *domain.GetScrapersResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetScrapersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetScrapersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetScrapersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScrapersWithResponse'
type ClientWithResponsesInterface_GetScrapersWithResponse_Call struct {
	*mock.Call
}

// GetScrapersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetScrapersParams
func (_e *ClientWithResponsesInterface_Expecter) GetScrapersWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetScrapersWithResponse_Call {
	return &ClientWithResponsesInterface_GetScrapersWithResponse_Call{Call: _e.mock.On("GetScrapersWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetScrapersWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetScrapersParams)) *ClientWithResponsesInterface_GetScrapersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetScrapersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetScrapersWithResponse_Call) Return(_a0 *domain.GetScrapersResponse, _a1 error) *ClientWithResponsesInterface_GetScrapersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSetupWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetSetupWithResponse(ctx context.Context, params *domain.GetSetupParams) (*domain.GetSetupResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetSetupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetSetupParams) *domain.GetSetupResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetSetupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetSetupParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetSetupWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSetupWithResponse'
type ClientWithResponsesInterface_GetSetupWithResponse_Call struct {
	*mock.Call
}

// GetSetupWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetSetupParams
func (_e *ClientWithResponsesInterface_Expecter) GetSetupWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetSetupWithResponse_Call {
	return &ClientWithResponsesInterface_GetSetupWithResponse_Call{Call: _e.mock.On("GetSetupWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetSetupWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetSetupParams)) *ClientWithResponsesInterface_GetSetupWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetSetupParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetSetupWithResponse_Call) Return(_a0 *domain.GetSetupResponse, _a1 error) *ClientWithResponsesInterface_GetSetupWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSourcesIDBucketsWithResponse provides a mock function with given fields: ctx, sourceID, params
func (_m *ClientWithResponsesInterface) GetSourcesIDBucketsWithResponse(ctx context.Context, sourceID string, params *domain.GetSourcesIDBucketsParams) (*domain.GetSourcesIDBucketsResponse, error) {
	ret := _m.Called(ctx, sourceID, params)

	var r0 *domain.GetSourcesIDBucketsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetSourcesIDBucketsParams) *domain.GetSourcesIDBucketsResponse); ok {
		r0 = rf(ctx, sourceID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetSourcesIDBucketsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetSourcesIDBucketsParams) error); ok {
		r1 = rf(ctx, sourceID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetSourcesIDBucketsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourcesIDBucketsWithResponse'
type ClientWithResponsesInterface_GetSourcesIDBucketsWithResponse_Call struct {
	*mock.Call
}

// GetSourcesIDBucketsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.GetSourcesIDBucketsParams
func (_e *ClientWithResponsesInterface_Expecter) GetSourcesIDBucketsWithResponse(ctx interface{}, sourceID interface{}, params interface{}) *ClientWithResponsesInterface_GetSourcesIDBucketsWithResponse_Call {
	return &ClientWithResponsesInterface_GetSourcesIDBucketsWithResponse_Call{Call: _e.mock.On("GetSourcesIDBucketsWithResponse", ctx, sourceID, params)}
}

func (_c *ClientWithResponsesInterface_GetSourcesIDBucketsWithResponse_Call) Run(run func(ctx context.Context, sourceID string, params *domain.GetSourcesIDBucketsParams)) *ClientWithResponsesInterface_GetSourcesIDBucketsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetSourcesIDBucketsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetSourcesIDBucketsWithResponse_Call) Return(_a0 *domain.GetSourcesIDBucketsResponse, _a1 error) *ClientWithResponsesInterface_GetSourcesIDBucketsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSourcesIDHealthWithResponse provides a mock function with given fields: ctx, sourceID, params
func (_m *ClientWithResponsesInterface) GetSourcesIDHealthWithResponse(ctx context.Context, sourceID string, params *domain.GetSourcesIDHealthParams) (*domain.GetSourcesIDHealthResponse, error) {
	ret := _m.Called(ctx, sourceID, params)

	var r0 *domain.GetSourcesIDHealthResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetSourcesIDHealthParams) *domain.GetSourcesIDHealthResponse); ok {
		r0 = rf(ctx, sourceID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetSourcesIDHealthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetSourcesIDHealthParams) error); ok {
		r1 = rf(ctx, sourceID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetSourcesIDHealthWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourcesIDHealthWithResponse'
type ClientWithResponsesInterface_GetSourcesIDHealthWithResponse_Call struct {
	*mock.Call
}

// GetSourcesIDHealthWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.GetSourcesIDHealthParams
func (_e *ClientWithResponsesInterface_Expecter) GetSourcesIDHealthWithResponse(ctx interface{}, sourceID interface{}, params interface{}) *ClientWithResponsesInterface_GetSourcesIDHealthWithResponse_Call {
	return &ClientWithResponsesInterface_GetSourcesIDHealthWithResponse_Call{Call: _e.mock.On("GetSourcesIDHealthWithResponse", ctx, sourceID, params)}
}

func (_c *ClientWithResponsesInterface_GetSourcesIDHealthWithResponse_Call) Run(run func(ctx context.Context, sourceID string, params *domain.GetSourcesIDHealthParams)) *ClientWithResponsesInterface_GetSourcesIDHealthWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetSourcesIDHealthParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetSourcesIDHealthWithResponse_Call) Return(_a0 *domain.GetSourcesIDHealthResponse, _a1 error) *ClientWithResponsesInterface_GetSourcesIDHealthWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSourcesIDWithResponse provides a mock function with given fields: ctx, sourceID, params
func (_m *ClientWithResponsesInterface) GetSourcesIDWithResponse(ctx context.Context, sourceID string, params *domain.GetSourcesIDParams) (*domain.GetSourcesIDResponse, error) {
	ret := _m.Called(ctx, sourceID, params)

	var r0 *domain.GetSourcesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetSourcesIDParams) *domain.GetSourcesIDResponse); ok {
		r0 = rf(ctx, sourceID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetSourcesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetSourcesIDParams) error); ok {
		r1 = rf(ctx, sourceID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetSourcesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourcesIDWithResponse'
type ClientWithResponsesInterface_GetSourcesIDWithResponse_Call struct {
	*mock.Call
}

// GetSourcesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.GetSourcesIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetSourcesIDWithResponse(ctx interface{}, sourceID interface{}, params interface{}) *ClientWithResponsesInterface_GetSourcesIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetSourcesIDWithResponse_Call{Call: _e.mock.On("GetSourcesIDWithResponse", ctx, sourceID, params)}
}

func (_c *ClientWithResponsesInterface_GetSourcesIDWithResponse_Call) Run(run func(ctx context.Context, sourceID string, params *domain.GetSourcesIDParams)) *ClientWithResponsesInterface_GetSourcesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetSourcesIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetSourcesIDWithResponse_Call) Return(_a0 *domain.GetSourcesIDResponse, _a1 error) *ClientWithResponsesInterface_GetSourcesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSourcesWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetSourcesWithResponse(ctx context.Context, params *domain.GetSourcesParams) (*domain.GetSourcesResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetSourcesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetSourcesParams) *domain.GetSourcesResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetSourcesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetSourcesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetSourcesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourcesWithResponse'
type ClientWithResponsesInterface_GetSourcesWithResponse_Call struct {
	*mock.Call
}

// GetSourcesWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetSourcesParams
func (_e *ClientWithResponsesInterface_Expecter) GetSourcesWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetSourcesWithResponse_Call {
	return &ClientWithResponsesInterface_GetSourcesWithResponse_Call{Call: _e.mock.On("GetSourcesWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetSourcesWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetSourcesParams)) *ClientWithResponsesInterface_GetSourcesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetSourcesParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetSourcesWithResponse_Call) Return(_a0 *domain.GetSourcesResponse, _a1 error) *ClientWithResponsesInterface_GetSourcesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDLabelsWithResponse provides a mock function with given fields: ctx, taskID, params
func (_m *ClientWithResponsesInterface) GetTasksIDLabelsWithResponse(ctx context.Context, taskID string, params *domain.GetTasksIDLabelsParams) (*domain.GetTasksIDLabelsResponse, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *domain.GetTasksIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDLabelsParams) *domain.GetTasksIDLabelsResponse); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTasksIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDLabelsParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTasksIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDLabelsWithResponse'
type ClientWithResponsesInterface_GetTasksIDLabelsWithResponse_Call struct {
	*mock.Call
}

// GetTasksIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetTasksIDLabelsWithResponse(ctx interface{}, taskID interface{}, params interface{}) *ClientWithResponsesInterface_GetTasksIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetTasksIDLabelsWithResponse_Call{Call: _e.mock.On("GetTasksIDLabelsWithResponse", ctx, taskID, params)}
}

func (_c *ClientWithResponsesInterface_GetTasksIDLabelsWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDLabelsParams)) *ClientWithResponsesInterface_GetTasksIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTasksIDLabelsWithResponse_Call) Return(_a0 *domain.GetTasksIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetTasksIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDLogsWithResponse provides a mock function with given fields: ctx, taskID, params
func (_m *ClientWithResponsesInterface) GetTasksIDLogsWithResponse(ctx context.Context, taskID string, params *domain.GetTasksIDLogsParams) (*domain.GetTasksIDLogsResponse, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *domain.GetTasksIDLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDLogsParams) *domain.GetTasksIDLogsResponse); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTasksIDLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDLogsParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTasksIDLogsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDLogsWithResponse'
type ClientWithResponsesInterface_GetTasksIDLogsWithResponse_Call struct {
	*mock.Call
}

// GetTasksIDLogsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDLogsParams
func (_e *ClientWithResponsesInterface_Expecter) GetTasksIDLogsWithResponse(ctx interface{}, taskID interface{}, params interface{}) *ClientWithResponsesInterface_GetTasksIDLogsWithResponse_Call {
	return &ClientWithResponsesInterface_GetTasksIDLogsWithResponse_Call{Call: _e.mock.On("GetTasksIDLogsWithResponse", ctx, taskID, params)}
}

func (_c *ClientWithResponsesInterface_GetTasksIDLogsWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDLogsParams)) *ClientWithResponsesInterface_GetTasksIDLogsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDLogsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTasksIDLogsWithResponse_Call) Return(_a0 *domain.GetTasksIDLogsResponse, _a1 error) *ClientWithResponsesInterface_GetTasksIDLogsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDMembersWithResponse provides a mock function with given fields: ctx, taskID, params
func (_m *ClientWithResponsesInterface) GetTasksIDMembersWithResponse(ctx context.Context, taskID string, params *domain.GetTasksIDMembersParams) (*domain.GetTasksIDMembersResponse, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *domain.GetTasksIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDMembersParams) *domain.GetTasksIDMembersResponse); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTasksIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDMembersParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTasksIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDMembersWithResponse'
type ClientWithResponsesInterface_GetTasksIDMembersWithResponse_Call struct {
	*mock.Call
}

// GetTasksIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDMembersParams
func (_e *ClientWithResponsesInterface_Expecter) GetTasksIDMembersWithResponse(ctx interface{}, taskID interface{}, params interface{}) *ClientWithResponsesInterface_GetTasksIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_GetTasksIDMembersWithResponse_Call{Call: _e.mock.On("GetTasksIDMembersWithResponse", ctx, taskID, params)}
}

func (_c *ClientWithResponsesInterface_GetTasksIDMembersWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDMembersParams)) *ClientWithResponsesInterface_GetTasksIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDMembersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTasksIDMembersWithResponse_Call) Return(_a0 *domain.GetTasksIDMembersResponse, _a1 error) *ClientWithResponsesInterface_GetTasksIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDOwnersWithResponse provides a mock function with given fields: ctx, taskID, params
func (_m *ClientWithResponsesInterface) GetTasksIDOwnersWithResponse(ctx context.Context, taskID string, params *domain.GetTasksIDOwnersParams) (*domain.GetTasksIDOwnersResponse, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *domain.GetTasksIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDOwnersParams) *domain.GetTasksIDOwnersResponse); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTasksIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDOwnersParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTasksIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDOwnersWithResponse'
type ClientWithResponsesInterface_GetTasksIDOwnersWithResponse_Call struct {
	*mock.Call
}

// GetTasksIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDOwnersParams
func (_e *ClientWithResponsesInterface_Expecter) GetTasksIDOwnersWithResponse(ctx interface{}, taskID interface{}, params interface{}) *ClientWithResponsesInterface_GetTasksIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_GetTasksIDOwnersWithResponse_Call{Call: _e.mock.On("GetTasksIDOwnersWithResponse", ctx, taskID, params)}
}

func (_c *ClientWithResponsesInterface_GetTasksIDOwnersWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDOwnersParams)) *ClientWithResponsesInterface_GetTasksIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDOwnersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTasksIDOwnersWithResponse_Call) Return(_a0 *domain.GetTasksIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_GetTasksIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDRunsIDLogsWithResponse provides a mock function with given fields: ctx, taskID, runID, params
func (_m *ClientWithResponsesInterface) GetTasksIDRunsIDLogsWithResponse(ctx context.Context, taskID string, runID string, params *domain.GetTasksIDRunsIDLogsParams) (*domain.GetTasksIDRunsIDLogsResponse, error) {
	ret := _m.Called(ctx, taskID, runID, params)

	var r0 *domain.GetTasksIDRunsIDLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.GetTasksIDRunsIDLogsParams) *domain.GetTasksIDRunsIDLogsResponse); ok {
		r0 = rf(ctx, taskID, runID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTasksIDRunsIDLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.GetTasksIDRunsIDLogsParams) error); ok {
		r1 = rf(ctx, taskID, runID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTasksIDRunsIDLogsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDRunsIDLogsWithResponse'
type ClientWithResponsesInterface_GetTasksIDRunsIDLogsWithResponse_Call struct {
	*mock.Call
}

// GetTasksIDRunsIDLogsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
//  - params *domain.GetTasksIDRunsIDLogsParams
func (_e *ClientWithResponsesInterface_Expecter) GetTasksIDRunsIDLogsWithResponse(ctx interface{}, taskID interface{}, runID interface{}, params interface{}) *ClientWithResponsesInterface_GetTasksIDRunsIDLogsWithResponse_Call {
	return &ClientWithResponsesInterface_GetTasksIDRunsIDLogsWithResponse_Call{Call: _e.mock.On("GetTasksIDRunsIDLogsWithResponse", ctx, taskID, runID, params)}
}

func (_c *ClientWithResponsesInterface_GetTasksIDRunsIDLogsWithResponse_Call) Run(run func(ctx context.Context, taskID string, runID string, params *domain.GetTasksIDRunsIDLogsParams)) *ClientWithResponsesInterface_GetTasksIDRunsIDLogsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.GetTasksIDRunsIDLogsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTasksIDRunsIDLogsWithResponse_Call) Return(_a0 *domain.GetTasksIDRunsIDLogsResponse, _a1 error) *ClientWithResponsesInterface_GetTasksIDRunsIDLogsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDRunsIDWithResponse provides a mock function with given fields: ctx, taskID, runID, params
func (_m *ClientWithResponsesInterface) GetTasksIDRunsIDWithResponse(ctx context.Context, taskID string, runID string, params *domain.GetTasksIDRunsIDParams) (*domain.GetTasksIDRunsIDResponse, error) {
	ret := _m.Called(ctx, taskID, runID, params)

	var r0 *domain.GetTasksIDRunsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.GetTasksIDRunsIDParams) *domain.GetTasksIDRunsIDResponse); ok {
		r0 = rf(ctx, taskID, runID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTasksIDRunsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.GetTasksIDRunsIDParams) error); ok {
		r1 = rf(ctx, taskID, runID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTasksIDRunsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDRunsIDWithResponse'
type ClientWithResponsesInterface_GetTasksIDRunsIDWithResponse_Call struct {
	*mock.Call
}

// GetTasksIDRunsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
//  - params *domain.GetTasksIDRunsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetTasksIDRunsIDWithResponse(ctx interface{}, taskID interface{}, runID interface{}, params interface{}) *ClientWithResponsesInterface_GetTasksIDRunsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetTasksIDRunsIDWithResponse_Call{Call: _e.mock.On("GetTasksIDRunsIDWithResponse", ctx, taskID, runID, params)}
}

func (_c *ClientWithResponsesInterface_GetTasksIDRunsIDWithResponse_Call) Run(run func(ctx context.Context, taskID string, runID string, params *domain.GetTasksIDRunsIDParams)) *ClientWithResponsesInterface_GetTasksIDRunsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.GetTasksIDRunsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTasksIDRunsIDWithResponse_Call) Return(_a0 *domain.GetTasksIDRunsIDResponse, _a1 error) *ClientWithResponsesInterface_GetTasksIDRunsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDRunsWithResponse provides a mock function with given fields: ctx, taskID, params
func (_m *ClientWithResponsesInterface) GetTasksIDRunsWithResponse(ctx context.Context, taskID string, params *domain.GetTasksIDRunsParams) (*domain.GetTasksIDRunsResponse, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *domain.GetTasksIDRunsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDRunsParams) *domain.GetTasksIDRunsResponse); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTasksIDRunsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDRunsParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTasksIDRunsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDRunsWithResponse'
type ClientWithResponsesInterface_GetTasksIDRunsWithResponse_Call struct {
	*mock.Call
}

// GetTasksIDRunsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDRunsParams
func (_e *ClientWithResponsesInterface_Expecter) GetTasksIDRunsWithResponse(ctx interface{}, taskID interface{}, params interface{}) *ClientWithResponsesInterface_GetTasksIDRunsWithResponse_Call {
	return &ClientWithResponsesInterface_GetTasksIDRunsWithResponse_Call{Call: _e.mock.On("GetTasksIDRunsWithResponse", ctx, taskID, params)}
}

func (_c *ClientWithResponsesInterface_GetTasksIDRunsWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDRunsParams)) *ClientWithResponsesInterface_GetTasksIDRunsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDRunsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTasksIDRunsWithResponse_Call) Return(_a0 *domain.GetTasksIDRunsResponse, _a1 error) *ClientWithResponsesInterface_GetTasksIDRunsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksIDWithResponse provides a mock function with given fields: ctx, taskID, params
func (_m *ClientWithResponsesInterface) GetTasksIDWithResponse(ctx context.Context, taskID string, params *domain.GetTasksIDParams) (*domain.GetTasksIDResponse, error) {
	ret := _m.Called(ctx, taskID, params)

	var r0 *domain.GetTasksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTasksIDParams) *domain.GetTasksIDResponse); ok {
		r0 = rf(ctx, taskID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTasksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTasksIDParams) error); ok {
		r1 = rf(ctx, taskID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTasksIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksIDWithResponse'
type ClientWithResponsesInterface_GetTasksIDWithResponse_Call struct {
	*mock.Call
}

// GetTasksIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.GetTasksIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetTasksIDWithResponse(ctx interface{}, taskID interface{}, params interface{}) *ClientWithResponsesInterface_GetTasksIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetTasksIDWithResponse_Call{Call: _e.mock.On("GetTasksIDWithResponse", ctx, taskID, params)}
}

func (_c *ClientWithResponsesInterface_GetTasksIDWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.GetTasksIDParams)) *ClientWithResponsesInterface_GetTasksIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTasksIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTasksIDWithResponse_Call) Return(_a0 *domain.GetTasksIDResponse, _a1 error) *ClientWithResponsesInterface_GetTasksIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTasksWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetTasksWithResponse(ctx context.Context, params *domain.GetTasksParams) (*domain.GetTasksResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetTasksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetTasksParams) *domain.GetTasksResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTasksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetTasksParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTasksWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksWithResponse'
type ClientWithResponsesInterface_GetTasksWithResponse_Call struct {
	*mock.Call
}

// GetTasksWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetTasksParams
func (_e *ClientWithResponsesInterface_Expecter) GetTasksWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetTasksWithResponse_Call {
	return &ClientWithResponsesInterface_GetTasksWithResponse_Call{Call: _e.mock.On("GetTasksWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetTasksWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetTasksParams)) *ClientWithResponsesInterface_GetTasksWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetTasksParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTasksWithResponse_Call) Return(_a0 *domain.GetTasksResponse, _a1 error) *ClientWithResponsesInterface_GetTasksWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafPluginsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetTelegrafPluginsWithResponse(ctx context.Context, params *domain.GetTelegrafPluginsParams) (*domain.GetTelegrafPluginsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetTelegrafPluginsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetTelegrafPluginsParams) *domain.GetTelegrafPluginsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTelegrafPluginsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetTelegrafPluginsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTelegrafPluginsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafPluginsWithResponse'
type ClientWithResponsesInterface_GetTelegrafPluginsWithResponse_Call struct {
	*mock.Call
}

// GetTelegrafPluginsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetTelegrafPluginsParams
func (_e *ClientWithResponsesInterface_Expecter) GetTelegrafPluginsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetTelegrafPluginsWithResponse_Call {
	return &ClientWithResponsesInterface_GetTelegrafPluginsWithResponse_Call{Call: _e.mock.On("GetTelegrafPluginsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetTelegrafPluginsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetTelegrafPluginsParams)) *ClientWithResponsesInterface_GetTelegrafPluginsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetTelegrafPluginsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTelegrafPluginsWithResponse_Call) Return(_a0 *domain.GetTelegrafPluginsResponse, _a1 error) *ClientWithResponsesInterface_GetTelegrafPluginsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafsIDLabelsWithResponse provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientWithResponsesInterface) GetTelegrafsIDLabelsWithResponse(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDLabelsParams) (*domain.GetTelegrafsIDLabelsResponse, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *domain.GetTelegrafsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTelegrafsIDLabelsParams) *domain.GetTelegrafsIDLabelsResponse); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTelegrafsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTelegrafsIDLabelsParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTelegrafsIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafsIDLabelsWithResponse'
type ClientWithResponsesInterface_GetTelegrafsIDLabelsWithResponse_Call struct {
	*mock.Call
}

// GetTelegrafsIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.GetTelegrafsIDLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetTelegrafsIDLabelsWithResponse(ctx interface{}, telegrafID interface{}, params interface{}) *ClientWithResponsesInterface_GetTelegrafsIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetTelegrafsIDLabelsWithResponse_Call{Call: _e.mock.On("GetTelegrafsIDLabelsWithResponse", ctx, telegrafID, params)}
}

func (_c *ClientWithResponsesInterface_GetTelegrafsIDLabelsWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDLabelsParams)) *ClientWithResponsesInterface_GetTelegrafsIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTelegrafsIDLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTelegrafsIDLabelsWithResponse_Call) Return(_a0 *domain.GetTelegrafsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetTelegrafsIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafsIDMembersWithResponse provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientWithResponsesInterface) GetTelegrafsIDMembersWithResponse(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDMembersParams) (*domain.GetTelegrafsIDMembersResponse, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *domain.GetTelegrafsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTelegrafsIDMembersParams) *domain.GetTelegrafsIDMembersResponse); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTelegrafsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTelegrafsIDMembersParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTelegrafsIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafsIDMembersWithResponse'
type ClientWithResponsesInterface_GetTelegrafsIDMembersWithResponse_Call struct {
	*mock.Call
}

// GetTelegrafsIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.GetTelegrafsIDMembersParams
func (_e *ClientWithResponsesInterface_Expecter) GetTelegrafsIDMembersWithResponse(ctx interface{}, telegrafID interface{}, params interface{}) *ClientWithResponsesInterface_GetTelegrafsIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_GetTelegrafsIDMembersWithResponse_Call{Call: _e.mock.On("GetTelegrafsIDMembersWithResponse", ctx, telegrafID, params)}
}

func (_c *ClientWithResponsesInterface_GetTelegrafsIDMembersWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDMembersParams)) *ClientWithResponsesInterface_GetTelegrafsIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTelegrafsIDMembersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTelegrafsIDMembersWithResponse_Call) Return(_a0 *domain.GetTelegrafsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_GetTelegrafsIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafsIDOwnersWithResponse provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientWithResponsesInterface) GetTelegrafsIDOwnersWithResponse(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDOwnersParams) (*domain.GetTelegrafsIDOwnersResponse, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *domain.GetTelegrafsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTelegrafsIDOwnersParams) *domain.GetTelegrafsIDOwnersResponse); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTelegrafsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTelegrafsIDOwnersParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTelegrafsIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafsIDOwnersWithResponse'
type ClientWithResponsesInterface_GetTelegrafsIDOwnersWithResponse_Call struct {
	*mock.Call
}

// GetTelegrafsIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.GetTelegrafsIDOwnersParams
func (_e *ClientWithResponsesInterface_Expecter) GetTelegrafsIDOwnersWithResponse(ctx interface{}, telegrafID interface{}, params interface{}) *ClientWithResponsesInterface_GetTelegrafsIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_GetTelegrafsIDOwnersWithResponse_Call{Call: _e.mock.On("GetTelegrafsIDOwnersWithResponse", ctx, telegrafID, params)}
}

func (_c *ClientWithResponsesInterface_GetTelegrafsIDOwnersWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDOwnersParams)) *ClientWithResponsesInterface_GetTelegrafsIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTelegrafsIDOwnersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTelegrafsIDOwnersWithResponse_Call) Return(_a0 *domain.GetTelegrafsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_GetTelegrafsIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafsIDWithResponse provides a mock function with given fields: ctx, telegrafID, params
func (_m *ClientWithResponsesInterface) GetTelegrafsIDWithResponse(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDParams) (*domain.GetTelegrafsIDResponse, error) {
	ret := _m.Called(ctx, telegrafID, params)

	var r0 *domain.GetTelegrafsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetTelegrafsIDParams) *domain.GetTelegrafsIDResponse); ok {
		r0 = rf(ctx, telegrafID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTelegrafsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetTelegrafsIDParams) error); ok {
		r1 = rf(ctx, telegrafID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTelegrafsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafsIDWithResponse'
type ClientWithResponsesInterface_GetTelegrafsIDWithResponse_Call struct {
	*mock.Call
}

// GetTelegrafsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.GetTelegrafsIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetTelegrafsIDWithResponse(ctx interface{}, telegrafID interface{}, params interface{}) *ClientWithResponsesInterface_GetTelegrafsIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetTelegrafsIDWithResponse_Call{Call: _e.mock.On("GetTelegrafsIDWithResponse", ctx, telegrafID, params)}
}

func (_c *ClientWithResponsesInterface_GetTelegrafsIDWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.GetTelegrafsIDParams)) *ClientWithResponsesInterface_GetTelegrafsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetTelegrafsIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTelegrafsIDWithResponse_Call) Return(_a0 *domain.GetTelegrafsIDResponse, _a1 error) *ClientWithResponsesInterface_GetTelegrafsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTelegrafsWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetTelegrafsWithResponse(ctx context.Context, params *domain.GetTelegrafsParams) (*domain.GetTelegrafsResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetTelegrafsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetTelegrafsParams) *domain.GetTelegrafsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetTelegrafsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetTelegrafsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetTelegrafsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegrafsWithResponse'
type ClientWithResponsesInterface_GetTelegrafsWithResponse_Call struct {
	*mock.Call
}

// GetTelegrafsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetTelegrafsParams
func (_e *ClientWithResponsesInterface_Expecter) GetTelegrafsWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetTelegrafsWithResponse_Call {
	return &ClientWithResponsesInterface_GetTelegrafsWithResponse_Call{Call: _e.mock.On("GetTelegrafsWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetTelegrafsWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetTelegrafsParams)) *ClientWithResponsesInterface_GetTelegrafsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetTelegrafsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetTelegrafsWithResponse_Call) Return(_a0 *domain.GetTelegrafsResponse, _a1 error) *ClientWithResponsesInterface_GetTelegrafsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUsersIDWithResponse provides a mock function with given fields: ctx, userID, params
func (_m *ClientWithResponsesInterface) GetUsersIDWithResponse(ctx context.Context, userID string, params *domain.GetUsersIDParams) (*domain.GetUsersIDResponse, error) {
	ret := _m.Called(ctx, userID, params)

	var r0 *domain.GetUsersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetUsersIDParams) *domain.GetUsersIDResponse); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetUsersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetUsersIDParams) error); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetUsersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersIDWithResponse'
type ClientWithResponsesInterface_GetUsersIDWithResponse_Call struct {
	*mock.Call
}

// GetUsersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.GetUsersIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetUsersIDWithResponse(ctx interface{}, userID interface{}, params interface{}) *ClientWithResponsesInterface_GetUsersIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetUsersIDWithResponse_Call{Call: _e.mock.On("GetUsersIDWithResponse", ctx, userID, params)}
}

func (_c *ClientWithResponsesInterface_GetUsersIDWithResponse_Call) Run(run func(ctx context.Context, userID string, params *domain.GetUsersIDParams)) *ClientWithResponsesInterface_GetUsersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetUsersIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetUsersIDWithResponse_Call) Return(_a0 *domain.GetUsersIDResponse, _a1 error) *ClientWithResponsesInterface_GetUsersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUsersWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetUsersWithResponse(ctx context.Context, params *domain.GetUsersParams) (*domain.GetUsersResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetUsersParams) *domain.GetUsersResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetUsersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetUsersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersWithResponse'
type ClientWithResponsesInterface_GetUsersWithResponse_Call struct {
	*mock.Call
}

// GetUsersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetUsersParams
func (_e *ClientWithResponsesInterface_Expecter) GetUsersWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetUsersWithResponse_Call {
	return &ClientWithResponsesInterface_GetUsersWithResponse_Call{Call: _e.mock.On("GetUsersWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetUsersWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetUsersParams)) *ClientWithResponsesInterface_GetUsersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetUsersParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetUsersWithResponse_Call) Return(_a0 *domain.GetUsersResponse, _a1 error) *ClientWithResponsesInterface_GetUsersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetVariablesIDLabelsWithResponse provides a mock function with given fields: ctx, variableID, params
func (_m *ClientWithResponsesInterface) GetVariablesIDLabelsWithResponse(ctx context.Context, variableID string, params *domain.GetVariablesIDLabelsParams) (*domain.GetVariablesIDLabelsResponse, error) {
	ret := _m.Called(ctx, variableID, params)

	var r0 *domain.GetVariablesIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetVariablesIDLabelsParams) *domain.GetVariablesIDLabelsResponse); ok {
		r0 = rf(ctx, variableID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetVariablesIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetVariablesIDLabelsParams) error); ok {
		r1 = rf(ctx, variableID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetVariablesIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariablesIDLabelsWithResponse'
type ClientWithResponsesInterface_GetVariablesIDLabelsWithResponse_Call struct {
	*mock.Call
}

// GetVariablesIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.GetVariablesIDLabelsParams
func (_e *ClientWithResponsesInterface_Expecter) GetVariablesIDLabelsWithResponse(ctx interface{}, variableID interface{}, params interface{}) *ClientWithResponsesInterface_GetVariablesIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_GetVariablesIDLabelsWithResponse_Call{Call: _e.mock.On("GetVariablesIDLabelsWithResponse", ctx, variableID, params)}
}

func (_c *ClientWithResponsesInterface_GetVariablesIDLabelsWithResponse_Call) Run(run func(ctx context.Context, variableID string, params *domain.GetVariablesIDLabelsParams)) *ClientWithResponsesInterface_GetVariablesIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetVariablesIDLabelsParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetVariablesIDLabelsWithResponse_Call) Return(_a0 *domain.GetVariablesIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_GetVariablesIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetVariablesIDWithResponse provides a mock function with given fields: ctx, variableID, params
func (_m *ClientWithResponsesInterface) GetVariablesIDWithResponse(ctx context.Context, variableID string, params *domain.GetVariablesIDParams) (*domain.GetVariablesIDResponse, error) {
	ret := _m.Called(ctx, variableID, params)

	var r0 *domain.GetVariablesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.GetVariablesIDParams) *domain.GetVariablesIDResponse); ok {
		r0 = rf(ctx, variableID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetVariablesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.GetVariablesIDParams) error); ok {
		r1 = rf(ctx, variableID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetVariablesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariablesIDWithResponse'
type ClientWithResponsesInterface_GetVariablesIDWithResponse_Call struct {
	*mock.Call
}

// GetVariablesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.GetVariablesIDParams
func (_e *ClientWithResponsesInterface_Expecter) GetVariablesIDWithResponse(ctx interface{}, variableID interface{}, params interface{}) *ClientWithResponsesInterface_GetVariablesIDWithResponse_Call {
	return &ClientWithResponsesInterface_GetVariablesIDWithResponse_Call{Call: _e.mock.On("GetVariablesIDWithResponse", ctx, variableID, params)}
}

func (_c *ClientWithResponsesInterface_GetVariablesIDWithResponse_Call) Run(run func(ctx context.Context, variableID string, params *domain.GetVariablesIDParams)) *ClientWithResponsesInterface_GetVariablesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.GetVariablesIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetVariablesIDWithResponse_Call) Return(_a0 *domain.GetVariablesIDResponse, _a1 error) *ClientWithResponsesInterface_GetVariablesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetVariablesWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) GetVariablesWithResponse(ctx context.Context, params *domain.GetVariablesParams) (*domain.GetVariablesResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.GetVariablesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetVariablesParams) *domain.GetVariablesResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.GetVariablesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetVariablesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_GetVariablesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariablesWithResponse'
type ClientWithResponsesInterface_GetVariablesWithResponse_Call struct {
	*mock.Call
}

// GetVariablesWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.GetVariablesParams
func (_e *ClientWithResponsesInterface_Expecter) GetVariablesWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_GetVariablesWithResponse_Call {
	return &ClientWithResponsesInterface_GetVariablesWithResponse_Call{Call: _e.mock.On("GetVariablesWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_GetVariablesWithResponse_Call) Run(run func(ctx context.Context, params *domain.GetVariablesParams)) *ClientWithResponsesInterface_GetVariablesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.GetVariablesParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_GetVariablesWithResponse_Call) Return(_a0 *domain.GetVariablesResponse, _a1 error) *ClientWithResponsesInterface_GetVariablesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// HeadPingWithResponse provides a mock function with given fields: ctx
func (_m *ClientWithResponsesInterface) HeadPingWithResponse(ctx context.Context) (*domain.HeadPingResponse, error) {
	ret := _m.Called(ctx)

	var r0 *domain.HeadPingResponse
	if rf, ok := ret.Get(0).(func(context.Context) *domain.HeadPingResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.HeadPingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_HeadPingWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadPingWithResponse'
type ClientWithResponsesInterface_HeadPingWithResponse_Call struct {
	*mock.Call
}

// HeadPingWithResponse is a helper method to define mock.On call
//  - ctx context.Context
func (_e *ClientWithResponsesInterface_Expecter) HeadPingWithResponse(ctx interface{}) *ClientWithResponsesInterface_HeadPingWithResponse_Call {
	return &ClientWithResponsesInterface_HeadPingWithResponse_Call{Call: _e.mock.On("HeadPingWithResponse", ctx)}
}

func (_c *ClientWithResponsesInterface_HeadPingWithResponse_Call) Run(run func(ctx context.Context)) *ClientWithResponsesInterface_HeadPingWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_HeadPingWithResponse_Call) Return(_a0 *domain.HeadPingResponse, _a1 error) *ClientWithResponsesInterface_HeadPingWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListStacksWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) ListStacksWithResponse(ctx context.Context, params *domain.ListStacksParams) (*domain.ListStacksResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.ListStacksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListStacksParams) *domain.ListStacksResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ListStacksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListStacksParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_ListStacksWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStacksWithResponse'
type ClientWithResponsesInterface_ListStacksWithResponse_Call struct {
	*mock.Call
}

// ListStacksWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.ListStacksParams
func (_e *ClientWithResponsesInterface_Expecter) ListStacksWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_ListStacksWithResponse_Call {
	return &ClientWithResponsesInterface_ListStacksWithResponse_Call{Call: _e.mock.On("ListStacksWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_ListStacksWithResponse_Call) Run(run func(ctx context.Context, params *domain.ListStacksParams)) *ClientWithResponsesInterface_ListStacksWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListStacksParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_ListStacksWithResponse_Call) Return(_a0 *domain.ListStacksResponse, _a1 error) *ClientWithResponsesInterface_ListStacksWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchAuthorizationsIDWithBodyWithResponse provides a mock function with given fields: ctx, authID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchAuthorizationsIDWithBodyWithResponse(ctx context.Context, authID string, params *domain.PatchAuthorizationsIDParams, contentType string, body io.Reader) (*domain.PatchAuthorizationsIDResponse, error) {
	ret := _m.Called(ctx, authID, params, contentType, body)

	var r0 *domain.PatchAuthorizationsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchAuthorizationsIDParams, string, io.Reader) *domain.PatchAuthorizationsIDResponse); ok {
		r0 = rf(ctx, authID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchAuthorizationsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchAuthorizationsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, authID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchAuthorizationsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchAuthorizationsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchAuthorizationsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchAuthorizationsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PatchAuthorizationsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchAuthorizationsIDWithBodyWithResponse(ctx interface{}, authID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchAuthorizationsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchAuthorizationsIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchAuthorizationsIDWithBodyWithResponse", ctx, authID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchAuthorizationsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.PatchAuthorizationsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchAuthorizationsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchAuthorizationsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchAuthorizationsIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchAuthorizationsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchAuthorizationsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchAuthorizationsIDWithResponse provides a mock function with given fields: ctx, authID, params, body
func (_m *ClientWithResponsesInterface) PatchAuthorizationsIDWithResponse(ctx context.Context, authID string, params *domain.PatchAuthorizationsIDParams, body domain.PatchAuthorizationsIDJSONRequestBody) (*domain.PatchAuthorizationsIDResponse, error) {
	ret := _m.Called(ctx, authID, params, body)

	var r0 *domain.PatchAuthorizationsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchAuthorizationsIDParams, domain.PatchAuthorizationsIDJSONRequestBody) *domain.PatchAuthorizationsIDResponse); ok {
		r0 = rf(ctx, authID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchAuthorizationsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchAuthorizationsIDParams, domain.PatchAuthorizationsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, authID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchAuthorizationsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchAuthorizationsIDWithResponse'
type ClientWithResponsesInterface_PatchAuthorizationsIDWithResponse_Call struct {
	*mock.Call
}

// PatchAuthorizationsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PatchAuthorizationsIDParams
//  - body domain.PatchAuthorizationsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchAuthorizationsIDWithResponse(ctx interface{}, authID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchAuthorizationsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchAuthorizationsIDWithResponse_Call{Call: _e.mock.On("PatchAuthorizationsIDWithResponse", ctx, authID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchAuthorizationsIDWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.PatchAuthorizationsIDParams, body domain.PatchAuthorizationsIDJSONRequestBody)) *ClientWithResponsesInterface_PatchAuthorizationsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchAuthorizationsIDParams), args[3].(domain.PatchAuthorizationsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchAuthorizationsIDWithResponse_Call) Return(_a0 *domain.PatchAuthorizationsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchAuthorizationsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchBucketsIDWithBodyWithResponse provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchBucketsIDWithBodyWithResponse(ctx context.Context, bucketID string, params *domain.PatchBucketsIDParams, contentType string, body io.Reader) (*domain.PatchBucketsIDResponse, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *domain.PatchBucketsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchBucketsIDParams, string, io.Reader) *domain.PatchBucketsIDResponse); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchBucketsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchBucketsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchBucketsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchBucketsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchBucketsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchBucketsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PatchBucketsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchBucketsIDWithBodyWithResponse(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchBucketsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchBucketsIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchBucketsIDWithBodyWithResponse", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchBucketsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PatchBucketsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchBucketsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchBucketsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchBucketsIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchBucketsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchBucketsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchBucketsIDWithResponse provides a mock function with given fields: ctx, bucketID, params, body
func (_m *ClientWithResponsesInterface) PatchBucketsIDWithResponse(ctx context.Context, bucketID string, params *domain.PatchBucketsIDParams, body domain.PatchBucketsIDJSONRequestBody) (*domain.PatchBucketsIDResponse, error) {
	ret := _m.Called(ctx, bucketID, params, body)

	var r0 *domain.PatchBucketsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchBucketsIDParams, domain.PatchBucketsIDJSONRequestBody) *domain.PatchBucketsIDResponse); ok {
		r0 = rf(ctx, bucketID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchBucketsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchBucketsIDParams, domain.PatchBucketsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, bucketID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchBucketsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchBucketsIDWithResponse'
type ClientWithResponsesInterface_PatchBucketsIDWithResponse_Call struct {
	*mock.Call
}

// PatchBucketsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PatchBucketsIDParams
//  - body domain.PatchBucketsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchBucketsIDWithResponse(ctx interface{}, bucketID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchBucketsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchBucketsIDWithResponse_Call{Call: _e.mock.On("PatchBucketsIDWithResponse", ctx, bucketID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchBucketsIDWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PatchBucketsIDParams, body domain.PatchBucketsIDJSONRequestBody)) *ClientWithResponsesInterface_PatchBucketsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchBucketsIDParams), args[3].(domain.PatchBucketsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchBucketsIDWithResponse_Call) Return(_a0 *domain.PatchBucketsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchBucketsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchChecksIDWithBodyWithResponse provides a mock function with given fields: ctx, checkID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchChecksIDWithBodyWithResponse(ctx context.Context, checkID string, params *domain.PatchChecksIDParams, contentType string, body io.Reader) (*domain.PatchChecksIDResponse, error) {
	ret := _m.Called(ctx, checkID, params, contentType, body)

	var r0 *domain.PatchChecksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchChecksIDParams, string, io.Reader) *domain.PatchChecksIDResponse); ok {
		r0 = rf(ctx, checkID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchChecksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchChecksIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, checkID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchChecksIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchChecksIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchChecksIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchChecksIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PatchChecksIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchChecksIDWithBodyWithResponse(ctx interface{}, checkID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchChecksIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchChecksIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchChecksIDWithBodyWithResponse", ctx, checkID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchChecksIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.PatchChecksIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchChecksIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchChecksIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchChecksIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchChecksIDResponse, _a1 error) *ClientWithResponsesInterface_PatchChecksIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchChecksIDWithResponse provides a mock function with given fields: ctx, checkID, params, body
func (_m *ClientWithResponsesInterface) PatchChecksIDWithResponse(ctx context.Context, checkID string, params *domain.PatchChecksIDParams, body domain.PatchChecksIDJSONRequestBody) (*domain.PatchChecksIDResponse, error) {
	ret := _m.Called(ctx, checkID, params, body)

	var r0 *domain.PatchChecksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchChecksIDParams, domain.PatchChecksIDJSONRequestBody) *domain.PatchChecksIDResponse); ok {
		r0 = rf(ctx, checkID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchChecksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchChecksIDParams, domain.PatchChecksIDJSONRequestBody) error); ok {
		r1 = rf(ctx, checkID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchChecksIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchChecksIDWithResponse'
type ClientWithResponsesInterface_PatchChecksIDWithResponse_Call struct {
	*mock.Call
}

// PatchChecksIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PatchChecksIDParams
//  - body domain.PatchChecksIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchChecksIDWithResponse(ctx interface{}, checkID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchChecksIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchChecksIDWithResponse_Call{Call: _e.mock.On("PatchChecksIDWithResponse", ctx, checkID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchChecksIDWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.PatchChecksIDParams, body domain.PatchChecksIDJSONRequestBody)) *ClientWithResponsesInterface_PatchChecksIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchChecksIDParams), args[3].(domain.PatchChecksIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchChecksIDWithResponse_Call) Return(_a0 *domain.PatchChecksIDResponse, _a1 error) *ClientWithResponsesInterface_PatchChecksIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDBRPIDWithBodyWithResponse provides a mock function with given fields: ctx, dbrpID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchDBRPIDWithBodyWithResponse(ctx context.Context, dbrpID string, params *domain.PatchDBRPIDParams, contentType string, body io.Reader) (*domain.PatchDBRPIDResponse, error) {
	ret := _m.Called(ctx, dbrpID, params, contentType, body)

	var r0 *domain.PatchDBRPIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchDBRPIDParams, string, io.Reader) *domain.PatchDBRPIDResponse); ok {
		r0 = rf(ctx, dbrpID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchDBRPIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchDBRPIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dbrpID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchDBRPIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDBRPIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchDBRPIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchDBRPIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dbrpID string
//  - params *domain.PatchDBRPIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchDBRPIDWithBodyWithResponse(ctx interface{}, dbrpID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchDBRPIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchDBRPIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchDBRPIDWithBodyWithResponse", ctx, dbrpID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchDBRPIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, dbrpID string, params *domain.PatchDBRPIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchDBRPIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchDBRPIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchDBRPIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchDBRPIDResponse, _a1 error) *ClientWithResponsesInterface_PatchDBRPIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDBRPIDWithResponse provides a mock function with given fields: ctx, dbrpID, params, body
func (_m *ClientWithResponsesInterface) PatchDBRPIDWithResponse(ctx context.Context, dbrpID string, params *domain.PatchDBRPIDParams, body domain.PatchDBRPIDJSONRequestBody) (*domain.PatchDBRPIDResponse, error) {
	ret := _m.Called(ctx, dbrpID, params, body)

	var r0 *domain.PatchDBRPIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchDBRPIDParams, domain.PatchDBRPIDJSONRequestBody) *domain.PatchDBRPIDResponse); ok {
		r0 = rf(ctx, dbrpID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchDBRPIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchDBRPIDParams, domain.PatchDBRPIDJSONRequestBody) error); ok {
		r1 = rf(ctx, dbrpID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchDBRPIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDBRPIDWithResponse'
type ClientWithResponsesInterface_PatchDBRPIDWithResponse_Call struct {
	*mock.Call
}

// PatchDBRPIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dbrpID string
//  - params *domain.PatchDBRPIDParams
//  - body domain.PatchDBRPIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchDBRPIDWithResponse(ctx interface{}, dbrpID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchDBRPIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchDBRPIDWithResponse_Call{Call: _e.mock.On("PatchDBRPIDWithResponse", ctx, dbrpID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchDBRPIDWithResponse_Call) Run(run func(ctx context.Context, dbrpID string, params *domain.PatchDBRPIDParams, body domain.PatchDBRPIDJSONRequestBody)) *ClientWithResponsesInterface_PatchDBRPIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchDBRPIDParams), args[3].(domain.PatchDBRPIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchDBRPIDWithResponse_Call) Return(_a0 *domain.PatchDBRPIDResponse, _a1 error) *ClientWithResponsesInterface_PatchDBRPIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDCellsIDViewWithBodyWithResponse provides a mock function with given fields: ctx, dashboardID, cellID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchDashboardsIDCellsIDViewWithBodyWithResponse(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDViewParams, contentType string, body io.Reader) (*domain.PatchDashboardsIDCellsIDViewResponse, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params, contentType, body)

	var r0 *domain.PatchDashboardsIDCellsIDViewResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDViewParams, string, io.Reader) *domain.PatchDashboardsIDCellsIDViewResponse); ok {
		r0 = rf(ctx, dashboardID, cellID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchDashboardsIDCellsIDViewResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDViewParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDCellsIDViewWithBodyWithResponse'
type ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchDashboardsIDCellsIDViewWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.PatchDashboardsIDCellsIDViewParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchDashboardsIDCellsIDViewWithBodyWithResponse(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithBodyWithResponse_Call{Call: _e.mock.On("PatchDashboardsIDCellsIDViewWithBodyWithResponse", ctx, dashboardID, cellID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithBodyWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDViewParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PatchDashboardsIDCellsIDViewParams), args[4].(string), args[5].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithBodyWithResponse_Call) Return(_a0 *domain.PatchDashboardsIDCellsIDViewResponse, _a1 error) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDCellsIDViewWithResponse provides a mock function with given fields: ctx, dashboardID, cellID, params, body
func (_m *ClientWithResponsesInterface) PatchDashboardsIDCellsIDViewWithResponse(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDViewParams, body domain.PatchDashboardsIDCellsIDViewJSONRequestBody) (*domain.PatchDashboardsIDCellsIDViewResponse, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params, body)

	var r0 *domain.PatchDashboardsIDCellsIDViewResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDViewParams, domain.PatchDashboardsIDCellsIDViewJSONRequestBody) *domain.PatchDashboardsIDCellsIDViewResponse); ok {
		r0 = rf(ctx, dashboardID, cellID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchDashboardsIDCellsIDViewResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDViewParams, domain.PatchDashboardsIDCellsIDViewJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDCellsIDViewWithResponse'
type ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithResponse_Call struct {
	*mock.Call
}

// PatchDashboardsIDCellsIDViewWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.PatchDashboardsIDCellsIDViewParams
//  - body domain.PatchDashboardsIDCellsIDViewJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchDashboardsIDCellsIDViewWithResponse(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithResponse_Call {
	return &ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithResponse_Call{Call: _e.mock.On("PatchDashboardsIDCellsIDViewWithResponse", ctx, dashboardID, cellID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDViewParams, body domain.PatchDashboardsIDCellsIDViewJSONRequestBody)) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PatchDashboardsIDCellsIDViewParams), args[4].(domain.PatchDashboardsIDCellsIDViewJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithResponse_Call) Return(_a0 *domain.PatchDashboardsIDCellsIDViewResponse, _a1 error) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDViewWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDCellsIDWithBodyWithResponse provides a mock function with given fields: ctx, dashboardID, cellID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchDashboardsIDCellsIDWithBodyWithResponse(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDParams, contentType string, body io.Reader) (*domain.PatchDashboardsIDCellsIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params, contentType, body)

	var r0 *domain.PatchDashboardsIDCellsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDParams, string, io.Reader) *domain.PatchDashboardsIDCellsIDResponse); ok {
		r0 = rf(ctx, dashboardID, cellID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchDashboardsIDCellsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDCellsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchDashboardsIDCellsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.PatchDashboardsIDCellsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchDashboardsIDCellsIDWithBodyWithResponse(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchDashboardsIDCellsIDWithBodyWithResponse", ctx, dashboardID, cellID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PatchDashboardsIDCellsIDParams), args[4].(string), args[5].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchDashboardsIDCellsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDCellsIDWithResponse provides a mock function with given fields: ctx, dashboardID, cellID, params, body
func (_m *ClientWithResponsesInterface) PatchDashboardsIDCellsIDWithResponse(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDParams, body domain.PatchDashboardsIDCellsIDJSONRequestBody) (*domain.PatchDashboardsIDCellsIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, cellID, params, body)

	var r0 *domain.PatchDashboardsIDCellsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDParams, domain.PatchDashboardsIDCellsIDJSONRequestBody) *domain.PatchDashboardsIDCellsIDResponse); ok {
		r0 = rf(ctx, dashboardID, cellID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchDashboardsIDCellsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PatchDashboardsIDCellsIDParams, domain.PatchDashboardsIDCellsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, cellID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDCellsIDWithResponse'
type ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithResponse_Call struct {
	*mock.Call
}

// PatchDashboardsIDCellsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - cellID string
//  - params *domain.PatchDashboardsIDCellsIDParams
//  - body domain.PatchDashboardsIDCellsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchDashboardsIDCellsIDWithResponse(ctx interface{}, dashboardID interface{}, cellID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithResponse_Call{Call: _e.mock.On("PatchDashboardsIDCellsIDWithResponse", ctx, dashboardID, cellID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, cellID string, params *domain.PatchDashboardsIDCellsIDParams, body domain.PatchDashboardsIDCellsIDJSONRequestBody)) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PatchDashboardsIDCellsIDParams), args[4].(domain.PatchDashboardsIDCellsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithResponse_Call) Return(_a0 *domain.PatchDashboardsIDCellsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchDashboardsIDCellsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDWithBodyWithResponse provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchDashboardsIDWithBodyWithResponse(ctx context.Context, dashboardID string, params *domain.PatchDashboardsIDParams, contentType string, body io.Reader) (*domain.PatchDashboardsIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *domain.PatchDashboardsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchDashboardsIDParams, string, io.Reader) *domain.PatchDashboardsIDResponse); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchDashboardsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchDashboardsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchDashboardsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchDashboardsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchDashboardsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PatchDashboardsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchDashboardsIDWithBodyWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchDashboardsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchDashboardsIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchDashboardsIDWithBodyWithResponse", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PatchDashboardsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchDashboardsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchDashboardsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchDashboardsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchDashboardsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDashboardsIDWithResponse provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientWithResponsesInterface) PatchDashboardsIDWithResponse(ctx context.Context, dashboardID string, params *domain.PatchDashboardsIDParams, body domain.PatchDashboardsIDJSONRequestBody) (*domain.PatchDashboardsIDResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *domain.PatchDashboardsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchDashboardsIDParams, domain.PatchDashboardsIDJSONRequestBody) *domain.PatchDashboardsIDResponse); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchDashboardsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchDashboardsIDParams, domain.PatchDashboardsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchDashboardsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDashboardsIDWithResponse'
type ClientWithResponsesInterface_PatchDashboardsIDWithResponse_Call struct {
	*mock.Call
}

// PatchDashboardsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PatchDashboardsIDParams
//  - body domain.PatchDashboardsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchDashboardsIDWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchDashboardsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchDashboardsIDWithResponse_Call{Call: _e.mock.On("PatchDashboardsIDWithResponse", ctx, dashboardID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PatchDashboardsIDParams, body domain.PatchDashboardsIDJSONRequestBody)) *ClientWithResponsesInterface_PatchDashboardsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchDashboardsIDParams), args[3].(domain.PatchDashboardsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchDashboardsIDWithResponse_Call) Return(_a0 *domain.PatchDashboardsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchDashboardsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchLabelsIDWithBodyWithResponse provides a mock function with given fields: ctx, labelID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchLabelsIDWithBodyWithResponse(ctx context.Context, labelID string, params *domain.PatchLabelsIDParams, contentType string, body io.Reader) (*domain.PatchLabelsIDResponse, error) {
	ret := _m.Called(ctx, labelID, params, contentType, body)

	var r0 *domain.PatchLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchLabelsIDParams, string, io.Reader) *domain.PatchLabelsIDResponse); ok {
		r0 = rf(ctx, labelID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchLabelsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, labelID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchLabelsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchLabelsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchLabelsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchLabelsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
//  - params *domain.PatchLabelsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchLabelsIDWithBodyWithResponse(ctx interface{}, labelID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchLabelsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchLabelsIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchLabelsIDWithBodyWithResponse", ctx, labelID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchLabelsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, labelID string, params *domain.PatchLabelsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchLabelsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchLabelsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchLabelsIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchLabelsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchLabelsIDWithResponse provides a mock function with given fields: ctx, labelID, params, body
func (_m *ClientWithResponsesInterface) PatchLabelsIDWithResponse(ctx context.Context, labelID string, params *domain.PatchLabelsIDParams, body domain.PatchLabelsIDJSONRequestBody) (*domain.PatchLabelsIDResponse, error) {
	ret := _m.Called(ctx, labelID, params, body)

	var r0 *domain.PatchLabelsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchLabelsIDParams, domain.PatchLabelsIDJSONRequestBody) *domain.PatchLabelsIDResponse); ok {
		r0 = rf(ctx, labelID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchLabelsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchLabelsIDParams, domain.PatchLabelsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, labelID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchLabelsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchLabelsIDWithResponse'
type ClientWithResponsesInterface_PatchLabelsIDWithResponse_Call struct {
	*mock.Call
}

// PatchLabelsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - labelID string
//  - params *domain.PatchLabelsIDParams
//  - body domain.PatchLabelsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchLabelsIDWithResponse(ctx interface{}, labelID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchLabelsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchLabelsIDWithResponse_Call{Call: _e.mock.On("PatchLabelsIDWithResponse", ctx, labelID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchLabelsIDWithResponse_Call) Run(run func(ctx context.Context, labelID string, params *domain.PatchLabelsIDParams, body domain.PatchLabelsIDJSONRequestBody)) *ClientWithResponsesInterface_PatchLabelsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchLabelsIDParams), args[3].(domain.PatchLabelsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchLabelsIDWithResponse_Call) Return(_a0 *domain.PatchLabelsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchLabelsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchLegacyAuthorizationsIDWithBodyWithResponse provides a mock function with given fields: ctx, authID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchLegacyAuthorizationsIDWithBodyWithResponse(ctx context.Context, authID string, params *domain.PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader) (*domain.PatchLegacyAuthorizationsIDResponse, error) {
	ret := _m.Called(ctx, authID, params, contentType, body)

	var r0 *domain.PatchLegacyAuthorizationsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchLegacyAuthorizationsIDParams, string, io.Reader) *domain.PatchLegacyAuthorizationsIDResponse); ok {
		r0 = rf(ctx, authID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchLegacyAuthorizationsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchLegacyAuthorizationsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, authID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchLegacyAuthorizationsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchLegacyAuthorizationsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PatchLegacyAuthorizationsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchLegacyAuthorizationsIDWithBodyWithResponse(ctx interface{}, authID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchLegacyAuthorizationsIDWithBodyWithResponse", ctx, authID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.PatchLegacyAuthorizationsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchLegacyAuthorizationsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchLegacyAuthorizationsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchLegacyAuthorizationsIDWithResponse provides a mock function with given fields: ctx, authID, params, body
func (_m *ClientWithResponsesInterface) PatchLegacyAuthorizationsIDWithResponse(ctx context.Context, authID string, params *domain.PatchLegacyAuthorizationsIDParams, body domain.PatchLegacyAuthorizationsIDJSONRequestBody) (*domain.PatchLegacyAuthorizationsIDResponse, error) {
	ret := _m.Called(ctx, authID, params, body)

	var r0 *domain.PatchLegacyAuthorizationsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchLegacyAuthorizationsIDParams, domain.PatchLegacyAuthorizationsIDJSONRequestBody) *domain.PatchLegacyAuthorizationsIDResponse); ok {
		r0 = rf(ctx, authID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchLegacyAuthorizationsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchLegacyAuthorizationsIDParams, domain.PatchLegacyAuthorizationsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, authID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchLegacyAuthorizationsIDWithResponse'
type ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithResponse_Call struct {
	*mock.Call
}

// PatchLegacyAuthorizationsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PatchLegacyAuthorizationsIDParams
//  - body domain.PatchLegacyAuthorizationsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchLegacyAuthorizationsIDWithResponse(ctx interface{}, authID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithResponse_Call{Call: _e.mock.On("PatchLegacyAuthorizationsIDWithResponse", ctx, authID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.PatchLegacyAuthorizationsIDParams, body domain.PatchLegacyAuthorizationsIDJSONRequestBody)) *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchLegacyAuthorizationsIDParams), args[3].(domain.PatchLegacyAuthorizationsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithResponse_Call) Return(_a0 *domain.PatchLegacyAuthorizationsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchLegacyAuthorizationsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchNotificationEndpointsIDWithBodyWithResponse provides a mock function with given fields: ctx, endpointID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchNotificationEndpointsIDWithBodyWithResponse(ctx context.Context, endpointID string, params *domain.PatchNotificationEndpointsIDParams, contentType string, body io.Reader) (*domain.PatchNotificationEndpointsIDResponse, error) {
	ret := _m.Called(ctx, endpointID, params, contentType, body)

	var r0 *domain.PatchNotificationEndpointsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchNotificationEndpointsIDParams, string, io.Reader) *domain.PatchNotificationEndpointsIDResponse); ok {
		r0 = rf(ctx, endpointID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchNotificationEndpointsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchNotificationEndpointsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, endpointID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchNotificationEndpointsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchNotificationEndpointsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchNotificationEndpointsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchNotificationEndpointsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PatchNotificationEndpointsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchNotificationEndpointsIDWithBodyWithResponse(ctx interface{}, endpointID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchNotificationEndpointsIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchNotificationEndpointsIDWithBodyWithResponse", ctx, endpointID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PatchNotificationEndpointsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchNotificationEndpointsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchNotificationEndpointsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchNotificationEndpointsIDWithResponse provides a mock function with given fields: ctx, endpointID, params, body
func (_m *ClientWithResponsesInterface) PatchNotificationEndpointsIDWithResponse(ctx context.Context, endpointID string, params *domain.PatchNotificationEndpointsIDParams, body domain.PatchNotificationEndpointsIDJSONRequestBody) (*domain.PatchNotificationEndpointsIDResponse, error) {
	ret := _m.Called(ctx, endpointID, params, body)

	var r0 *domain.PatchNotificationEndpointsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchNotificationEndpointsIDParams, domain.PatchNotificationEndpointsIDJSONRequestBody) *domain.PatchNotificationEndpointsIDResponse); ok {
		r0 = rf(ctx, endpointID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchNotificationEndpointsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchNotificationEndpointsIDParams, domain.PatchNotificationEndpointsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, endpointID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchNotificationEndpointsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchNotificationEndpointsIDWithResponse'
type ClientWithResponsesInterface_PatchNotificationEndpointsIDWithResponse_Call struct {
	*mock.Call
}

// PatchNotificationEndpointsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PatchNotificationEndpointsIDParams
//  - body domain.PatchNotificationEndpointsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchNotificationEndpointsIDWithResponse(ctx interface{}, endpointID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchNotificationEndpointsIDWithResponse_Call{Call: _e.mock.On("PatchNotificationEndpointsIDWithResponse", ctx, endpointID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithResponse_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PatchNotificationEndpointsIDParams, body domain.PatchNotificationEndpointsIDJSONRequestBody)) *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchNotificationEndpointsIDParams), args[3].(domain.PatchNotificationEndpointsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithResponse_Call) Return(_a0 *domain.PatchNotificationEndpointsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchNotificationEndpointsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchNotificationRulesIDWithBodyWithResponse provides a mock function with given fields: ctx, ruleID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchNotificationRulesIDWithBodyWithResponse(ctx context.Context, ruleID string, params *domain.PatchNotificationRulesIDParams, contentType string, body io.Reader) (*domain.PatchNotificationRulesIDResponse, error) {
	ret := _m.Called(ctx, ruleID, params, contentType, body)

	var r0 *domain.PatchNotificationRulesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchNotificationRulesIDParams, string, io.Reader) *domain.PatchNotificationRulesIDResponse); ok {
		r0 = rf(ctx, ruleID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchNotificationRulesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchNotificationRulesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, ruleID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchNotificationRulesIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchNotificationRulesIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchNotificationRulesIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchNotificationRulesIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PatchNotificationRulesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchNotificationRulesIDWithBodyWithResponse(ctx interface{}, ruleID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchNotificationRulesIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchNotificationRulesIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchNotificationRulesIDWithBodyWithResponse", ctx, ruleID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchNotificationRulesIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PatchNotificationRulesIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchNotificationRulesIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchNotificationRulesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchNotificationRulesIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchNotificationRulesIDResponse, _a1 error) *ClientWithResponsesInterface_PatchNotificationRulesIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchNotificationRulesIDWithResponse provides a mock function with given fields: ctx, ruleID, params, body
func (_m *ClientWithResponsesInterface) PatchNotificationRulesIDWithResponse(ctx context.Context, ruleID string, params *domain.PatchNotificationRulesIDParams, body domain.PatchNotificationRulesIDJSONRequestBody) (*domain.PatchNotificationRulesIDResponse, error) {
	ret := _m.Called(ctx, ruleID, params, body)

	var r0 *domain.PatchNotificationRulesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchNotificationRulesIDParams, domain.PatchNotificationRulesIDJSONRequestBody) *domain.PatchNotificationRulesIDResponse); ok {
		r0 = rf(ctx, ruleID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchNotificationRulesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchNotificationRulesIDParams, domain.PatchNotificationRulesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, ruleID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchNotificationRulesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchNotificationRulesIDWithResponse'
type ClientWithResponsesInterface_PatchNotificationRulesIDWithResponse_Call struct {
	*mock.Call
}

// PatchNotificationRulesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PatchNotificationRulesIDParams
//  - body domain.PatchNotificationRulesIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchNotificationRulesIDWithResponse(ctx interface{}, ruleID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchNotificationRulesIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchNotificationRulesIDWithResponse_Call{Call: _e.mock.On("PatchNotificationRulesIDWithResponse", ctx, ruleID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchNotificationRulesIDWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PatchNotificationRulesIDParams, body domain.PatchNotificationRulesIDJSONRequestBody)) *ClientWithResponsesInterface_PatchNotificationRulesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchNotificationRulesIDParams), args[3].(domain.PatchNotificationRulesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchNotificationRulesIDWithResponse_Call) Return(_a0 *domain.PatchNotificationRulesIDResponse, _a1 error) *ClientWithResponsesInterface_PatchNotificationRulesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchOrgsIDSecretsWithBodyWithResponse provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchOrgsIDSecretsWithBodyWithResponse(ctx context.Context, orgID string, params *domain.PatchOrgsIDSecretsParams, contentType string, body io.Reader) (*domain.PatchOrgsIDSecretsResponse, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *domain.PatchOrgsIDSecretsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchOrgsIDSecretsParams, string, io.Reader) *domain.PatchOrgsIDSecretsResponse); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchOrgsIDSecretsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchOrgsIDSecretsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchOrgsIDSecretsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsIDSecretsWithBodyWithResponse'
type ClientWithResponsesInterface_PatchOrgsIDSecretsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchOrgsIDSecretsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PatchOrgsIDSecretsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchOrgsIDSecretsWithBodyWithResponse(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchOrgsIDSecretsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchOrgsIDSecretsWithBodyWithResponse_Call{Call: _e.mock.On("PatchOrgsIDSecretsWithBodyWithResponse", ctx, orgID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchOrgsIDSecretsWithBodyWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PatchOrgsIDSecretsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchOrgsIDSecretsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchOrgsIDSecretsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchOrgsIDSecretsWithBodyWithResponse_Call) Return(_a0 *domain.PatchOrgsIDSecretsResponse, _a1 error) *ClientWithResponsesInterface_PatchOrgsIDSecretsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchOrgsIDSecretsWithResponse provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientWithResponsesInterface) PatchOrgsIDSecretsWithResponse(ctx context.Context, orgID string, params *domain.PatchOrgsIDSecretsParams, body domain.PatchOrgsIDSecretsJSONRequestBody) (*domain.PatchOrgsIDSecretsResponse, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *domain.PatchOrgsIDSecretsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchOrgsIDSecretsParams, domain.PatchOrgsIDSecretsJSONRequestBody) *domain.PatchOrgsIDSecretsResponse); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchOrgsIDSecretsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchOrgsIDSecretsParams, domain.PatchOrgsIDSecretsJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchOrgsIDSecretsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsIDSecretsWithResponse'
type ClientWithResponsesInterface_PatchOrgsIDSecretsWithResponse_Call struct {
	*mock.Call
}

// PatchOrgsIDSecretsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PatchOrgsIDSecretsParams
//  - body domain.PatchOrgsIDSecretsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchOrgsIDSecretsWithResponse(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchOrgsIDSecretsWithResponse_Call {
	return &ClientWithResponsesInterface_PatchOrgsIDSecretsWithResponse_Call{Call: _e.mock.On("PatchOrgsIDSecretsWithResponse", ctx, orgID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchOrgsIDSecretsWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PatchOrgsIDSecretsParams, body domain.PatchOrgsIDSecretsJSONRequestBody)) *ClientWithResponsesInterface_PatchOrgsIDSecretsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchOrgsIDSecretsParams), args[3].(domain.PatchOrgsIDSecretsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchOrgsIDSecretsWithResponse_Call) Return(_a0 *domain.PatchOrgsIDSecretsResponse, _a1 error) *ClientWithResponsesInterface_PatchOrgsIDSecretsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchOrgsIDWithBodyWithResponse provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchOrgsIDWithBodyWithResponse(ctx context.Context, orgID string, params *domain.PatchOrgsIDParams, contentType string, body io.Reader) (*domain.PatchOrgsIDResponse, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *domain.PatchOrgsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchOrgsIDParams, string, io.Reader) *domain.PatchOrgsIDResponse); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchOrgsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchOrgsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchOrgsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchOrgsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchOrgsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PatchOrgsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchOrgsIDWithBodyWithResponse(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchOrgsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchOrgsIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchOrgsIDWithBodyWithResponse", ctx, orgID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchOrgsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PatchOrgsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchOrgsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchOrgsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchOrgsIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchOrgsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchOrgsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchOrgsIDWithResponse provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientWithResponsesInterface) PatchOrgsIDWithResponse(ctx context.Context, orgID string, params *domain.PatchOrgsIDParams, body domain.PatchOrgsIDJSONRequestBody) (*domain.PatchOrgsIDResponse, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *domain.PatchOrgsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchOrgsIDParams, domain.PatchOrgsIDJSONRequestBody) *domain.PatchOrgsIDResponse); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchOrgsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchOrgsIDParams, domain.PatchOrgsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchOrgsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsIDWithResponse'
type ClientWithResponsesInterface_PatchOrgsIDWithResponse_Call struct {
	*mock.Call
}

// PatchOrgsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PatchOrgsIDParams
//  - body domain.PatchOrgsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchOrgsIDWithResponse(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchOrgsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchOrgsIDWithResponse_Call{Call: _e.mock.On("PatchOrgsIDWithResponse", ctx, orgID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchOrgsIDWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PatchOrgsIDParams, body domain.PatchOrgsIDJSONRequestBody)) *ClientWithResponsesInterface_PatchOrgsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchOrgsIDParams), args[3].(domain.PatchOrgsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchOrgsIDWithResponse_Call) Return(_a0 *domain.PatchOrgsIDResponse, _a1 error) *ClientWithResponsesInterface_PatchOrgsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchRemoteConnectionByIDWithBodyWithResponse provides a mock function with given fields: ctx, remoteID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchRemoteConnectionByIDWithBodyWithResponse(ctx context.Context, remoteID string, params *domain.PatchRemoteConnectionByIDParams, contentType string, body io.Reader) (*domain.PatchRemoteConnectionByIDResponse, error) {
	ret := _m.Called(ctx, remoteID, params, contentType, body)

	var r0 *domain.PatchRemoteConnectionByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchRemoteConnectionByIDParams, string, io.Reader) *domain.PatchRemoteConnectionByIDResponse); ok {
		r0 = rf(ctx, remoteID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchRemoteConnectionByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchRemoteConnectionByIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, remoteID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchRemoteConnectionByIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchRemoteConnectionByIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchRemoteConnectionByIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchRemoteConnectionByIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - remoteID string
//  - params *domain.PatchRemoteConnectionByIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchRemoteConnectionByIDWithBodyWithResponse(ctx interface{}, remoteID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchRemoteConnectionByIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchRemoteConnectionByIDWithBodyWithResponse", ctx, remoteID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, remoteID string, params *domain.PatchRemoteConnectionByIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchRemoteConnectionByIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchRemoteConnectionByIDResponse, _a1 error) *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchRemoteConnectionByIDWithResponse provides a mock function with given fields: ctx, remoteID, params, body
func (_m *ClientWithResponsesInterface) PatchRemoteConnectionByIDWithResponse(ctx context.Context, remoteID string, params *domain.PatchRemoteConnectionByIDParams, body domain.PatchRemoteConnectionByIDJSONRequestBody) (*domain.PatchRemoteConnectionByIDResponse, error) {
	ret := _m.Called(ctx, remoteID, params, body)

	var r0 *domain.PatchRemoteConnectionByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchRemoteConnectionByIDParams, domain.PatchRemoteConnectionByIDJSONRequestBody) *domain.PatchRemoteConnectionByIDResponse); ok {
		r0 = rf(ctx, remoteID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchRemoteConnectionByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchRemoteConnectionByIDParams, domain.PatchRemoteConnectionByIDJSONRequestBody) error); ok {
		r1 = rf(ctx, remoteID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchRemoteConnectionByIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchRemoteConnectionByIDWithResponse'
type ClientWithResponsesInterface_PatchRemoteConnectionByIDWithResponse_Call struct {
	*mock.Call
}

// PatchRemoteConnectionByIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - remoteID string
//  - params *domain.PatchRemoteConnectionByIDParams
//  - body domain.PatchRemoteConnectionByIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchRemoteConnectionByIDWithResponse(ctx interface{}, remoteID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchRemoteConnectionByIDWithResponse_Call{Call: _e.mock.On("PatchRemoteConnectionByIDWithResponse", ctx, remoteID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithResponse_Call) Run(run func(ctx context.Context, remoteID string, params *domain.PatchRemoteConnectionByIDParams, body domain.PatchRemoteConnectionByIDJSONRequestBody)) *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchRemoteConnectionByIDParams), args[3].(domain.PatchRemoteConnectionByIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithResponse_Call) Return(_a0 *domain.PatchRemoteConnectionByIDResponse, _a1 error) *ClientWithResponsesInterface_PatchRemoteConnectionByIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchReplicationByIDWithBodyWithResponse provides a mock function with given fields: ctx, replicationID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchReplicationByIDWithBodyWithResponse(ctx context.Context, replicationID string, params *domain.PatchReplicationByIDParams, contentType string, body io.Reader) (*domain.PatchReplicationByIDResponse, error) {
	ret := _m.Called(ctx, replicationID, params, contentType, body)

	var r0 *domain.PatchReplicationByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchReplicationByIDParams, string, io.Reader) *domain.PatchReplicationByIDResponse); ok {
		r0 = rf(ctx, replicationID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchReplicationByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchReplicationByIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, replicationID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchReplicationByIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchReplicationByIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchReplicationByIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchReplicationByIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.PatchReplicationByIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchReplicationByIDWithBodyWithResponse(ctx interface{}, replicationID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchReplicationByIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchReplicationByIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchReplicationByIDWithBodyWithResponse", ctx, replicationID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchReplicationByIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, replicationID string, params *domain.PatchReplicationByIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchReplicationByIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchReplicationByIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchReplicationByIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchReplicationByIDResponse, _a1 error) *ClientWithResponsesInterface_PatchReplicationByIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchReplicationByIDWithResponse provides a mock function with given fields: ctx, replicationID, params, body
func (_m *ClientWithResponsesInterface) PatchReplicationByIDWithResponse(ctx context.Context, replicationID string, params *domain.PatchReplicationByIDParams, body domain.PatchReplicationByIDJSONRequestBody) (*domain.PatchReplicationByIDResponse, error) {
	ret := _m.Called(ctx, replicationID, params, body)

	var r0 *domain.PatchReplicationByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchReplicationByIDParams, domain.PatchReplicationByIDJSONRequestBody) *domain.PatchReplicationByIDResponse); ok {
		r0 = rf(ctx, replicationID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchReplicationByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchReplicationByIDParams, domain.PatchReplicationByIDJSONRequestBody) error); ok {
		r1 = rf(ctx, replicationID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchReplicationByIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchReplicationByIDWithResponse'
type ClientWithResponsesInterface_PatchReplicationByIDWithResponse_Call struct {
	*mock.Call
}

// PatchReplicationByIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.PatchReplicationByIDParams
//  - body domain.PatchReplicationByIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchReplicationByIDWithResponse(ctx interface{}, replicationID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchReplicationByIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchReplicationByIDWithResponse_Call{Call: _e.mock.On("PatchReplicationByIDWithResponse", ctx, replicationID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchReplicationByIDWithResponse_Call) Run(run func(ctx context.Context, replicationID string, params *domain.PatchReplicationByIDParams, body domain.PatchReplicationByIDJSONRequestBody)) *ClientWithResponsesInterface_PatchReplicationByIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchReplicationByIDParams), args[3].(domain.PatchReplicationByIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchReplicationByIDWithResponse_Call) Return(_a0 *domain.PatchReplicationByIDResponse, _a1 error) *ClientWithResponsesInterface_PatchReplicationByIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchScrapersIDWithBodyWithResponse provides a mock function with given fields: ctx, scraperTargetID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchScrapersIDWithBodyWithResponse(ctx context.Context, scraperTargetID string, params *domain.PatchScrapersIDParams, contentType string, body io.Reader) (*domain.PatchScrapersIDResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params, contentType, body)

	var r0 *domain.PatchScrapersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchScrapersIDParams, string, io.Reader) *domain.PatchScrapersIDResponse); ok {
		r0 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchScrapersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchScrapersIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchScrapersIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchScrapersIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchScrapersIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchScrapersIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PatchScrapersIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchScrapersIDWithBodyWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchScrapersIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchScrapersIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchScrapersIDWithBodyWithResponse", ctx, scraperTargetID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchScrapersIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PatchScrapersIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchScrapersIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchScrapersIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchScrapersIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchScrapersIDResponse, _a1 error) *ClientWithResponsesInterface_PatchScrapersIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchScrapersIDWithResponse provides a mock function with given fields: ctx, scraperTargetID, params, body
func (_m *ClientWithResponsesInterface) PatchScrapersIDWithResponse(ctx context.Context, scraperTargetID string, params *domain.PatchScrapersIDParams, body domain.PatchScrapersIDJSONRequestBody) (*domain.PatchScrapersIDResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params, body)

	var r0 *domain.PatchScrapersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchScrapersIDParams, domain.PatchScrapersIDJSONRequestBody) *domain.PatchScrapersIDResponse); ok {
		r0 = rf(ctx, scraperTargetID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchScrapersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchScrapersIDParams, domain.PatchScrapersIDJSONRequestBody) error); ok {
		r1 = rf(ctx, scraperTargetID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchScrapersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchScrapersIDWithResponse'
type ClientWithResponsesInterface_PatchScrapersIDWithResponse_Call struct {
	*mock.Call
}

// PatchScrapersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PatchScrapersIDParams
//  - body domain.PatchScrapersIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchScrapersIDWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchScrapersIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchScrapersIDWithResponse_Call{Call: _e.mock.On("PatchScrapersIDWithResponse", ctx, scraperTargetID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchScrapersIDWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PatchScrapersIDParams, body domain.PatchScrapersIDJSONRequestBody)) *ClientWithResponsesInterface_PatchScrapersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchScrapersIDParams), args[3].(domain.PatchScrapersIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchScrapersIDWithResponse_Call) Return(_a0 *domain.PatchScrapersIDResponse, _a1 error) *ClientWithResponsesInterface_PatchScrapersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchSourcesIDWithBodyWithResponse provides a mock function with given fields: ctx, sourceID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchSourcesIDWithBodyWithResponse(ctx context.Context, sourceID string, params *domain.PatchSourcesIDParams, contentType string, body io.Reader) (*domain.PatchSourcesIDResponse, error) {
	ret := _m.Called(ctx, sourceID, params, contentType, body)

	var r0 *domain.PatchSourcesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchSourcesIDParams, string, io.Reader) *domain.PatchSourcesIDResponse); ok {
		r0 = rf(ctx, sourceID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchSourcesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchSourcesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, sourceID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchSourcesIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSourcesIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchSourcesIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchSourcesIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.PatchSourcesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchSourcesIDWithBodyWithResponse(ctx interface{}, sourceID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchSourcesIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchSourcesIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchSourcesIDWithBodyWithResponse", ctx, sourceID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchSourcesIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, sourceID string, params *domain.PatchSourcesIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchSourcesIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchSourcesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchSourcesIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchSourcesIDResponse, _a1 error) *ClientWithResponsesInterface_PatchSourcesIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchSourcesIDWithResponse provides a mock function with given fields: ctx, sourceID, params, body
func (_m *ClientWithResponsesInterface) PatchSourcesIDWithResponse(ctx context.Context, sourceID string, params *domain.PatchSourcesIDParams, body domain.PatchSourcesIDJSONRequestBody) (*domain.PatchSourcesIDResponse, error) {
	ret := _m.Called(ctx, sourceID, params, body)

	var r0 *domain.PatchSourcesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchSourcesIDParams, domain.PatchSourcesIDJSONRequestBody) *domain.PatchSourcesIDResponse); ok {
		r0 = rf(ctx, sourceID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchSourcesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchSourcesIDParams, domain.PatchSourcesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, sourceID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchSourcesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSourcesIDWithResponse'
type ClientWithResponsesInterface_PatchSourcesIDWithResponse_Call struct {
	*mock.Call
}

// PatchSourcesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - sourceID string
//  - params *domain.PatchSourcesIDParams
//  - body domain.PatchSourcesIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchSourcesIDWithResponse(ctx interface{}, sourceID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchSourcesIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchSourcesIDWithResponse_Call{Call: _e.mock.On("PatchSourcesIDWithResponse", ctx, sourceID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchSourcesIDWithResponse_Call) Run(run func(ctx context.Context, sourceID string, params *domain.PatchSourcesIDParams, body domain.PatchSourcesIDJSONRequestBody)) *ClientWithResponsesInterface_PatchSourcesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchSourcesIDParams), args[3].(domain.PatchSourcesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchSourcesIDWithResponse_Call) Return(_a0 *domain.PatchSourcesIDResponse, _a1 error) *ClientWithResponsesInterface_PatchSourcesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchTasksIDWithBodyWithResponse provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchTasksIDWithBodyWithResponse(ctx context.Context, taskID string, params *domain.PatchTasksIDParams, contentType string, body io.Reader) (*domain.PatchTasksIDResponse, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *domain.PatchTasksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchTasksIDParams, string, io.Reader) *domain.PatchTasksIDResponse); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchTasksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchTasksIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchTasksIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchTasksIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchTasksIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchTasksIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PatchTasksIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchTasksIDWithBodyWithResponse(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchTasksIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchTasksIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchTasksIDWithBodyWithResponse", ctx, taskID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchTasksIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PatchTasksIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchTasksIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchTasksIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchTasksIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchTasksIDResponse, _a1 error) *ClientWithResponsesInterface_PatchTasksIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchTasksIDWithResponse provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientWithResponsesInterface) PatchTasksIDWithResponse(ctx context.Context, taskID string, params *domain.PatchTasksIDParams, body domain.PatchTasksIDJSONRequestBody) (*domain.PatchTasksIDResponse, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *domain.PatchTasksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchTasksIDParams, domain.PatchTasksIDJSONRequestBody) *domain.PatchTasksIDResponse); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchTasksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchTasksIDParams, domain.PatchTasksIDJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchTasksIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchTasksIDWithResponse'
type ClientWithResponsesInterface_PatchTasksIDWithResponse_Call struct {
	*mock.Call
}

// PatchTasksIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PatchTasksIDParams
//  - body domain.PatchTasksIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchTasksIDWithResponse(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchTasksIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchTasksIDWithResponse_Call{Call: _e.mock.On("PatchTasksIDWithResponse", ctx, taskID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchTasksIDWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PatchTasksIDParams, body domain.PatchTasksIDJSONRequestBody)) *ClientWithResponsesInterface_PatchTasksIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchTasksIDParams), args[3].(domain.PatchTasksIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchTasksIDWithResponse_Call) Return(_a0 *domain.PatchTasksIDResponse, _a1 error) *ClientWithResponsesInterface_PatchTasksIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchUsersIDWithBodyWithResponse provides a mock function with given fields: ctx, userID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchUsersIDWithBodyWithResponse(ctx context.Context, userID string, params *domain.PatchUsersIDParams, contentType string, body io.Reader) (*domain.PatchUsersIDResponse, error) {
	ret := _m.Called(ctx, userID, params, contentType, body)

	var r0 *domain.PatchUsersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchUsersIDParams, string, io.Reader) *domain.PatchUsersIDResponse); ok {
		r0 = rf(ctx, userID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchUsersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchUsersIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, userID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchUsersIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchUsersIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchUsersIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchUsersIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.PatchUsersIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchUsersIDWithBodyWithResponse(ctx interface{}, userID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchUsersIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchUsersIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchUsersIDWithBodyWithResponse", ctx, userID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchUsersIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, userID string, params *domain.PatchUsersIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchUsersIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchUsersIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchUsersIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchUsersIDResponse, _a1 error) *ClientWithResponsesInterface_PatchUsersIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchUsersIDWithResponse provides a mock function with given fields: ctx, userID, params, body
func (_m *ClientWithResponsesInterface) PatchUsersIDWithResponse(ctx context.Context, userID string, params *domain.PatchUsersIDParams, body domain.PatchUsersIDJSONRequestBody) (*domain.PatchUsersIDResponse, error) {
	ret := _m.Called(ctx, userID, params, body)

	var r0 *domain.PatchUsersIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchUsersIDParams, domain.PatchUsersIDJSONRequestBody) *domain.PatchUsersIDResponse); ok {
		r0 = rf(ctx, userID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchUsersIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchUsersIDParams, domain.PatchUsersIDJSONRequestBody) error); ok {
		r1 = rf(ctx, userID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchUsersIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchUsersIDWithResponse'
type ClientWithResponsesInterface_PatchUsersIDWithResponse_Call struct {
	*mock.Call
}

// PatchUsersIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.PatchUsersIDParams
//  - body domain.PatchUsersIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchUsersIDWithResponse(ctx interface{}, userID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchUsersIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchUsersIDWithResponse_Call{Call: _e.mock.On("PatchUsersIDWithResponse", ctx, userID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchUsersIDWithResponse_Call) Run(run func(ctx context.Context, userID string, params *domain.PatchUsersIDParams, body domain.PatchUsersIDJSONRequestBody)) *ClientWithResponsesInterface_PatchUsersIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchUsersIDParams), args[3].(domain.PatchUsersIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchUsersIDWithResponse_Call) Return(_a0 *domain.PatchUsersIDResponse, _a1 error) *ClientWithResponsesInterface_PatchUsersIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchVariablesIDWithBodyWithResponse provides a mock function with given fields: ctx, variableID, params, contentType, body
func (_m *ClientWithResponsesInterface) PatchVariablesIDWithBodyWithResponse(ctx context.Context, variableID string, params *domain.PatchVariablesIDParams, contentType string, body io.Reader) (*domain.PatchVariablesIDResponse, error) {
	ret := _m.Called(ctx, variableID, params, contentType, body)

	var r0 *domain.PatchVariablesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchVariablesIDParams, string, io.Reader) *domain.PatchVariablesIDResponse); ok {
		r0 = rf(ctx, variableID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchVariablesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchVariablesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, variableID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchVariablesIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchVariablesIDWithBodyWithResponse'
type ClientWithResponsesInterface_PatchVariablesIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PatchVariablesIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PatchVariablesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PatchVariablesIDWithBodyWithResponse(ctx interface{}, variableID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PatchVariablesIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PatchVariablesIDWithBodyWithResponse_Call{Call: _e.mock.On("PatchVariablesIDWithBodyWithResponse", ctx, variableID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PatchVariablesIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, variableID string, params *domain.PatchVariablesIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PatchVariablesIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchVariablesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchVariablesIDWithBodyWithResponse_Call) Return(_a0 *domain.PatchVariablesIDResponse, _a1 error) *ClientWithResponsesInterface_PatchVariablesIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchVariablesIDWithResponse provides a mock function with given fields: ctx, variableID, params, body
func (_m *ClientWithResponsesInterface) PatchVariablesIDWithResponse(ctx context.Context, variableID string, params *domain.PatchVariablesIDParams, body domain.PatchVariablesIDJSONRequestBody) (*domain.PatchVariablesIDResponse, error) {
	ret := _m.Called(ctx, variableID, params, body)

	var r0 *domain.PatchVariablesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PatchVariablesIDParams, domain.PatchVariablesIDJSONRequestBody) *domain.PatchVariablesIDResponse); ok {
		r0 = rf(ctx, variableID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PatchVariablesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PatchVariablesIDParams, domain.PatchVariablesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, variableID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PatchVariablesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchVariablesIDWithResponse'
type ClientWithResponsesInterface_PatchVariablesIDWithResponse_Call struct {
	*mock.Call
}

// PatchVariablesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PatchVariablesIDParams
//  - body domain.PatchVariablesIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PatchVariablesIDWithResponse(ctx interface{}, variableID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PatchVariablesIDWithResponse_Call {
	return &ClientWithResponsesInterface_PatchVariablesIDWithResponse_Call{Call: _e.mock.On("PatchVariablesIDWithResponse", ctx, variableID, params, body)}
}

func (_c *ClientWithResponsesInterface_PatchVariablesIDWithResponse_Call) Run(run func(ctx context.Context, variableID string, params *domain.PatchVariablesIDParams, body domain.PatchVariablesIDJSONRequestBody)) *ClientWithResponsesInterface_PatchVariablesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PatchVariablesIDParams), args[3].(domain.PatchVariablesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PatchVariablesIDWithResponse_Call) Return(_a0 *domain.PatchVariablesIDResponse, _a1 error) *ClientWithResponsesInterface_PatchVariablesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostAuthorizationsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostAuthorizationsWithBodyWithResponse(ctx context.Context, params *domain.PostAuthorizationsParams, contentType string, body io.Reader) (*domain.PostAuthorizationsResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostAuthorizationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostAuthorizationsParams, string, io.Reader) *domain.PostAuthorizationsResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostAuthorizationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostAuthorizationsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostAuthorizationsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAuthorizationsWithBodyWithResponse'
type ClientWithResponsesInterface_PostAuthorizationsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostAuthorizationsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostAuthorizationsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostAuthorizationsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostAuthorizationsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostAuthorizationsWithBodyWithResponse_Call{Call: _e.mock.On("PostAuthorizationsWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostAuthorizationsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostAuthorizationsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostAuthorizationsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostAuthorizationsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostAuthorizationsWithBodyWithResponse_Call) Return(_a0 *domain.PostAuthorizationsResponse, _a1 error) *ClientWithResponsesInterface_PostAuthorizationsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostAuthorizationsWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostAuthorizationsWithResponse(ctx context.Context, params *domain.PostAuthorizationsParams, body domain.PostAuthorizationsJSONRequestBody) (*domain.PostAuthorizationsResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostAuthorizationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostAuthorizationsParams, domain.PostAuthorizationsJSONRequestBody) *domain.PostAuthorizationsResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostAuthorizationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostAuthorizationsParams, domain.PostAuthorizationsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostAuthorizationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAuthorizationsWithResponse'
type ClientWithResponsesInterface_PostAuthorizationsWithResponse_Call struct {
	*mock.Call
}

// PostAuthorizationsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostAuthorizationsParams
//  - body domain.PostAuthorizationsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostAuthorizationsWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostAuthorizationsWithResponse_Call {
	return &ClientWithResponsesInterface_PostAuthorizationsWithResponse_Call{Call: _e.mock.On("PostAuthorizationsWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostAuthorizationsWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostAuthorizationsParams, body domain.PostAuthorizationsJSONRequestBody)) *ClientWithResponsesInterface_PostAuthorizationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostAuthorizationsParams), args[2].(domain.PostAuthorizationsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostAuthorizationsWithResponse_Call) Return(_a0 *domain.PostAuthorizationsResponse, _a1 error) *ClientWithResponsesInterface_PostAuthorizationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDLabelsWithBodyWithResponse provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostBucketsIDLabelsWithBodyWithResponse(ctx context.Context, bucketID string, params *domain.PostBucketsIDLabelsParams, contentType string, body io.Reader) (*domain.PostBucketsIDLabelsResponse, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *domain.PostBucketsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDLabelsParams, string, io.Reader) *domain.PostBucketsIDLabelsResponse); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostBucketsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostBucketsIDLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostBucketsIDLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostBucketsIDLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostBucketsIDLabelsWithBodyWithResponse(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostBucketsIDLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostBucketsIDLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostBucketsIDLabelsWithBodyWithResponse", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostBucketsIDLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDLabelsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostBucketsIDLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostBucketsIDLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostBucketsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostBucketsIDLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDLabelsWithResponse provides a mock function with given fields: ctx, bucketID, params, body
func (_m *ClientWithResponsesInterface) PostBucketsIDLabelsWithResponse(ctx context.Context, bucketID string, params *domain.PostBucketsIDLabelsParams, body domain.PostBucketsIDLabelsJSONRequestBody) (*domain.PostBucketsIDLabelsResponse, error) {
	ret := _m.Called(ctx, bucketID, params, body)

	var r0 *domain.PostBucketsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDLabelsParams, domain.PostBucketsIDLabelsJSONRequestBody) *domain.PostBucketsIDLabelsResponse); ok {
		r0 = rf(ctx, bucketID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostBucketsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDLabelsParams, domain.PostBucketsIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, bucketID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostBucketsIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDLabelsWithResponse'
type ClientWithResponsesInterface_PostBucketsIDLabelsWithResponse_Call struct {
	*mock.Call
}

// PostBucketsIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDLabelsParams
//  - body domain.PostBucketsIDLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostBucketsIDLabelsWithResponse(ctx interface{}, bucketID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostBucketsIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostBucketsIDLabelsWithResponse_Call{Call: _e.mock.On("PostBucketsIDLabelsWithResponse", ctx, bucketID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostBucketsIDLabelsWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDLabelsParams, body domain.PostBucketsIDLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostBucketsIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDLabelsParams), args[3].(domain.PostBucketsIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostBucketsIDLabelsWithResponse_Call) Return(_a0 *domain.PostBucketsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostBucketsIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDMembersWithBodyWithResponse provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostBucketsIDMembersWithBodyWithResponse(ctx context.Context, bucketID string, params *domain.PostBucketsIDMembersParams, contentType string, body io.Reader) (*domain.PostBucketsIDMembersResponse, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *domain.PostBucketsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDMembersParams, string, io.Reader) *domain.PostBucketsIDMembersResponse); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostBucketsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostBucketsIDMembersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDMembersWithBodyWithResponse'
type ClientWithResponsesInterface_PostBucketsIDMembersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostBucketsIDMembersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostBucketsIDMembersWithBodyWithResponse(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostBucketsIDMembersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostBucketsIDMembersWithBodyWithResponse_Call{Call: _e.mock.On("PostBucketsIDMembersWithBodyWithResponse", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostBucketsIDMembersWithBodyWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDMembersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostBucketsIDMembersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostBucketsIDMembersWithBodyWithResponse_Call) Return(_a0 *domain.PostBucketsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostBucketsIDMembersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDMembersWithResponse provides a mock function with given fields: ctx, bucketID, params, body
func (_m *ClientWithResponsesInterface) PostBucketsIDMembersWithResponse(ctx context.Context, bucketID string, params *domain.PostBucketsIDMembersParams, body domain.PostBucketsIDMembersJSONRequestBody) (*domain.PostBucketsIDMembersResponse, error) {
	ret := _m.Called(ctx, bucketID, params, body)

	var r0 *domain.PostBucketsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDMembersParams, domain.PostBucketsIDMembersJSONRequestBody) *domain.PostBucketsIDMembersResponse); ok {
		r0 = rf(ctx, bucketID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostBucketsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDMembersParams, domain.PostBucketsIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, bucketID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostBucketsIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDMembersWithResponse'
type ClientWithResponsesInterface_PostBucketsIDMembersWithResponse_Call struct {
	*mock.Call
}

// PostBucketsIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDMembersParams
//  - body domain.PostBucketsIDMembersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostBucketsIDMembersWithResponse(ctx interface{}, bucketID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostBucketsIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_PostBucketsIDMembersWithResponse_Call{Call: _e.mock.On("PostBucketsIDMembersWithResponse", ctx, bucketID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostBucketsIDMembersWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDMembersParams, body domain.PostBucketsIDMembersJSONRequestBody)) *ClientWithResponsesInterface_PostBucketsIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDMembersParams), args[3].(domain.PostBucketsIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostBucketsIDMembersWithResponse_Call) Return(_a0 *domain.PostBucketsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostBucketsIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDOwnersWithBodyWithResponse provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostBucketsIDOwnersWithBodyWithResponse(ctx context.Context, bucketID string, params *domain.PostBucketsIDOwnersParams, contentType string, body io.Reader) (*domain.PostBucketsIDOwnersResponse, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *domain.PostBucketsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDOwnersParams, string, io.Reader) *domain.PostBucketsIDOwnersResponse); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostBucketsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostBucketsIDOwnersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDOwnersWithBodyWithResponse'
type ClientWithResponsesInterface_PostBucketsIDOwnersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostBucketsIDOwnersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostBucketsIDOwnersWithBodyWithResponse(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostBucketsIDOwnersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostBucketsIDOwnersWithBodyWithResponse_Call{Call: _e.mock.On("PostBucketsIDOwnersWithBodyWithResponse", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostBucketsIDOwnersWithBodyWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDOwnersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostBucketsIDOwnersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostBucketsIDOwnersWithBodyWithResponse_Call) Return(_a0 *domain.PostBucketsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostBucketsIDOwnersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsIDOwnersWithResponse provides a mock function with given fields: ctx, bucketID, params, body
func (_m *ClientWithResponsesInterface) PostBucketsIDOwnersWithResponse(ctx context.Context, bucketID string, params *domain.PostBucketsIDOwnersParams, body domain.PostBucketsIDOwnersJSONRequestBody) (*domain.PostBucketsIDOwnersResponse, error) {
	ret := _m.Called(ctx, bucketID, params, body)

	var r0 *domain.PostBucketsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostBucketsIDOwnersParams, domain.PostBucketsIDOwnersJSONRequestBody) *domain.PostBucketsIDOwnersResponse); ok {
		r0 = rf(ctx, bucketID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostBucketsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostBucketsIDOwnersParams, domain.PostBucketsIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, bucketID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostBucketsIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsIDOwnersWithResponse'
type ClientWithResponsesInterface_PostBucketsIDOwnersWithResponse_Call struct {
	*mock.Call
}

// PostBucketsIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostBucketsIDOwnersParams
//  - body domain.PostBucketsIDOwnersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostBucketsIDOwnersWithResponse(ctx interface{}, bucketID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostBucketsIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_PostBucketsIDOwnersWithResponse_Call{Call: _e.mock.On("PostBucketsIDOwnersWithResponse", ctx, bucketID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostBucketsIDOwnersWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostBucketsIDOwnersParams, body domain.PostBucketsIDOwnersJSONRequestBody)) *ClientWithResponsesInterface_PostBucketsIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostBucketsIDOwnersParams), args[3].(domain.PostBucketsIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostBucketsIDOwnersWithResponse_Call) Return(_a0 *domain.PostBucketsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostBucketsIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostBucketsWithBodyWithResponse(ctx context.Context, params *domain.PostBucketsParams, contentType string, body io.Reader) (*domain.PostBucketsResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostBucketsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostBucketsParams, string, io.Reader) *domain.PostBucketsResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostBucketsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostBucketsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostBucketsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsWithBodyWithResponse'
type ClientWithResponsesInterface_PostBucketsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostBucketsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostBucketsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostBucketsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostBucketsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostBucketsWithBodyWithResponse_Call{Call: _e.mock.On("PostBucketsWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostBucketsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostBucketsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostBucketsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostBucketsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostBucketsWithBodyWithResponse_Call) Return(_a0 *domain.PostBucketsResponse, _a1 error) *ClientWithResponsesInterface_PostBucketsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostBucketsWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostBucketsWithResponse(ctx context.Context, params *domain.PostBucketsParams, body domain.PostBucketsJSONRequestBody) (*domain.PostBucketsResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostBucketsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostBucketsParams, domain.PostBucketsJSONRequestBody) *domain.PostBucketsResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostBucketsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostBucketsParams, domain.PostBucketsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostBucketsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostBucketsWithResponse'
type ClientWithResponsesInterface_PostBucketsWithResponse_Call struct {
	*mock.Call
}

// PostBucketsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostBucketsParams
//  - body domain.PostBucketsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostBucketsWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostBucketsWithResponse_Call {
	return &ClientWithResponsesInterface_PostBucketsWithResponse_Call{Call: _e.mock.On("PostBucketsWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostBucketsWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostBucketsParams, body domain.PostBucketsJSONRequestBody)) *ClientWithResponsesInterface_PostBucketsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostBucketsParams), args[2].(domain.PostBucketsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostBucketsWithResponse_Call) Return(_a0 *domain.PostBucketsResponse, _a1 error) *ClientWithResponsesInterface_PostBucketsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostChecksIDLabelsWithBodyWithResponse provides a mock function with given fields: ctx, checkID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostChecksIDLabelsWithBodyWithResponse(ctx context.Context, checkID string, params *domain.PostChecksIDLabelsParams, contentType string, body io.Reader) (*domain.PostChecksIDLabelsResponse, error) {
	ret := _m.Called(ctx, checkID, params, contentType, body)

	var r0 *domain.PostChecksIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostChecksIDLabelsParams, string, io.Reader) *domain.PostChecksIDLabelsResponse); ok {
		r0 = rf(ctx, checkID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostChecksIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostChecksIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, checkID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostChecksIDLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostChecksIDLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostChecksIDLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostChecksIDLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PostChecksIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostChecksIDLabelsWithBodyWithResponse(ctx interface{}, checkID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostChecksIDLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostChecksIDLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostChecksIDLabelsWithBodyWithResponse", ctx, checkID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostChecksIDLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.PostChecksIDLabelsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostChecksIDLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostChecksIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostChecksIDLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostChecksIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostChecksIDLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostChecksIDLabelsWithResponse provides a mock function with given fields: ctx, checkID, params, body
func (_m *ClientWithResponsesInterface) PostChecksIDLabelsWithResponse(ctx context.Context, checkID string, params *domain.PostChecksIDLabelsParams, body domain.PostChecksIDLabelsJSONRequestBody) (*domain.PostChecksIDLabelsResponse, error) {
	ret := _m.Called(ctx, checkID, params, body)

	var r0 *domain.PostChecksIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostChecksIDLabelsParams, domain.PostChecksIDLabelsJSONRequestBody) *domain.PostChecksIDLabelsResponse); ok {
		r0 = rf(ctx, checkID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostChecksIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostChecksIDLabelsParams, domain.PostChecksIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, checkID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostChecksIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostChecksIDLabelsWithResponse'
type ClientWithResponsesInterface_PostChecksIDLabelsWithResponse_Call struct {
	*mock.Call
}

// PostChecksIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PostChecksIDLabelsParams
//  - body domain.PostChecksIDLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostChecksIDLabelsWithResponse(ctx interface{}, checkID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostChecksIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostChecksIDLabelsWithResponse_Call{Call: _e.mock.On("PostChecksIDLabelsWithResponse", ctx, checkID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostChecksIDLabelsWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.PostChecksIDLabelsParams, body domain.PostChecksIDLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostChecksIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostChecksIDLabelsParams), args[3].(domain.PostChecksIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostChecksIDLabelsWithResponse_Call) Return(_a0 *domain.PostChecksIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostChecksIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDBRPWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostDBRPWithBodyWithResponse(ctx context.Context, params *domain.PostDBRPParams, contentType string, body io.Reader) (*domain.PostDBRPResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostDBRPResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDBRPParams, string, io.Reader) *domain.PostDBRPResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDBRPResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDBRPParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDBRPWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDBRPWithBodyWithResponse'
type ClientWithResponsesInterface_PostDBRPWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostDBRPWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDBRPParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostDBRPWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostDBRPWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostDBRPWithBodyWithResponse_Call{Call: _e.mock.On("PostDBRPWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostDBRPWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostDBRPParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostDBRPWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDBRPParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDBRPWithBodyWithResponse_Call) Return(_a0 *domain.PostDBRPResponse, _a1 error) *ClientWithResponsesInterface_PostDBRPWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDBRPWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostDBRPWithResponse(ctx context.Context, params *domain.PostDBRPParams, body domain.PostDBRPJSONRequestBody) (*domain.PostDBRPResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostDBRPResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDBRPParams, domain.PostDBRPJSONRequestBody) *domain.PostDBRPResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDBRPResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDBRPParams, domain.PostDBRPJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDBRPWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDBRPWithResponse'
type ClientWithResponsesInterface_PostDBRPWithResponse_Call struct {
	*mock.Call
}

// PostDBRPWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDBRPParams
//  - body domain.PostDBRPJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostDBRPWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostDBRPWithResponse_Call {
	return &ClientWithResponsesInterface_PostDBRPWithResponse_Call{Call: _e.mock.On("PostDBRPWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostDBRPWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostDBRPParams, body domain.PostDBRPJSONRequestBody)) *ClientWithResponsesInterface_PostDBRPWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDBRPParams), args[2].(domain.PostDBRPJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDBRPWithResponse_Call) Return(_a0 *domain.PostDBRPResponse, _a1 error) *ClientWithResponsesInterface_PostDBRPWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDCellsWithBodyWithResponse provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostDashboardsIDCellsWithBodyWithResponse(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDCellsParams, contentType string, body io.Reader) (*domain.PostDashboardsIDCellsResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *domain.PostDashboardsIDCellsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDCellsParams, string, io.Reader) *domain.PostDashboardsIDCellsResponse); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsIDCellsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDCellsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsIDCellsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDCellsWithBodyWithResponse'
type ClientWithResponsesInterface_PostDashboardsIDCellsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsIDCellsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDCellsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsIDCellsWithBodyWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsIDCellsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsIDCellsWithBodyWithResponse_Call{Call: _e.mock.On("PostDashboardsIDCellsWithBodyWithResponse", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDCellsWithBodyWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDCellsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostDashboardsIDCellsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDCellsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDCellsWithBodyWithResponse_Call) Return(_a0 *domain.PostDashboardsIDCellsResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsIDCellsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDCellsWithResponse provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientWithResponsesInterface) PostDashboardsIDCellsWithResponse(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDCellsParams, body domain.PostDashboardsIDCellsJSONRequestBody) (*domain.PostDashboardsIDCellsResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *domain.PostDashboardsIDCellsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDCellsParams, domain.PostDashboardsIDCellsJSONRequestBody) *domain.PostDashboardsIDCellsResponse); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsIDCellsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDCellsParams, domain.PostDashboardsIDCellsJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsIDCellsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDCellsWithResponse'
type ClientWithResponsesInterface_PostDashboardsIDCellsWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsIDCellsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDCellsParams
//  - body domain.PostDashboardsIDCellsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsIDCellsWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsIDCellsWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsIDCellsWithResponse_Call{Call: _e.mock.On("PostDashboardsIDCellsWithResponse", ctx, dashboardID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDCellsWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDCellsParams, body domain.PostDashboardsIDCellsJSONRequestBody)) *ClientWithResponsesInterface_PostDashboardsIDCellsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDCellsParams), args[3].(domain.PostDashboardsIDCellsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDCellsWithResponse_Call) Return(_a0 *domain.PostDashboardsIDCellsResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsIDCellsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDLabelsWithBodyWithResponse provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostDashboardsIDLabelsWithBodyWithResponse(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDLabelsParams, contentType string, body io.Reader) (*domain.PostDashboardsIDLabelsResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *domain.PostDashboardsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDLabelsParams, string, io.Reader) *domain.PostDashboardsIDLabelsResponse); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsIDLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostDashboardsIDLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsIDLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsIDLabelsWithBodyWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsIDLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsIDLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostDashboardsIDLabelsWithBodyWithResponse", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDLabelsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostDashboardsIDLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostDashboardsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsIDLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDLabelsWithResponse provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientWithResponsesInterface) PostDashboardsIDLabelsWithResponse(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDLabelsParams, body domain.PostDashboardsIDLabelsJSONRequestBody) (*domain.PostDashboardsIDLabelsResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *domain.PostDashboardsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDLabelsParams, domain.PostDashboardsIDLabelsJSONRequestBody) *domain.PostDashboardsIDLabelsResponse); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDLabelsParams, domain.PostDashboardsIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDLabelsWithResponse'
type ClientWithResponsesInterface_PostDashboardsIDLabelsWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDLabelsParams
//  - body domain.PostDashboardsIDLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsIDLabelsWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsIDLabelsWithResponse_Call{Call: _e.mock.On("PostDashboardsIDLabelsWithResponse", ctx, dashboardID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDLabelsWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDLabelsParams, body domain.PostDashboardsIDLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostDashboardsIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDLabelsParams), args[3].(domain.PostDashboardsIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDLabelsWithResponse_Call) Return(_a0 *domain.PostDashboardsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDMembersWithBodyWithResponse provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostDashboardsIDMembersWithBodyWithResponse(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDMembersParams, contentType string, body io.Reader) (*domain.PostDashboardsIDMembersResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *domain.PostDashboardsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDMembersParams, string, io.Reader) *domain.PostDashboardsIDMembersResponse); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsIDMembersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDMembersWithBodyWithResponse'
type ClientWithResponsesInterface_PostDashboardsIDMembersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsIDMembersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsIDMembersWithBodyWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsIDMembersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsIDMembersWithBodyWithResponse_Call{Call: _e.mock.On("PostDashboardsIDMembersWithBodyWithResponse", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDMembersWithBodyWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDMembersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostDashboardsIDMembersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDMembersWithBodyWithResponse_Call) Return(_a0 *domain.PostDashboardsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsIDMembersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDMembersWithResponse provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientWithResponsesInterface) PostDashboardsIDMembersWithResponse(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDMembersParams, body domain.PostDashboardsIDMembersJSONRequestBody) (*domain.PostDashboardsIDMembersResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *domain.PostDashboardsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDMembersParams, domain.PostDashboardsIDMembersJSONRequestBody) *domain.PostDashboardsIDMembersResponse); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDMembersParams, domain.PostDashboardsIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDMembersWithResponse'
type ClientWithResponsesInterface_PostDashboardsIDMembersWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDMembersParams
//  - body domain.PostDashboardsIDMembersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsIDMembersWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsIDMembersWithResponse_Call{Call: _e.mock.On("PostDashboardsIDMembersWithResponse", ctx, dashboardID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDMembersWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDMembersParams, body domain.PostDashboardsIDMembersJSONRequestBody)) *ClientWithResponsesInterface_PostDashboardsIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDMembersParams), args[3].(domain.PostDashboardsIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDMembersWithResponse_Call) Return(_a0 *domain.PostDashboardsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDOwnersWithBodyWithResponse provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostDashboardsIDOwnersWithBodyWithResponse(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDOwnersParams, contentType string, body io.Reader) (*domain.PostDashboardsIDOwnersResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *domain.PostDashboardsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDOwnersParams, string, io.Reader) *domain.PostDashboardsIDOwnersResponse); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsIDOwnersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDOwnersWithBodyWithResponse'
type ClientWithResponsesInterface_PostDashboardsIDOwnersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsIDOwnersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsIDOwnersWithBodyWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsIDOwnersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsIDOwnersWithBodyWithResponse_Call{Call: _e.mock.On("PostDashboardsIDOwnersWithBodyWithResponse", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDOwnersWithBodyWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDOwnersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostDashboardsIDOwnersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDOwnersWithBodyWithResponse_Call) Return(_a0 *domain.PostDashboardsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsIDOwnersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsIDOwnersWithResponse provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientWithResponsesInterface) PostDashboardsIDOwnersWithResponse(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDOwnersParams, body domain.PostDashboardsIDOwnersJSONRequestBody) (*domain.PostDashboardsIDOwnersResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *domain.PostDashboardsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostDashboardsIDOwnersParams, domain.PostDashboardsIDOwnersJSONRequestBody) *domain.PostDashboardsIDOwnersResponse); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostDashboardsIDOwnersParams, domain.PostDashboardsIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsIDOwnersWithResponse'
type ClientWithResponsesInterface_PostDashboardsIDOwnersWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PostDashboardsIDOwnersParams
//  - body domain.PostDashboardsIDOwnersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsIDOwnersWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsIDOwnersWithResponse_Call{Call: _e.mock.On("PostDashboardsIDOwnersWithResponse", ctx, dashboardID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDOwnersWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PostDashboardsIDOwnersParams, body domain.PostDashboardsIDOwnersJSONRequestBody)) *ClientWithResponsesInterface_PostDashboardsIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostDashboardsIDOwnersParams), args[3].(domain.PostDashboardsIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsIDOwnersWithResponse_Call) Return(_a0 *domain.PostDashboardsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostDashboardsWithBodyWithResponse(ctx context.Context, params *domain.PostDashboardsParams, contentType string, body io.Reader) (*domain.PostDashboardsResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostDashboardsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDashboardsParams, string, io.Reader) *domain.PostDashboardsResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDashboardsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsWithBodyWithResponse'
type ClientWithResponsesInterface_PostDashboardsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDashboardsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsWithBodyWithResponse_Call{Call: _e.mock.On("PostDashboardsWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostDashboardsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostDashboardsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDashboardsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsWithBodyWithResponse_Call) Return(_a0 *domain.PostDashboardsResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDashboardsWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostDashboardsWithResponse(ctx context.Context, params *domain.PostDashboardsParams, body domain.PostDashboardsJSONRequestBody) (*domain.PostDashboardsResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostDashboardsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDashboardsParams, domain.PostDashboardsJSONRequestBody) *domain.PostDashboardsResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDashboardsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDashboardsParams, domain.PostDashboardsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDashboardsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDashboardsWithResponse'
type ClientWithResponsesInterface_PostDashboardsWithResponse_Call struct {
	*mock.Call
}

// PostDashboardsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDashboardsParams
//  - body domain.PostDashboardsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostDashboardsWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostDashboardsWithResponse_Call {
	return &ClientWithResponsesInterface_PostDashboardsWithResponse_Call{Call: _e.mock.On("PostDashboardsWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostDashboardsWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostDashboardsParams, body domain.PostDashboardsJSONRequestBody)) *ClientWithResponsesInterface_PostDashboardsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDashboardsParams), args[2].(domain.PostDashboardsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDashboardsWithResponse_Call) Return(_a0 *domain.PostDashboardsResponse, _a1 error) *ClientWithResponsesInterface_PostDashboardsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDeleteWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostDeleteWithBodyWithResponse(ctx context.Context, params *domain.PostDeleteParams, contentType string, body io.Reader) (*domain.PostDeleteResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDeleteParams, string, io.Reader) *domain.PostDeleteResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDeleteParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDeleteWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDeleteWithBodyWithResponse'
type ClientWithResponsesInterface_PostDeleteWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostDeleteWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDeleteParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostDeleteWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostDeleteWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostDeleteWithBodyWithResponse_Call{Call: _e.mock.On("PostDeleteWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostDeleteWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostDeleteParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostDeleteWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDeleteParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDeleteWithBodyWithResponse_Call) Return(_a0 *domain.PostDeleteResponse, _a1 error) *ClientWithResponsesInterface_PostDeleteWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostDeleteWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostDeleteWithResponse(ctx context.Context, params *domain.PostDeleteParams, body domain.PostDeleteJSONRequestBody) (*domain.PostDeleteResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostDeleteParams, domain.PostDeleteJSONRequestBody) *domain.PostDeleteResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostDeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostDeleteParams, domain.PostDeleteJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostDeleteWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDeleteWithResponse'
type ClientWithResponsesInterface_PostDeleteWithResponse_Call struct {
	*mock.Call
}

// PostDeleteWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostDeleteParams
//  - body domain.PostDeleteJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostDeleteWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostDeleteWithResponse_Call {
	return &ClientWithResponsesInterface_PostDeleteWithResponse_Call{Call: _e.mock.On("PostDeleteWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostDeleteWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostDeleteParams, body domain.PostDeleteJSONRequestBody)) *ClientWithResponsesInterface_PostDeleteWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostDeleteParams), args[2].(domain.PostDeleteJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostDeleteWithResponse_Call) Return(_a0 *domain.PostDeleteResponse, _a1 error) *ClientWithResponsesInterface_PostDeleteWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLabelsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body
func (_m *ClientWithResponsesInterface) PostLabelsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*domain.PostLabelsResponse, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *domain.PostLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *domain.PostLabelsResponse); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostLabelsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostLabelsWithBodyWithResponse", ctx, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLabelsWithResponse provides a mock function with given fields: ctx, body
func (_m *ClientWithResponsesInterface) PostLabelsWithResponse(ctx context.Context, body domain.PostLabelsJSONRequestBody) (*domain.PostLabelsResponse, error) {
	ret := _m.Called(ctx, body)

	var r0 *domain.PostLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.PostLabelsJSONRequestBody) *domain.PostLabelsResponse); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.PostLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLabelsWithResponse'
type ClientWithResponsesInterface_PostLabelsWithResponse_Call struct {
	*mock.Call
}

// PostLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.PostLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostLabelsWithResponse(ctx interface{}, body interface{}) *ClientWithResponsesInterface_PostLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostLabelsWithResponse_Call{Call: _e.mock.On("PostLabelsWithResponse", ctx, body)}
}

func (_c *ClientWithResponsesInterface_PostLabelsWithResponse_Call) Run(run func(ctx context.Context, body domain.PostLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PostLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostLabelsWithResponse_Call) Return(_a0 *domain.PostLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLegacyAuthorizationsIDPasswordWithBodyWithResponse provides a mock function with given fields: ctx, authID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostLegacyAuthorizationsIDPasswordWithBodyWithResponse(ctx context.Context, authID string, params *domain.PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader) (*domain.PostLegacyAuthorizationsIDPasswordResponse, error) {
	ret := _m.Called(ctx, authID, params, contentType, body)

	var r0 *domain.PostLegacyAuthorizationsIDPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostLegacyAuthorizationsIDPasswordParams, string, io.Reader) *domain.PostLegacyAuthorizationsIDPasswordResponse); ok {
		r0 = rf(ctx, authID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostLegacyAuthorizationsIDPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostLegacyAuthorizationsIDPasswordParams, string, io.Reader) error); ok {
		r1 = rf(ctx, authID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLegacyAuthorizationsIDPasswordWithBodyWithResponse'
type ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostLegacyAuthorizationsIDPasswordWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PostLegacyAuthorizationsIDPasswordParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostLegacyAuthorizationsIDPasswordWithBodyWithResponse(ctx interface{}, authID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithBodyWithResponse_Call{Call: _e.mock.On("PostLegacyAuthorizationsIDPasswordWithBodyWithResponse", ctx, authID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithBodyWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.PostLegacyAuthorizationsIDPasswordParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostLegacyAuthorizationsIDPasswordParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithBodyWithResponse_Call) Return(_a0 *domain.PostLegacyAuthorizationsIDPasswordResponse, _a1 error) *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLegacyAuthorizationsIDPasswordWithResponse provides a mock function with given fields: ctx, authID, params, body
func (_m *ClientWithResponsesInterface) PostLegacyAuthorizationsIDPasswordWithResponse(ctx context.Context, authID string, params *domain.PostLegacyAuthorizationsIDPasswordParams, body domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody) (*domain.PostLegacyAuthorizationsIDPasswordResponse, error) {
	ret := _m.Called(ctx, authID, params, body)

	var r0 *domain.PostLegacyAuthorizationsIDPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostLegacyAuthorizationsIDPasswordParams, domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody) *domain.PostLegacyAuthorizationsIDPasswordResponse); ok {
		r0 = rf(ctx, authID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostLegacyAuthorizationsIDPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostLegacyAuthorizationsIDPasswordParams, domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody) error); ok {
		r1 = rf(ctx, authID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLegacyAuthorizationsIDPasswordWithResponse'
type ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithResponse_Call struct {
	*mock.Call
}

// PostLegacyAuthorizationsIDPasswordWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - authID string
//  - params *domain.PostLegacyAuthorizationsIDPasswordParams
//  - body domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostLegacyAuthorizationsIDPasswordWithResponse(ctx interface{}, authID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithResponse_Call {
	return &ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithResponse_Call{Call: _e.mock.On("PostLegacyAuthorizationsIDPasswordWithResponse", ctx, authID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithResponse_Call) Run(run func(ctx context.Context, authID string, params *domain.PostLegacyAuthorizationsIDPasswordParams, body domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody)) *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostLegacyAuthorizationsIDPasswordParams), args[3].(domain.PostLegacyAuthorizationsIDPasswordJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithResponse_Call) Return(_a0 *domain.PostLegacyAuthorizationsIDPasswordResponse, _a1 error) *ClientWithResponsesInterface_PostLegacyAuthorizationsIDPasswordWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLegacyAuthorizationsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostLegacyAuthorizationsWithBodyWithResponse(ctx context.Context, params *domain.PostLegacyAuthorizationsParams, contentType string, body io.Reader) (*domain.PostLegacyAuthorizationsResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostLegacyAuthorizationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostLegacyAuthorizationsParams, string, io.Reader) *domain.PostLegacyAuthorizationsResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostLegacyAuthorizationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostLegacyAuthorizationsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostLegacyAuthorizationsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLegacyAuthorizationsWithBodyWithResponse'
type ClientWithResponsesInterface_PostLegacyAuthorizationsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostLegacyAuthorizationsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostLegacyAuthorizationsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostLegacyAuthorizationsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostLegacyAuthorizationsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostLegacyAuthorizationsWithBodyWithResponse_Call{Call: _e.mock.On("PostLegacyAuthorizationsWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostLegacyAuthorizationsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostLegacyAuthorizationsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostLegacyAuthorizationsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostLegacyAuthorizationsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostLegacyAuthorizationsWithBodyWithResponse_Call) Return(_a0 *domain.PostLegacyAuthorizationsResponse, _a1 error) *ClientWithResponsesInterface_PostLegacyAuthorizationsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostLegacyAuthorizationsWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostLegacyAuthorizationsWithResponse(ctx context.Context, params *domain.PostLegacyAuthorizationsParams, body domain.PostLegacyAuthorizationsJSONRequestBody) (*domain.PostLegacyAuthorizationsResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostLegacyAuthorizationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostLegacyAuthorizationsParams, domain.PostLegacyAuthorizationsJSONRequestBody) *domain.PostLegacyAuthorizationsResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostLegacyAuthorizationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostLegacyAuthorizationsParams, domain.PostLegacyAuthorizationsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostLegacyAuthorizationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLegacyAuthorizationsWithResponse'
type ClientWithResponsesInterface_PostLegacyAuthorizationsWithResponse_Call struct {
	*mock.Call
}

// PostLegacyAuthorizationsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostLegacyAuthorizationsParams
//  - body domain.PostLegacyAuthorizationsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostLegacyAuthorizationsWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostLegacyAuthorizationsWithResponse_Call {
	return &ClientWithResponsesInterface_PostLegacyAuthorizationsWithResponse_Call{Call: _e.mock.On("PostLegacyAuthorizationsWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostLegacyAuthorizationsWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostLegacyAuthorizationsParams, body domain.PostLegacyAuthorizationsJSONRequestBody)) *ClientWithResponsesInterface_PostLegacyAuthorizationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostLegacyAuthorizationsParams), args[2].(domain.PostLegacyAuthorizationsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostLegacyAuthorizationsWithResponse_Call) Return(_a0 *domain.PostLegacyAuthorizationsResponse, _a1 error) *ClientWithResponsesInterface_PostLegacyAuthorizationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostNotificationEndpointIDLabelsWithBodyWithResponse provides a mock function with given fields: ctx, endpointID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostNotificationEndpointIDLabelsWithBodyWithResponse(ctx context.Context, endpointID string, params *domain.PostNotificationEndpointIDLabelsParams, contentType string, body io.Reader) (*domain.PostNotificationEndpointIDLabelsResponse, error) {
	ret := _m.Called(ctx, endpointID, params, contentType, body)

	var r0 *domain.PostNotificationEndpointIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostNotificationEndpointIDLabelsParams, string, io.Reader) *domain.PostNotificationEndpointIDLabelsResponse); ok {
		r0 = rf(ctx, endpointID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostNotificationEndpointIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostNotificationEndpointIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, endpointID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostNotificationEndpointIDLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostNotificationEndpointIDLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PostNotificationEndpointIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostNotificationEndpointIDLabelsWithBodyWithResponse(ctx interface{}, endpointID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostNotificationEndpointIDLabelsWithBodyWithResponse", ctx, endpointID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PostNotificationEndpointIDLabelsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostNotificationEndpointIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostNotificationEndpointIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostNotificationEndpointIDLabelsWithResponse provides a mock function with given fields: ctx, endpointID, params, body
func (_m *ClientWithResponsesInterface) PostNotificationEndpointIDLabelsWithResponse(ctx context.Context, endpointID string, params *domain.PostNotificationEndpointIDLabelsParams, body domain.PostNotificationEndpointIDLabelsJSONRequestBody) (*domain.PostNotificationEndpointIDLabelsResponse, error) {
	ret := _m.Called(ctx, endpointID, params, body)

	var r0 *domain.PostNotificationEndpointIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostNotificationEndpointIDLabelsParams, domain.PostNotificationEndpointIDLabelsJSONRequestBody) *domain.PostNotificationEndpointIDLabelsResponse); ok {
		r0 = rf(ctx, endpointID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostNotificationEndpointIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostNotificationEndpointIDLabelsParams, domain.PostNotificationEndpointIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, endpointID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostNotificationEndpointIDLabelsWithResponse'
type ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithResponse_Call struct {
	*mock.Call
}

// PostNotificationEndpointIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PostNotificationEndpointIDLabelsParams
//  - body domain.PostNotificationEndpointIDLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostNotificationEndpointIDLabelsWithResponse(ctx interface{}, endpointID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithResponse_Call{Call: _e.mock.On("PostNotificationEndpointIDLabelsWithResponse", ctx, endpointID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithResponse_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PostNotificationEndpointIDLabelsParams, body domain.PostNotificationEndpointIDLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostNotificationEndpointIDLabelsParams), args[3].(domain.PostNotificationEndpointIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithResponse_Call) Return(_a0 *domain.PostNotificationEndpointIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostNotificationEndpointIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostNotificationRuleIDLabelsWithBodyWithResponse provides a mock function with given fields: ctx, ruleID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostNotificationRuleIDLabelsWithBodyWithResponse(ctx context.Context, ruleID string, params *domain.PostNotificationRuleIDLabelsParams, contentType string, body io.Reader) (*domain.PostNotificationRuleIDLabelsResponse, error) {
	ret := _m.Called(ctx, ruleID, params, contentType, body)

	var r0 *domain.PostNotificationRuleIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostNotificationRuleIDLabelsParams, string, io.Reader) *domain.PostNotificationRuleIDLabelsResponse); ok {
		r0 = rf(ctx, ruleID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostNotificationRuleIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostNotificationRuleIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, ruleID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostNotificationRuleIDLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostNotificationRuleIDLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PostNotificationRuleIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostNotificationRuleIDLabelsWithBodyWithResponse(ctx interface{}, ruleID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostNotificationRuleIDLabelsWithBodyWithResponse", ctx, ruleID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PostNotificationRuleIDLabelsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostNotificationRuleIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostNotificationRuleIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostNotificationRuleIDLabelsWithResponse provides a mock function with given fields: ctx, ruleID, params, body
func (_m *ClientWithResponsesInterface) PostNotificationRuleIDLabelsWithResponse(ctx context.Context, ruleID string, params *domain.PostNotificationRuleIDLabelsParams, body domain.PostNotificationRuleIDLabelsJSONRequestBody) (*domain.PostNotificationRuleIDLabelsResponse, error) {
	ret := _m.Called(ctx, ruleID, params, body)

	var r0 *domain.PostNotificationRuleIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostNotificationRuleIDLabelsParams, domain.PostNotificationRuleIDLabelsJSONRequestBody) *domain.PostNotificationRuleIDLabelsResponse); ok {
		r0 = rf(ctx, ruleID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostNotificationRuleIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostNotificationRuleIDLabelsParams, domain.PostNotificationRuleIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, ruleID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostNotificationRuleIDLabelsWithResponse'
type ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithResponse_Call struct {
	*mock.Call
}

// PostNotificationRuleIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PostNotificationRuleIDLabelsParams
//  - body domain.PostNotificationRuleIDLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostNotificationRuleIDLabelsWithResponse(ctx interface{}, ruleID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithResponse_Call{Call: _e.mock.On("PostNotificationRuleIDLabelsWithResponse", ctx, ruleID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PostNotificationRuleIDLabelsParams, body domain.PostNotificationRuleIDLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostNotificationRuleIDLabelsParams), args[3].(domain.PostNotificationRuleIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithResponse_Call) Return(_a0 *domain.PostNotificationRuleIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostNotificationRuleIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDMembersWithBodyWithResponse provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostOrgsIDMembersWithBodyWithResponse(ctx context.Context, orgID string, params *domain.PostOrgsIDMembersParams, contentType string, body io.Reader) (*domain.PostOrgsIDMembersResponse, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *domain.PostOrgsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDMembersParams, string, io.Reader) *domain.PostOrgsIDMembersResponse); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostOrgsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostOrgsIDMembersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDMembersWithBodyWithResponse'
type ClientWithResponsesInterface_PostOrgsIDMembersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostOrgsIDMembersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostOrgsIDMembersWithBodyWithResponse(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostOrgsIDMembersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostOrgsIDMembersWithBodyWithResponse_Call{Call: _e.mock.On("PostOrgsIDMembersWithBodyWithResponse", ctx, orgID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostOrgsIDMembersWithBodyWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDMembersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostOrgsIDMembersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostOrgsIDMembersWithBodyWithResponse_Call) Return(_a0 *domain.PostOrgsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostOrgsIDMembersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDMembersWithResponse provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientWithResponsesInterface) PostOrgsIDMembersWithResponse(ctx context.Context, orgID string, params *domain.PostOrgsIDMembersParams, body domain.PostOrgsIDMembersJSONRequestBody) (*domain.PostOrgsIDMembersResponse, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *domain.PostOrgsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDMembersParams, domain.PostOrgsIDMembersJSONRequestBody) *domain.PostOrgsIDMembersResponse); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostOrgsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDMembersParams, domain.PostOrgsIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostOrgsIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDMembersWithResponse'
type ClientWithResponsesInterface_PostOrgsIDMembersWithResponse_Call struct {
	*mock.Call
}

// PostOrgsIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDMembersParams
//  - body domain.PostOrgsIDMembersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostOrgsIDMembersWithResponse(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostOrgsIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_PostOrgsIDMembersWithResponse_Call{Call: _e.mock.On("PostOrgsIDMembersWithResponse", ctx, orgID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostOrgsIDMembersWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDMembersParams, body domain.PostOrgsIDMembersJSONRequestBody)) *ClientWithResponsesInterface_PostOrgsIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDMembersParams), args[3].(domain.PostOrgsIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostOrgsIDMembersWithResponse_Call) Return(_a0 *domain.PostOrgsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostOrgsIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDOwnersWithBodyWithResponse provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostOrgsIDOwnersWithBodyWithResponse(ctx context.Context, orgID string, params *domain.PostOrgsIDOwnersParams, contentType string, body io.Reader) (*domain.PostOrgsIDOwnersResponse, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *domain.PostOrgsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDOwnersParams, string, io.Reader) *domain.PostOrgsIDOwnersResponse); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostOrgsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostOrgsIDOwnersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDOwnersWithBodyWithResponse'
type ClientWithResponsesInterface_PostOrgsIDOwnersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostOrgsIDOwnersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostOrgsIDOwnersWithBodyWithResponse(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostOrgsIDOwnersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostOrgsIDOwnersWithBodyWithResponse_Call{Call: _e.mock.On("PostOrgsIDOwnersWithBodyWithResponse", ctx, orgID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostOrgsIDOwnersWithBodyWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDOwnersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostOrgsIDOwnersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostOrgsIDOwnersWithBodyWithResponse_Call) Return(_a0 *domain.PostOrgsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostOrgsIDOwnersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDOwnersWithResponse provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientWithResponsesInterface) PostOrgsIDOwnersWithResponse(ctx context.Context, orgID string, params *domain.PostOrgsIDOwnersParams, body domain.PostOrgsIDOwnersJSONRequestBody) (*domain.PostOrgsIDOwnersResponse, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *domain.PostOrgsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDOwnersParams, domain.PostOrgsIDOwnersJSONRequestBody) *domain.PostOrgsIDOwnersResponse); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostOrgsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDOwnersParams, domain.PostOrgsIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostOrgsIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDOwnersWithResponse'
type ClientWithResponsesInterface_PostOrgsIDOwnersWithResponse_Call struct {
	*mock.Call
}

// PostOrgsIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDOwnersParams
//  - body domain.PostOrgsIDOwnersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostOrgsIDOwnersWithResponse(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostOrgsIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_PostOrgsIDOwnersWithResponse_Call{Call: _e.mock.On("PostOrgsIDOwnersWithResponse", ctx, orgID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostOrgsIDOwnersWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDOwnersParams, body domain.PostOrgsIDOwnersJSONRequestBody)) *ClientWithResponsesInterface_PostOrgsIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDOwnersParams), args[3].(domain.PostOrgsIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostOrgsIDOwnersWithResponse_Call) Return(_a0 *domain.PostOrgsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostOrgsIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDSecretsWithBodyWithResponse provides a mock function with given fields: ctx, orgID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostOrgsIDSecretsWithBodyWithResponse(ctx context.Context, orgID string, params *domain.PostOrgsIDSecretsParams, contentType string, body io.Reader) (*domain.PostOrgsIDSecretsResponse, error) {
	ret := _m.Called(ctx, orgID, params, contentType, body)

	var r0 *domain.PostOrgsIDSecretsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDSecretsParams, string, io.Reader) *domain.PostOrgsIDSecretsResponse); ok {
		r0 = rf(ctx, orgID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostOrgsIDSecretsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDSecretsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, orgID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostOrgsIDSecretsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDSecretsWithBodyWithResponse'
type ClientWithResponsesInterface_PostOrgsIDSecretsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostOrgsIDSecretsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDSecretsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostOrgsIDSecretsWithBodyWithResponse(ctx interface{}, orgID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostOrgsIDSecretsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostOrgsIDSecretsWithBodyWithResponse_Call{Call: _e.mock.On("PostOrgsIDSecretsWithBodyWithResponse", ctx, orgID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostOrgsIDSecretsWithBodyWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDSecretsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostOrgsIDSecretsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDSecretsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostOrgsIDSecretsWithBodyWithResponse_Call) Return(_a0 *domain.PostOrgsIDSecretsResponse, _a1 error) *ClientWithResponsesInterface_PostOrgsIDSecretsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsIDSecretsWithResponse provides a mock function with given fields: ctx, orgID, params, body
func (_m *ClientWithResponsesInterface) PostOrgsIDSecretsWithResponse(ctx context.Context, orgID string, params *domain.PostOrgsIDSecretsParams, body domain.PostOrgsIDSecretsJSONRequestBody) (*domain.PostOrgsIDSecretsResponse, error) {
	ret := _m.Called(ctx, orgID, params, body)

	var r0 *domain.PostOrgsIDSecretsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostOrgsIDSecretsParams, domain.PostOrgsIDSecretsJSONRequestBody) *domain.PostOrgsIDSecretsResponse); ok {
		r0 = rf(ctx, orgID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostOrgsIDSecretsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostOrgsIDSecretsParams, domain.PostOrgsIDSecretsJSONRequestBody) error); ok {
		r1 = rf(ctx, orgID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostOrgsIDSecretsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsIDSecretsWithResponse'
type ClientWithResponsesInterface_PostOrgsIDSecretsWithResponse_Call struct {
	*mock.Call
}

// PostOrgsIDSecretsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - params *domain.PostOrgsIDSecretsParams
//  - body domain.PostOrgsIDSecretsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostOrgsIDSecretsWithResponse(ctx interface{}, orgID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostOrgsIDSecretsWithResponse_Call {
	return &ClientWithResponsesInterface_PostOrgsIDSecretsWithResponse_Call{Call: _e.mock.On("PostOrgsIDSecretsWithResponse", ctx, orgID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostOrgsIDSecretsWithResponse_Call) Run(run func(ctx context.Context, orgID string, params *domain.PostOrgsIDSecretsParams, body domain.PostOrgsIDSecretsJSONRequestBody)) *ClientWithResponsesInterface_PostOrgsIDSecretsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostOrgsIDSecretsParams), args[3].(domain.PostOrgsIDSecretsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostOrgsIDSecretsWithResponse_Call) Return(_a0 *domain.PostOrgsIDSecretsResponse, _a1 error) *ClientWithResponsesInterface_PostOrgsIDSecretsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostOrgsWithBodyWithResponse(ctx context.Context, params *domain.PostOrgsParams, contentType string, body io.Reader) (*domain.PostOrgsResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostOrgsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostOrgsParams, string, io.Reader) *domain.PostOrgsResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostOrgsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostOrgsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostOrgsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsWithBodyWithResponse'
type ClientWithResponsesInterface_PostOrgsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostOrgsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostOrgsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostOrgsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostOrgsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostOrgsWithBodyWithResponse_Call{Call: _e.mock.On("PostOrgsWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostOrgsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostOrgsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostOrgsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostOrgsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostOrgsWithBodyWithResponse_Call) Return(_a0 *domain.PostOrgsResponse, _a1 error) *ClientWithResponsesInterface_PostOrgsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostOrgsWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostOrgsWithResponse(ctx context.Context, params *domain.PostOrgsParams, body domain.PostOrgsJSONRequestBody) (*domain.PostOrgsResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostOrgsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostOrgsParams, domain.PostOrgsJSONRequestBody) *domain.PostOrgsResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostOrgsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostOrgsParams, domain.PostOrgsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostOrgsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsWithResponse'
type ClientWithResponsesInterface_PostOrgsWithResponse_Call struct {
	*mock.Call
}

// PostOrgsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostOrgsParams
//  - body domain.PostOrgsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostOrgsWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostOrgsWithResponse_Call {
	return &ClientWithResponsesInterface_PostOrgsWithResponse_Call{Call: _e.mock.On("PostOrgsWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostOrgsWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostOrgsParams, body domain.PostOrgsJSONRequestBody)) *ClientWithResponsesInterface_PostOrgsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostOrgsParams), args[2].(domain.PostOrgsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostOrgsWithResponse_Call) Return(_a0 *domain.PostOrgsResponse, _a1 error) *ClientWithResponsesInterface_PostOrgsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryAnalyzeWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostQueryAnalyzeWithBodyWithResponse(ctx context.Context, params *domain.PostQueryAnalyzeParams, contentType string, body io.Reader) (*domain.PostQueryAnalyzeResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostQueryAnalyzeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryAnalyzeParams, string, io.Reader) *domain.PostQueryAnalyzeResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostQueryAnalyzeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryAnalyzeParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostQueryAnalyzeWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryAnalyzeWithBodyWithResponse'
type ClientWithResponsesInterface_PostQueryAnalyzeWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostQueryAnalyzeWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryAnalyzeParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostQueryAnalyzeWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostQueryAnalyzeWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostQueryAnalyzeWithBodyWithResponse_Call{Call: _e.mock.On("PostQueryAnalyzeWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostQueryAnalyzeWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostQueryAnalyzeParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostQueryAnalyzeWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryAnalyzeParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostQueryAnalyzeWithBodyWithResponse_Call) Return(_a0 *domain.PostQueryAnalyzeResponse, _a1 error) *ClientWithResponsesInterface_PostQueryAnalyzeWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryAnalyzeWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostQueryAnalyzeWithResponse(ctx context.Context, params *domain.PostQueryAnalyzeParams, body domain.PostQueryAnalyzeJSONRequestBody) (*domain.PostQueryAnalyzeResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostQueryAnalyzeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryAnalyzeParams, domain.PostQueryAnalyzeJSONRequestBody) *domain.PostQueryAnalyzeResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostQueryAnalyzeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryAnalyzeParams, domain.PostQueryAnalyzeJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostQueryAnalyzeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryAnalyzeWithResponse'
type ClientWithResponsesInterface_PostQueryAnalyzeWithResponse_Call struct {
	*mock.Call
}

// PostQueryAnalyzeWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryAnalyzeParams
//  - body domain.PostQueryAnalyzeJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostQueryAnalyzeWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostQueryAnalyzeWithResponse_Call {
	return &ClientWithResponsesInterface_PostQueryAnalyzeWithResponse_Call{Call: _e.mock.On("PostQueryAnalyzeWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostQueryAnalyzeWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostQueryAnalyzeParams, body domain.PostQueryAnalyzeJSONRequestBody)) *ClientWithResponsesInterface_PostQueryAnalyzeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryAnalyzeParams), args[2].(domain.PostQueryAnalyzeJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostQueryAnalyzeWithResponse_Call) Return(_a0 *domain.PostQueryAnalyzeResponse, _a1 error) *ClientWithResponsesInterface_PostQueryAnalyzeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryAstWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostQueryAstWithBodyWithResponse(ctx context.Context, params *domain.PostQueryAstParams, contentType string, body io.Reader) (*domain.PostQueryAstResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostQueryAstResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryAstParams, string, io.Reader) *domain.PostQueryAstResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostQueryAstResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryAstParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostQueryAstWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryAstWithBodyWithResponse'
type ClientWithResponsesInterface_PostQueryAstWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostQueryAstWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryAstParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostQueryAstWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostQueryAstWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostQueryAstWithBodyWithResponse_Call{Call: _e.mock.On("PostQueryAstWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostQueryAstWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostQueryAstParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostQueryAstWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryAstParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostQueryAstWithBodyWithResponse_Call) Return(_a0 *domain.PostQueryAstResponse, _a1 error) *ClientWithResponsesInterface_PostQueryAstWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryAstWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostQueryAstWithResponse(ctx context.Context, params *domain.PostQueryAstParams, body domain.PostQueryAstJSONRequestBody) (*domain.PostQueryAstResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostQueryAstResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryAstParams, domain.PostQueryAstJSONRequestBody) *domain.PostQueryAstResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostQueryAstResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryAstParams, domain.PostQueryAstJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostQueryAstWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryAstWithResponse'
type ClientWithResponsesInterface_PostQueryAstWithResponse_Call struct {
	*mock.Call
}

// PostQueryAstWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryAstParams
//  - body domain.PostQueryAstJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostQueryAstWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostQueryAstWithResponse_Call {
	return &ClientWithResponsesInterface_PostQueryAstWithResponse_Call{Call: _e.mock.On("PostQueryAstWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostQueryAstWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostQueryAstParams, body domain.PostQueryAstJSONRequestBody)) *ClientWithResponsesInterface_PostQueryAstWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryAstParams), args[2].(domain.PostQueryAstJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostQueryAstWithResponse_Call) Return(_a0 *domain.PostQueryAstResponse, _a1 error) *ClientWithResponsesInterface_PostQueryAstWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostQueryWithBodyWithResponse(ctx context.Context, params *domain.PostQueryParams, contentType string, body io.Reader) (*domain.PostQueryResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostQueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryParams, string, io.Reader) *domain.PostQueryResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostQueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostQueryWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryWithBodyWithResponse'
type ClientWithResponsesInterface_PostQueryWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostQueryWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostQueryWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostQueryWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostQueryWithBodyWithResponse_Call{Call: _e.mock.On("PostQueryWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostQueryWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostQueryParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostQueryWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostQueryWithBodyWithResponse_Call) Return(_a0 *domain.PostQueryResponse, _a1 error) *ClientWithResponsesInterface_PostQueryWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostQueryWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostQueryWithResponse(ctx context.Context, params *domain.PostQueryParams, body domain.PostQueryJSONRequestBody) (*domain.PostQueryResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostQueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostQueryParams, domain.PostQueryJSONRequestBody) *domain.PostQueryResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostQueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostQueryParams, domain.PostQueryJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostQueryWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueryWithResponse'
type ClientWithResponsesInterface_PostQueryWithResponse_Call struct {
	*mock.Call
}

// PostQueryWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostQueryParams
//  - body domain.PostQueryJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostQueryWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostQueryWithResponse_Call {
	return &ClientWithResponsesInterface_PostQueryWithResponse_Call{Call: _e.mock.On("PostQueryWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostQueryWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostQueryParams, body domain.PostQueryJSONRequestBody)) *ClientWithResponsesInterface_PostQueryWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostQueryParams), args[2].(domain.PostQueryJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostQueryWithResponse_Call) Return(_a0 *domain.PostQueryResponse, _a1 error) *ClientWithResponsesInterface_PostQueryWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRemoteConnectionWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body
func (_m *ClientWithResponsesInterface) PostRemoteConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*domain.PostRemoteConnectionResponse, error) {
	ret := _m.Called(ctx, contentType, body)

	var r0 *domain.PostRemoteConnectionResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) *domain.PostRemoteConnectionResponse); ok {
		r0 = rf(ctx, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostRemoteConnectionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostRemoteConnectionWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRemoteConnectionWithBodyWithResponse'
type ClientWithResponsesInterface_PostRemoteConnectionWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostRemoteConnectionWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostRemoteConnectionWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostRemoteConnectionWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostRemoteConnectionWithBodyWithResponse_Call{Call: _e.mock.On("PostRemoteConnectionWithBodyWithResponse", ctx, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostRemoteConnectionWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostRemoteConnectionWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostRemoteConnectionWithBodyWithResponse_Call) Return(_a0 *domain.PostRemoteConnectionResponse, _a1 error) *ClientWithResponsesInterface_PostRemoteConnectionWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRemoteConnectionWithResponse provides a mock function with given fields: ctx, body
func (_m *ClientWithResponsesInterface) PostRemoteConnectionWithResponse(ctx context.Context, body domain.PostRemoteConnectionJSONRequestBody) (*domain.PostRemoteConnectionResponse, error) {
	ret := _m.Called(ctx, body)

	var r0 *domain.PostRemoteConnectionResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.PostRemoteConnectionJSONRequestBody) *domain.PostRemoteConnectionResponse); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostRemoteConnectionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.PostRemoteConnectionJSONRequestBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostRemoteConnectionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRemoteConnectionWithResponse'
type ClientWithResponsesInterface_PostRemoteConnectionWithResponse_Call struct {
	*mock.Call
}

// PostRemoteConnectionWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - body domain.PostRemoteConnectionJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostRemoteConnectionWithResponse(ctx interface{}, body interface{}) *ClientWithResponsesInterface_PostRemoteConnectionWithResponse_Call {
	return &ClientWithResponsesInterface_PostRemoteConnectionWithResponse_Call{Call: _e.mock.On("PostRemoteConnectionWithResponse", ctx, body)}
}

func (_c *ClientWithResponsesInterface_PostRemoteConnectionWithResponse_Call) Run(run func(ctx context.Context, body domain.PostRemoteConnectionJSONRequestBody)) *ClientWithResponsesInterface_PostRemoteConnectionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PostRemoteConnectionJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostRemoteConnectionWithResponse_Call) Return(_a0 *domain.PostRemoteConnectionResponse, _a1 error) *ClientWithResponsesInterface_PostRemoteConnectionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostReplicationWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostReplicationWithBodyWithResponse(ctx context.Context, params *domain.PostReplicationParams, contentType string, body io.Reader) (*domain.PostReplicationResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostReplicationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostReplicationParams, string, io.Reader) *domain.PostReplicationResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostReplicationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostReplicationParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostReplicationWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReplicationWithBodyWithResponse'
type ClientWithResponsesInterface_PostReplicationWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostReplicationWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostReplicationParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostReplicationWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostReplicationWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostReplicationWithBodyWithResponse_Call{Call: _e.mock.On("PostReplicationWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostReplicationWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostReplicationParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostReplicationWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostReplicationParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostReplicationWithBodyWithResponse_Call) Return(_a0 *domain.PostReplicationResponse, _a1 error) *ClientWithResponsesInterface_PostReplicationWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostReplicationWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostReplicationWithResponse(ctx context.Context, params *domain.PostReplicationParams, body domain.PostReplicationJSONRequestBody) (*domain.PostReplicationResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostReplicationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostReplicationParams, domain.PostReplicationJSONRequestBody) *domain.PostReplicationResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostReplicationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostReplicationParams, domain.PostReplicationJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostReplicationWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReplicationWithResponse'
type ClientWithResponsesInterface_PostReplicationWithResponse_Call struct {
	*mock.Call
}

// PostReplicationWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostReplicationParams
//  - body domain.PostReplicationJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostReplicationWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostReplicationWithResponse_Call {
	return &ClientWithResponsesInterface_PostReplicationWithResponse_Call{Call: _e.mock.On("PostReplicationWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostReplicationWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostReplicationParams, body domain.PostReplicationJSONRequestBody)) *ClientWithResponsesInterface_PostReplicationWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostReplicationParams), args[2].(domain.PostReplicationJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostReplicationWithResponse_Call) Return(_a0 *domain.PostReplicationResponse, _a1 error) *ClientWithResponsesInterface_PostReplicationWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreBucketIDWithBodyWithResponse provides a mock function with given fields: ctx, bucketID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostRestoreBucketIDWithBodyWithResponse(ctx context.Context, bucketID string, params *domain.PostRestoreBucketIDParams, contentType string, body io.Reader) (*domain.PostRestoreBucketIDResponse, error) {
	ret := _m.Called(ctx, bucketID, params, contentType, body)

	var r0 *domain.PostRestoreBucketIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostRestoreBucketIDParams, string, io.Reader) *domain.PostRestoreBucketIDResponse); ok {
		r0 = rf(ctx, bucketID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostRestoreBucketIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostRestoreBucketIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, bucketID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostRestoreBucketIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreBucketIDWithBodyWithResponse'
type ClientWithResponsesInterface_PostRestoreBucketIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostRestoreBucketIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - params *domain.PostRestoreBucketIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostRestoreBucketIDWithBodyWithResponse(ctx interface{}, bucketID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostRestoreBucketIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostRestoreBucketIDWithBodyWithResponse_Call{Call: _e.mock.On("PostRestoreBucketIDWithBodyWithResponse", ctx, bucketID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostRestoreBucketIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, bucketID string, params *domain.PostRestoreBucketIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostRestoreBucketIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostRestoreBucketIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostRestoreBucketIDWithBodyWithResponse_Call) Return(_a0 *domain.PostRestoreBucketIDResponse, _a1 error) *ClientWithResponsesInterface_PostRestoreBucketIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreBucketMetadataWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostRestoreBucketMetadataWithBodyWithResponse(ctx context.Context, params *domain.PostRestoreBucketMetadataParams, contentType string, body io.Reader) (*domain.PostRestoreBucketMetadataResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostRestoreBucketMetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostRestoreBucketMetadataParams, string, io.Reader) *domain.PostRestoreBucketMetadataResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostRestoreBucketMetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostRestoreBucketMetadataParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostRestoreBucketMetadataWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreBucketMetadataWithBodyWithResponse'
type ClientWithResponsesInterface_PostRestoreBucketMetadataWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostRestoreBucketMetadataWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostRestoreBucketMetadataParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostRestoreBucketMetadataWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostRestoreBucketMetadataWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostRestoreBucketMetadataWithBodyWithResponse_Call{Call: _e.mock.On("PostRestoreBucketMetadataWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostRestoreBucketMetadataWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostRestoreBucketMetadataParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostRestoreBucketMetadataWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostRestoreBucketMetadataParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostRestoreBucketMetadataWithBodyWithResponse_Call) Return(_a0 *domain.PostRestoreBucketMetadataResponse, _a1 error) *ClientWithResponsesInterface_PostRestoreBucketMetadataWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreBucketMetadataWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostRestoreBucketMetadataWithResponse(ctx context.Context, params *domain.PostRestoreBucketMetadataParams, body domain.PostRestoreBucketMetadataJSONRequestBody) (*domain.PostRestoreBucketMetadataResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostRestoreBucketMetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostRestoreBucketMetadataParams, domain.PostRestoreBucketMetadataJSONRequestBody) *domain.PostRestoreBucketMetadataResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostRestoreBucketMetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostRestoreBucketMetadataParams, domain.PostRestoreBucketMetadataJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostRestoreBucketMetadataWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreBucketMetadataWithResponse'
type ClientWithResponsesInterface_PostRestoreBucketMetadataWithResponse_Call struct {
	*mock.Call
}

// PostRestoreBucketMetadataWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostRestoreBucketMetadataParams
//  - body domain.PostRestoreBucketMetadataJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostRestoreBucketMetadataWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostRestoreBucketMetadataWithResponse_Call {
	return &ClientWithResponsesInterface_PostRestoreBucketMetadataWithResponse_Call{Call: _e.mock.On("PostRestoreBucketMetadataWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostRestoreBucketMetadataWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostRestoreBucketMetadataParams, body domain.PostRestoreBucketMetadataJSONRequestBody)) *ClientWithResponsesInterface_PostRestoreBucketMetadataWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostRestoreBucketMetadataParams), args[2].(domain.PostRestoreBucketMetadataJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostRestoreBucketMetadataWithResponse_Call) Return(_a0 *domain.PostRestoreBucketMetadataResponse, _a1 error) *ClientWithResponsesInterface_PostRestoreBucketMetadataWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreKVWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostRestoreKVWithBodyWithResponse(ctx context.Context, params *domain.PostRestoreKVParams, contentType string, body io.Reader) (*domain.PostRestoreKVResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostRestoreKVResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostRestoreKVParams, string, io.Reader) *domain.PostRestoreKVResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostRestoreKVResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostRestoreKVParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostRestoreKVWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreKVWithBodyWithResponse'
type ClientWithResponsesInterface_PostRestoreKVWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostRestoreKVWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostRestoreKVParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostRestoreKVWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostRestoreKVWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostRestoreKVWithBodyWithResponse_Call{Call: _e.mock.On("PostRestoreKVWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostRestoreKVWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostRestoreKVParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostRestoreKVWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostRestoreKVParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostRestoreKVWithBodyWithResponse_Call) Return(_a0 *domain.PostRestoreKVResponse, _a1 error) *ClientWithResponsesInterface_PostRestoreKVWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreSQLWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostRestoreSQLWithBodyWithResponse(ctx context.Context, params *domain.PostRestoreSQLParams, contentType string, body io.Reader) (*domain.PostRestoreSQLResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostRestoreSQLResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostRestoreSQLParams, string, io.Reader) *domain.PostRestoreSQLResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostRestoreSQLResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostRestoreSQLParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostRestoreSQLWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreSQLWithBodyWithResponse'
type ClientWithResponsesInterface_PostRestoreSQLWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostRestoreSQLWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostRestoreSQLParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostRestoreSQLWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostRestoreSQLWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostRestoreSQLWithBodyWithResponse_Call{Call: _e.mock.On("PostRestoreSQLWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostRestoreSQLWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostRestoreSQLParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostRestoreSQLWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostRestoreSQLParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostRestoreSQLWithBodyWithResponse_Call) Return(_a0 *domain.PostRestoreSQLResponse, _a1 error) *ClientWithResponsesInterface_PostRestoreSQLWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostRestoreShardIdWithBodyWithResponse provides a mock function with given fields: ctx, shardID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostRestoreShardIdWithBodyWithResponse(ctx context.Context, shardID string, params *domain.PostRestoreShardIdParams, contentType string, body io.Reader) (*domain.PostRestoreShardIdResponse, error) {
	ret := _m.Called(ctx, shardID, params, contentType, body)

	var r0 *domain.PostRestoreShardIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostRestoreShardIdParams, string, io.Reader) *domain.PostRestoreShardIdResponse); ok {
		r0 = rf(ctx, shardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostRestoreShardIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostRestoreShardIdParams, string, io.Reader) error); ok {
		r1 = rf(ctx, shardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostRestoreShardIdWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRestoreShardIdWithBodyWithResponse'
type ClientWithResponsesInterface_PostRestoreShardIdWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostRestoreShardIdWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - shardID string
//  - params *domain.PostRestoreShardIdParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostRestoreShardIdWithBodyWithResponse(ctx interface{}, shardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostRestoreShardIdWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostRestoreShardIdWithBodyWithResponse_Call{Call: _e.mock.On("PostRestoreShardIdWithBodyWithResponse", ctx, shardID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostRestoreShardIdWithBodyWithResponse_Call) Run(run func(ctx context.Context, shardID string, params *domain.PostRestoreShardIdParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostRestoreShardIdWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostRestoreShardIdParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostRestoreShardIdWithBodyWithResponse_Call) Return(_a0 *domain.PostRestoreShardIdResponse, _a1 error) *ClientWithResponsesInterface_PostRestoreShardIdWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDLabelsWithBodyWithResponse provides a mock function with given fields: ctx, scraperTargetID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostScrapersIDLabelsWithBodyWithResponse(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDLabelsParams, contentType string, body io.Reader) (*domain.PostScrapersIDLabelsResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params, contentType, body)

	var r0 *domain.PostScrapersIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDLabelsParams, string, io.Reader) *domain.PostScrapersIDLabelsResponse); ok {
		r0 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostScrapersIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostScrapersIDLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostScrapersIDLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostScrapersIDLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostScrapersIDLabelsWithBodyWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostScrapersIDLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostScrapersIDLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostScrapersIDLabelsWithBodyWithResponse", ctx, scraperTargetID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostScrapersIDLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDLabelsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostScrapersIDLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostScrapersIDLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostScrapersIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostScrapersIDLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDLabelsWithResponse provides a mock function with given fields: ctx, scraperTargetID, params, body
func (_m *ClientWithResponsesInterface) PostScrapersIDLabelsWithResponse(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDLabelsParams, body domain.PostScrapersIDLabelsJSONRequestBody) (*domain.PostScrapersIDLabelsResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params, body)

	var r0 *domain.PostScrapersIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDLabelsParams, domain.PostScrapersIDLabelsJSONRequestBody) *domain.PostScrapersIDLabelsResponse); ok {
		r0 = rf(ctx, scraperTargetID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostScrapersIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDLabelsParams, domain.PostScrapersIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, scraperTargetID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostScrapersIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDLabelsWithResponse'
type ClientWithResponsesInterface_PostScrapersIDLabelsWithResponse_Call struct {
	*mock.Call
}

// PostScrapersIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDLabelsParams
//  - body domain.PostScrapersIDLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostScrapersIDLabelsWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostScrapersIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostScrapersIDLabelsWithResponse_Call{Call: _e.mock.On("PostScrapersIDLabelsWithResponse", ctx, scraperTargetID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostScrapersIDLabelsWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDLabelsParams, body domain.PostScrapersIDLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostScrapersIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDLabelsParams), args[3].(domain.PostScrapersIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostScrapersIDLabelsWithResponse_Call) Return(_a0 *domain.PostScrapersIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostScrapersIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDMembersWithBodyWithResponse provides a mock function with given fields: ctx, scraperTargetID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostScrapersIDMembersWithBodyWithResponse(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDMembersParams, contentType string, body io.Reader) (*domain.PostScrapersIDMembersResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params, contentType, body)

	var r0 *domain.PostScrapersIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDMembersParams, string, io.Reader) *domain.PostScrapersIDMembersResponse); ok {
		r0 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostScrapersIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostScrapersIDMembersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDMembersWithBodyWithResponse'
type ClientWithResponsesInterface_PostScrapersIDMembersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostScrapersIDMembersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostScrapersIDMembersWithBodyWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostScrapersIDMembersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostScrapersIDMembersWithBodyWithResponse_Call{Call: _e.mock.On("PostScrapersIDMembersWithBodyWithResponse", ctx, scraperTargetID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostScrapersIDMembersWithBodyWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDMembersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostScrapersIDMembersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostScrapersIDMembersWithBodyWithResponse_Call) Return(_a0 *domain.PostScrapersIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostScrapersIDMembersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDMembersWithResponse provides a mock function with given fields: ctx, scraperTargetID, params, body
func (_m *ClientWithResponsesInterface) PostScrapersIDMembersWithResponse(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDMembersParams, body domain.PostScrapersIDMembersJSONRequestBody) (*domain.PostScrapersIDMembersResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params, body)

	var r0 *domain.PostScrapersIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDMembersParams, domain.PostScrapersIDMembersJSONRequestBody) *domain.PostScrapersIDMembersResponse); ok {
		r0 = rf(ctx, scraperTargetID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostScrapersIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDMembersParams, domain.PostScrapersIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, scraperTargetID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostScrapersIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDMembersWithResponse'
type ClientWithResponsesInterface_PostScrapersIDMembersWithResponse_Call struct {
	*mock.Call
}

// PostScrapersIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDMembersParams
//  - body domain.PostScrapersIDMembersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostScrapersIDMembersWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostScrapersIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_PostScrapersIDMembersWithResponse_Call{Call: _e.mock.On("PostScrapersIDMembersWithResponse", ctx, scraperTargetID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostScrapersIDMembersWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDMembersParams, body domain.PostScrapersIDMembersJSONRequestBody)) *ClientWithResponsesInterface_PostScrapersIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDMembersParams), args[3].(domain.PostScrapersIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostScrapersIDMembersWithResponse_Call) Return(_a0 *domain.PostScrapersIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostScrapersIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDOwnersWithBodyWithResponse provides a mock function with given fields: ctx, scraperTargetID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostScrapersIDOwnersWithBodyWithResponse(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDOwnersParams, contentType string, body io.Reader) (*domain.PostScrapersIDOwnersResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params, contentType, body)

	var r0 *domain.PostScrapersIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDOwnersParams, string, io.Reader) *domain.PostScrapersIDOwnersResponse); ok {
		r0 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostScrapersIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, scraperTargetID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostScrapersIDOwnersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDOwnersWithBodyWithResponse'
type ClientWithResponsesInterface_PostScrapersIDOwnersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostScrapersIDOwnersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostScrapersIDOwnersWithBodyWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostScrapersIDOwnersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostScrapersIDOwnersWithBodyWithResponse_Call{Call: _e.mock.On("PostScrapersIDOwnersWithBodyWithResponse", ctx, scraperTargetID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostScrapersIDOwnersWithBodyWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDOwnersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostScrapersIDOwnersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostScrapersIDOwnersWithBodyWithResponse_Call) Return(_a0 *domain.PostScrapersIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostScrapersIDOwnersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersIDOwnersWithResponse provides a mock function with given fields: ctx, scraperTargetID, params, body
func (_m *ClientWithResponsesInterface) PostScrapersIDOwnersWithResponse(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDOwnersParams, body domain.PostScrapersIDOwnersJSONRequestBody) (*domain.PostScrapersIDOwnersResponse, error) {
	ret := _m.Called(ctx, scraperTargetID, params, body)

	var r0 *domain.PostScrapersIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostScrapersIDOwnersParams, domain.PostScrapersIDOwnersJSONRequestBody) *domain.PostScrapersIDOwnersResponse); ok {
		r0 = rf(ctx, scraperTargetID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostScrapersIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostScrapersIDOwnersParams, domain.PostScrapersIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, scraperTargetID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostScrapersIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersIDOwnersWithResponse'
type ClientWithResponsesInterface_PostScrapersIDOwnersWithResponse_Call struct {
	*mock.Call
}

// PostScrapersIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - scraperTargetID string
//  - params *domain.PostScrapersIDOwnersParams
//  - body domain.PostScrapersIDOwnersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostScrapersIDOwnersWithResponse(ctx interface{}, scraperTargetID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostScrapersIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_PostScrapersIDOwnersWithResponse_Call{Call: _e.mock.On("PostScrapersIDOwnersWithResponse", ctx, scraperTargetID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostScrapersIDOwnersWithResponse_Call) Run(run func(ctx context.Context, scraperTargetID string, params *domain.PostScrapersIDOwnersParams, body domain.PostScrapersIDOwnersJSONRequestBody)) *ClientWithResponsesInterface_PostScrapersIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostScrapersIDOwnersParams), args[3].(domain.PostScrapersIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostScrapersIDOwnersWithResponse_Call) Return(_a0 *domain.PostScrapersIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostScrapersIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostScrapersWithBodyWithResponse(ctx context.Context, params *domain.PostScrapersParams, contentType string, body io.Reader) (*domain.PostScrapersResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostScrapersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostScrapersParams, string, io.Reader) *domain.PostScrapersResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostScrapersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostScrapersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostScrapersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersWithBodyWithResponse'
type ClientWithResponsesInterface_PostScrapersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostScrapersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostScrapersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostScrapersWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostScrapersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostScrapersWithBodyWithResponse_Call{Call: _e.mock.On("PostScrapersWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostScrapersWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostScrapersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostScrapersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostScrapersParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostScrapersWithBodyWithResponse_Call) Return(_a0 *domain.PostScrapersResponse, _a1 error) *ClientWithResponsesInterface_PostScrapersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostScrapersWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostScrapersWithResponse(ctx context.Context, params *domain.PostScrapersParams, body domain.PostScrapersJSONRequestBody) (*domain.PostScrapersResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostScrapersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostScrapersParams, domain.PostScrapersJSONRequestBody) *domain.PostScrapersResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostScrapersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostScrapersParams, domain.PostScrapersJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostScrapersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostScrapersWithResponse'
type ClientWithResponsesInterface_PostScrapersWithResponse_Call struct {
	*mock.Call
}

// PostScrapersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostScrapersParams
//  - body domain.PostScrapersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostScrapersWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostScrapersWithResponse_Call {
	return &ClientWithResponsesInterface_PostScrapersWithResponse_Call{Call: _e.mock.On("PostScrapersWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostScrapersWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostScrapersParams, body domain.PostScrapersJSONRequestBody)) *ClientWithResponsesInterface_PostScrapersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostScrapersParams), args[2].(domain.PostScrapersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostScrapersWithResponse_Call) Return(_a0 *domain.PostScrapersResponse, _a1 error) *ClientWithResponsesInterface_PostScrapersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSetupWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostSetupWithBodyWithResponse(ctx context.Context, params *domain.PostSetupParams, contentType string, body io.Reader) (*domain.PostSetupResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostSetupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSetupParams, string, io.Reader) *domain.PostSetupResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostSetupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSetupParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostSetupWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSetupWithBodyWithResponse'
type ClientWithResponsesInterface_PostSetupWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostSetupWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSetupParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostSetupWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostSetupWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostSetupWithBodyWithResponse_Call{Call: _e.mock.On("PostSetupWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostSetupWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostSetupParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostSetupWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSetupParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostSetupWithBodyWithResponse_Call) Return(_a0 *domain.PostSetupResponse, _a1 error) *ClientWithResponsesInterface_PostSetupWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSetupWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostSetupWithResponse(ctx context.Context, params *domain.PostSetupParams, body domain.PostSetupJSONRequestBody) (*domain.PostSetupResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostSetupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSetupParams, domain.PostSetupJSONRequestBody) *domain.PostSetupResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostSetupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSetupParams, domain.PostSetupJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostSetupWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSetupWithResponse'
type ClientWithResponsesInterface_PostSetupWithResponse_Call struct {
	*mock.Call
}

// PostSetupWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSetupParams
//  - body domain.PostSetupJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostSetupWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostSetupWithResponse_Call {
	return &ClientWithResponsesInterface_PostSetupWithResponse_Call{Call: _e.mock.On("PostSetupWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostSetupWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostSetupParams, body domain.PostSetupJSONRequestBody)) *ClientWithResponsesInterface_PostSetupWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSetupParams), args[2].(domain.PostSetupJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostSetupWithResponse_Call) Return(_a0 *domain.PostSetupResponse, _a1 error) *ClientWithResponsesInterface_PostSetupWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSigninWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) PostSigninWithResponse(ctx context.Context, params *domain.PostSigninParams) (*domain.PostSigninResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.PostSigninResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSigninParams) *domain.PostSigninResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostSigninResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSigninParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostSigninWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSigninWithResponse'
type ClientWithResponsesInterface_PostSigninWithResponse_Call struct {
	*mock.Call
}

// PostSigninWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSigninParams
func (_e *ClientWithResponsesInterface_Expecter) PostSigninWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_PostSigninWithResponse_Call {
	return &ClientWithResponsesInterface_PostSigninWithResponse_Call{Call: _e.mock.On("PostSigninWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_PostSigninWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostSigninParams)) *ClientWithResponsesInterface_PostSigninWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSigninParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostSigninWithResponse_Call) Return(_a0 *domain.PostSigninResponse, _a1 error) *ClientWithResponsesInterface_PostSigninWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSignoutWithResponse provides a mock function with given fields: ctx, params
func (_m *ClientWithResponsesInterface) PostSignoutWithResponse(ctx context.Context, params *domain.PostSignoutParams) (*domain.PostSignoutResponse, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.PostSignoutResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSignoutParams) *domain.PostSignoutResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostSignoutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSignoutParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostSignoutWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSignoutWithResponse'
type ClientWithResponsesInterface_PostSignoutWithResponse_Call struct {
	*mock.Call
}

// PostSignoutWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSignoutParams
func (_e *ClientWithResponsesInterface_Expecter) PostSignoutWithResponse(ctx interface{}, params interface{}) *ClientWithResponsesInterface_PostSignoutWithResponse_Call {
	return &ClientWithResponsesInterface_PostSignoutWithResponse_Call{Call: _e.mock.On("PostSignoutWithResponse", ctx, params)}
}

func (_c *ClientWithResponsesInterface_PostSignoutWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostSignoutParams)) *ClientWithResponsesInterface_PostSignoutWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSignoutParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostSignoutWithResponse_Call) Return(_a0 *domain.PostSignoutResponse, _a1 error) *ClientWithResponsesInterface_PostSignoutWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSourcesWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostSourcesWithBodyWithResponse(ctx context.Context, params *domain.PostSourcesParams, contentType string, body io.Reader) (*domain.PostSourcesResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostSourcesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSourcesParams, string, io.Reader) *domain.PostSourcesResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostSourcesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSourcesParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostSourcesWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSourcesWithBodyWithResponse'
type ClientWithResponsesInterface_PostSourcesWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostSourcesWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSourcesParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostSourcesWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostSourcesWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostSourcesWithBodyWithResponse_Call{Call: _e.mock.On("PostSourcesWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostSourcesWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostSourcesParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostSourcesWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSourcesParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostSourcesWithBodyWithResponse_Call) Return(_a0 *domain.PostSourcesResponse, _a1 error) *ClientWithResponsesInterface_PostSourcesWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostSourcesWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostSourcesWithResponse(ctx context.Context, params *domain.PostSourcesParams, body domain.PostSourcesJSONRequestBody) (*domain.PostSourcesResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostSourcesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostSourcesParams, domain.PostSourcesJSONRequestBody) *domain.PostSourcesResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostSourcesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostSourcesParams, domain.PostSourcesJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostSourcesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSourcesWithResponse'
type ClientWithResponsesInterface_PostSourcesWithResponse_Call struct {
	*mock.Call
}

// PostSourcesWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostSourcesParams
//  - body domain.PostSourcesJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostSourcesWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostSourcesWithResponse_Call {
	return &ClientWithResponsesInterface_PostSourcesWithResponse_Call{Call: _e.mock.On("PostSourcesWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostSourcesWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostSourcesParams, body domain.PostSourcesJSONRequestBody)) *ClientWithResponsesInterface_PostSourcesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostSourcesParams), args[2].(domain.PostSourcesJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostSourcesWithResponse_Call) Return(_a0 *domain.PostSourcesResponse, _a1 error) *ClientWithResponsesInterface_PostSourcesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDLabelsWithBodyWithResponse provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTasksIDLabelsWithBodyWithResponse(ctx context.Context, taskID string, params *domain.PostTasksIDLabelsParams, contentType string, body io.Reader) (*domain.PostTasksIDLabelsResponse, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *domain.PostTasksIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDLabelsParams, string, io.Reader) *domain.PostTasksIDLabelsResponse); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksIDLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostTasksIDLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTasksIDLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTasksIDLabelsWithBodyWithResponse(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksIDLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksIDLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostTasksIDLabelsWithBodyWithResponse", ctx, taskID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksIDLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDLabelsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTasksIDLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksIDLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostTasksIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostTasksIDLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDLabelsWithResponse provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientWithResponsesInterface) PostTasksIDLabelsWithResponse(ctx context.Context, taskID string, params *domain.PostTasksIDLabelsParams, body domain.PostTasksIDLabelsJSONRequestBody) (*domain.PostTasksIDLabelsResponse, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *domain.PostTasksIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDLabelsParams, domain.PostTasksIDLabelsJSONRequestBody) *domain.PostTasksIDLabelsResponse); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDLabelsParams, domain.PostTasksIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDLabelsWithResponse'
type ClientWithResponsesInterface_PostTasksIDLabelsWithResponse_Call struct {
	*mock.Call
}

// PostTasksIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDLabelsParams
//  - body domain.PostTasksIDLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostTasksIDLabelsWithResponse(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksIDLabelsWithResponse_Call{Call: _e.mock.On("PostTasksIDLabelsWithResponse", ctx, taskID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksIDLabelsWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDLabelsParams, body domain.PostTasksIDLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostTasksIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDLabelsParams), args[3].(domain.PostTasksIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksIDLabelsWithResponse_Call) Return(_a0 *domain.PostTasksIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostTasksIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDMembersWithBodyWithResponse provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTasksIDMembersWithBodyWithResponse(ctx context.Context, taskID string, params *domain.PostTasksIDMembersParams, contentType string, body io.Reader) (*domain.PostTasksIDMembersResponse, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *domain.PostTasksIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDMembersParams, string, io.Reader) *domain.PostTasksIDMembersResponse); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksIDMembersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDMembersWithBodyWithResponse'
type ClientWithResponsesInterface_PostTasksIDMembersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTasksIDMembersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTasksIDMembersWithBodyWithResponse(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksIDMembersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksIDMembersWithBodyWithResponse_Call{Call: _e.mock.On("PostTasksIDMembersWithBodyWithResponse", ctx, taskID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksIDMembersWithBodyWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDMembersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTasksIDMembersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksIDMembersWithBodyWithResponse_Call) Return(_a0 *domain.PostTasksIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostTasksIDMembersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDMembersWithResponse provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientWithResponsesInterface) PostTasksIDMembersWithResponse(ctx context.Context, taskID string, params *domain.PostTasksIDMembersParams, body domain.PostTasksIDMembersJSONRequestBody) (*domain.PostTasksIDMembersResponse, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *domain.PostTasksIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDMembersParams, domain.PostTasksIDMembersJSONRequestBody) *domain.PostTasksIDMembersResponse); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDMembersParams, domain.PostTasksIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDMembersWithResponse'
type ClientWithResponsesInterface_PostTasksIDMembersWithResponse_Call struct {
	*mock.Call
}

// PostTasksIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDMembersParams
//  - body domain.PostTasksIDMembersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostTasksIDMembersWithResponse(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksIDMembersWithResponse_Call{Call: _e.mock.On("PostTasksIDMembersWithResponse", ctx, taskID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksIDMembersWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDMembersParams, body domain.PostTasksIDMembersJSONRequestBody)) *ClientWithResponsesInterface_PostTasksIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDMembersParams), args[3].(domain.PostTasksIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksIDMembersWithResponse_Call) Return(_a0 *domain.PostTasksIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostTasksIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDOwnersWithBodyWithResponse provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTasksIDOwnersWithBodyWithResponse(ctx context.Context, taskID string, params *domain.PostTasksIDOwnersParams, contentType string, body io.Reader) (*domain.PostTasksIDOwnersResponse, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *domain.PostTasksIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDOwnersParams, string, io.Reader) *domain.PostTasksIDOwnersResponse); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksIDOwnersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDOwnersWithBodyWithResponse'
type ClientWithResponsesInterface_PostTasksIDOwnersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTasksIDOwnersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTasksIDOwnersWithBodyWithResponse(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksIDOwnersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksIDOwnersWithBodyWithResponse_Call{Call: _e.mock.On("PostTasksIDOwnersWithBodyWithResponse", ctx, taskID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksIDOwnersWithBodyWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDOwnersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTasksIDOwnersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksIDOwnersWithBodyWithResponse_Call) Return(_a0 *domain.PostTasksIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostTasksIDOwnersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDOwnersWithResponse provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientWithResponsesInterface) PostTasksIDOwnersWithResponse(ctx context.Context, taskID string, params *domain.PostTasksIDOwnersParams, body domain.PostTasksIDOwnersJSONRequestBody) (*domain.PostTasksIDOwnersResponse, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *domain.PostTasksIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDOwnersParams, domain.PostTasksIDOwnersJSONRequestBody) *domain.PostTasksIDOwnersResponse); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDOwnersParams, domain.PostTasksIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDOwnersWithResponse'
type ClientWithResponsesInterface_PostTasksIDOwnersWithResponse_Call struct {
	*mock.Call
}

// PostTasksIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDOwnersParams
//  - body domain.PostTasksIDOwnersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostTasksIDOwnersWithResponse(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksIDOwnersWithResponse_Call{Call: _e.mock.On("PostTasksIDOwnersWithResponse", ctx, taskID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksIDOwnersWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDOwnersParams, body domain.PostTasksIDOwnersJSONRequestBody)) *ClientWithResponsesInterface_PostTasksIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDOwnersParams), args[3].(domain.PostTasksIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksIDOwnersWithResponse_Call) Return(_a0 *domain.PostTasksIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostTasksIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDRunsIDRetryWithBodyWithResponse provides a mock function with given fields: ctx, taskID, runID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTasksIDRunsIDRetryWithBodyWithResponse(ctx context.Context, taskID string, runID string, params *domain.PostTasksIDRunsIDRetryParams, contentType string, body io.Reader) (*domain.PostTasksIDRunsIDRetryResponse, error) {
	ret := _m.Called(ctx, taskID, runID, params, contentType, body)

	var r0 *domain.PostTasksIDRunsIDRetryResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.PostTasksIDRunsIDRetryParams, string, io.Reader) *domain.PostTasksIDRunsIDRetryResponse); ok {
		r0 = rf(ctx, taskID, runID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksIDRunsIDRetryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *domain.PostTasksIDRunsIDRetryParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, runID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksIDRunsIDRetryWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDRunsIDRetryWithBodyWithResponse'
type ClientWithResponsesInterface_PostTasksIDRunsIDRetryWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTasksIDRunsIDRetryWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
//  - params *domain.PostTasksIDRunsIDRetryParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTasksIDRunsIDRetryWithBodyWithResponse(ctx interface{}, taskID interface{}, runID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksIDRunsIDRetryWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksIDRunsIDRetryWithBodyWithResponse_Call{Call: _e.mock.On("PostTasksIDRunsIDRetryWithBodyWithResponse", ctx, taskID, runID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksIDRunsIDRetryWithBodyWithResponse_Call) Run(run func(ctx context.Context, taskID string, runID string, params *domain.PostTasksIDRunsIDRetryParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTasksIDRunsIDRetryWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*domain.PostTasksIDRunsIDRetryParams), args[4].(string), args[5].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksIDRunsIDRetryWithBodyWithResponse_Call) Return(_a0 *domain.PostTasksIDRunsIDRetryResponse, _a1 error) *ClientWithResponsesInterface_PostTasksIDRunsIDRetryWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDRunsWithBodyWithResponse provides a mock function with given fields: ctx, taskID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTasksIDRunsWithBodyWithResponse(ctx context.Context, taskID string, params *domain.PostTasksIDRunsParams, contentType string, body io.Reader) (*domain.PostTasksIDRunsResponse, error) {
	ret := _m.Called(ctx, taskID, params, contentType, body)

	var r0 *domain.PostTasksIDRunsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDRunsParams, string, io.Reader) *domain.PostTasksIDRunsResponse); ok {
		r0 = rf(ctx, taskID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksIDRunsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDRunsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, taskID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksIDRunsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDRunsWithBodyWithResponse'
type ClientWithResponsesInterface_PostTasksIDRunsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTasksIDRunsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDRunsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTasksIDRunsWithBodyWithResponse(ctx interface{}, taskID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksIDRunsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksIDRunsWithBodyWithResponse_Call{Call: _e.mock.On("PostTasksIDRunsWithBodyWithResponse", ctx, taskID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksIDRunsWithBodyWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDRunsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTasksIDRunsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDRunsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksIDRunsWithBodyWithResponse_Call) Return(_a0 *domain.PostTasksIDRunsResponse, _a1 error) *ClientWithResponsesInterface_PostTasksIDRunsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksIDRunsWithResponse provides a mock function with given fields: ctx, taskID, params, body
func (_m *ClientWithResponsesInterface) PostTasksIDRunsWithResponse(ctx context.Context, taskID string, params *domain.PostTasksIDRunsParams, body domain.PostTasksIDRunsJSONRequestBody) (*domain.PostTasksIDRunsResponse, error) {
	ret := _m.Called(ctx, taskID, params, body)

	var r0 *domain.PostTasksIDRunsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTasksIDRunsParams, domain.PostTasksIDRunsJSONRequestBody) *domain.PostTasksIDRunsResponse); ok {
		r0 = rf(ctx, taskID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksIDRunsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTasksIDRunsParams, domain.PostTasksIDRunsJSONRequestBody) error); ok {
		r1 = rf(ctx, taskID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksIDRunsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksIDRunsWithResponse'
type ClientWithResponsesInterface_PostTasksIDRunsWithResponse_Call struct {
	*mock.Call
}

// PostTasksIDRunsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - params *domain.PostTasksIDRunsParams
//  - body domain.PostTasksIDRunsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostTasksIDRunsWithResponse(ctx interface{}, taskID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksIDRunsWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksIDRunsWithResponse_Call{Call: _e.mock.On("PostTasksIDRunsWithResponse", ctx, taskID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksIDRunsWithResponse_Call) Run(run func(ctx context.Context, taskID string, params *domain.PostTasksIDRunsParams, body domain.PostTasksIDRunsJSONRequestBody)) *ClientWithResponsesInterface_PostTasksIDRunsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTasksIDRunsParams), args[3].(domain.PostTasksIDRunsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksIDRunsWithResponse_Call) Return(_a0 *domain.PostTasksIDRunsResponse, _a1 error) *ClientWithResponsesInterface_PostTasksIDRunsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTasksWithBodyWithResponse(ctx context.Context, params *domain.PostTasksParams, contentType string, body io.Reader) (*domain.PostTasksResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostTasksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostTasksParams, string, io.Reader) *domain.PostTasksResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostTasksParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksWithBodyWithResponse'
type ClientWithResponsesInterface_PostTasksWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTasksWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostTasksParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTasksWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksWithBodyWithResponse_Call{Call: _e.mock.On("PostTasksWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostTasksParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTasksWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostTasksParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksWithBodyWithResponse_Call) Return(_a0 *domain.PostTasksResponse, _a1 error) *ClientWithResponsesInterface_PostTasksWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTasksWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostTasksWithResponse(ctx context.Context, params *domain.PostTasksParams, body domain.PostTasksJSONRequestBody) (*domain.PostTasksResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostTasksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostTasksParams, domain.PostTasksJSONRequestBody) *domain.PostTasksResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTasksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostTasksParams, domain.PostTasksJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTasksWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTasksWithResponse'
type ClientWithResponsesInterface_PostTasksWithResponse_Call struct {
	*mock.Call
}

// PostTasksWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostTasksParams
//  - body domain.PostTasksJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostTasksWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostTasksWithResponse_Call {
	return &ClientWithResponsesInterface_PostTasksWithResponse_Call{Call: _e.mock.On("PostTasksWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostTasksWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostTasksParams, body domain.PostTasksJSONRequestBody)) *ClientWithResponsesInterface_PostTasksWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostTasksParams), args[2].(domain.PostTasksJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTasksWithResponse_Call) Return(_a0 *domain.PostTasksResponse, _a1 error) *ClientWithResponsesInterface_PostTasksWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDLabelsWithBodyWithResponse provides a mock function with given fields: ctx, telegrafID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTelegrafsIDLabelsWithBodyWithResponse(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDLabelsParams, contentType string, body io.Reader) (*domain.PostTelegrafsIDLabelsResponse, error) {
	ret := _m.Called(ctx, telegrafID, params, contentType, body)

	var r0 *domain.PostTelegrafsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDLabelsParams, string, io.Reader) *domain.PostTelegrafsIDLabelsResponse); ok {
		r0 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTelegrafsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTelegrafsIDLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostTelegrafsIDLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTelegrafsIDLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTelegrafsIDLabelsWithBodyWithResponse(ctx interface{}, telegrafID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTelegrafsIDLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostTelegrafsIDLabelsWithBodyWithResponse", ctx, telegrafID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDLabelsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostTelegrafsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDLabelsWithResponse provides a mock function with given fields: ctx, telegrafID, params, body
func (_m *ClientWithResponsesInterface) PostTelegrafsIDLabelsWithResponse(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDLabelsParams, body domain.PostTelegrafsIDLabelsJSONRequestBody) (*domain.PostTelegrafsIDLabelsResponse, error) {
	ret := _m.Called(ctx, telegrafID, params, body)

	var r0 *domain.PostTelegrafsIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDLabelsParams, domain.PostTelegrafsIDLabelsJSONRequestBody) *domain.PostTelegrafsIDLabelsResponse); ok {
		r0 = rf(ctx, telegrafID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTelegrafsIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDLabelsParams, domain.PostTelegrafsIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, telegrafID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTelegrafsIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDLabelsWithResponse'
type ClientWithResponsesInterface_PostTelegrafsIDLabelsWithResponse_Call struct {
	*mock.Call
}

// PostTelegrafsIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDLabelsParams
//  - body domain.PostTelegrafsIDLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostTelegrafsIDLabelsWithResponse(ctx interface{}, telegrafID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostTelegrafsIDLabelsWithResponse_Call{Call: _e.mock.On("PostTelegrafsIDLabelsWithResponse", ctx, telegrafID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDLabelsParams, body domain.PostTelegrafsIDLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDLabelsParams), args[3].(domain.PostTelegrafsIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithResponse_Call) Return(_a0 *domain.PostTelegrafsIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostTelegrafsIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDMembersWithBodyWithResponse provides a mock function with given fields: ctx, telegrafID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTelegrafsIDMembersWithBodyWithResponse(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDMembersParams, contentType string, body io.Reader) (*domain.PostTelegrafsIDMembersResponse, error) {
	ret := _m.Called(ctx, telegrafID, params, contentType, body)

	var r0 *domain.PostTelegrafsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDMembersParams, string, io.Reader) *domain.PostTelegrafsIDMembersResponse); ok {
		r0 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTelegrafsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDMembersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTelegrafsIDMembersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDMembersWithBodyWithResponse'
type ClientWithResponsesInterface_PostTelegrafsIDMembersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTelegrafsIDMembersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDMembersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTelegrafsIDMembersWithBodyWithResponse(ctx interface{}, telegrafID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTelegrafsIDMembersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTelegrafsIDMembersWithBodyWithResponse_Call{Call: _e.mock.On("PostTelegrafsIDMembersWithBodyWithResponse", ctx, telegrafID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDMembersWithBodyWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDMembersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTelegrafsIDMembersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDMembersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDMembersWithBodyWithResponse_Call) Return(_a0 *domain.PostTelegrafsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostTelegrafsIDMembersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDMembersWithResponse provides a mock function with given fields: ctx, telegrafID, params, body
func (_m *ClientWithResponsesInterface) PostTelegrafsIDMembersWithResponse(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDMembersParams, body domain.PostTelegrafsIDMembersJSONRequestBody) (*domain.PostTelegrafsIDMembersResponse, error) {
	ret := _m.Called(ctx, telegrafID, params, body)

	var r0 *domain.PostTelegrafsIDMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDMembersParams, domain.PostTelegrafsIDMembersJSONRequestBody) *domain.PostTelegrafsIDMembersResponse); ok {
		r0 = rf(ctx, telegrafID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTelegrafsIDMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDMembersParams, domain.PostTelegrafsIDMembersJSONRequestBody) error); ok {
		r1 = rf(ctx, telegrafID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTelegrafsIDMembersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDMembersWithResponse'
type ClientWithResponsesInterface_PostTelegrafsIDMembersWithResponse_Call struct {
	*mock.Call
}

// PostTelegrafsIDMembersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDMembersParams
//  - body domain.PostTelegrafsIDMembersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostTelegrafsIDMembersWithResponse(ctx interface{}, telegrafID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostTelegrafsIDMembersWithResponse_Call {
	return &ClientWithResponsesInterface_PostTelegrafsIDMembersWithResponse_Call{Call: _e.mock.On("PostTelegrafsIDMembersWithResponse", ctx, telegrafID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDMembersWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDMembersParams, body domain.PostTelegrafsIDMembersJSONRequestBody)) *ClientWithResponsesInterface_PostTelegrafsIDMembersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDMembersParams), args[3].(domain.PostTelegrafsIDMembersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDMembersWithResponse_Call) Return(_a0 *domain.PostTelegrafsIDMembersResponse, _a1 error) *ClientWithResponsesInterface_PostTelegrafsIDMembersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDOwnersWithBodyWithResponse provides a mock function with given fields: ctx, telegrafID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTelegrafsIDOwnersWithBodyWithResponse(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDOwnersParams, contentType string, body io.Reader) (*domain.PostTelegrafsIDOwnersResponse, error) {
	ret := _m.Called(ctx, telegrafID, params, contentType, body)

	var r0 *domain.PostTelegrafsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDOwnersParams, string, io.Reader) *domain.PostTelegrafsIDOwnersResponse); ok {
		r0 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTelegrafsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDOwnersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTelegrafsIDOwnersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDOwnersWithBodyWithResponse'
type ClientWithResponsesInterface_PostTelegrafsIDOwnersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTelegrafsIDOwnersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDOwnersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTelegrafsIDOwnersWithBodyWithResponse(ctx interface{}, telegrafID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTelegrafsIDOwnersWithBodyWithResponse_Call{Call: _e.mock.On("PostTelegrafsIDOwnersWithBodyWithResponse", ctx, telegrafID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithBodyWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDOwnersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDOwnersParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithBodyWithResponse_Call) Return(_a0 *domain.PostTelegrafsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsIDOwnersWithResponse provides a mock function with given fields: ctx, telegrafID, params, body
func (_m *ClientWithResponsesInterface) PostTelegrafsIDOwnersWithResponse(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDOwnersParams, body domain.PostTelegrafsIDOwnersJSONRequestBody) (*domain.PostTelegrafsIDOwnersResponse, error) {
	ret := _m.Called(ctx, telegrafID, params, body)

	var r0 *domain.PostTelegrafsIDOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostTelegrafsIDOwnersParams, domain.PostTelegrafsIDOwnersJSONRequestBody) *domain.PostTelegrafsIDOwnersResponse); ok {
		r0 = rf(ctx, telegrafID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTelegrafsIDOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostTelegrafsIDOwnersParams, domain.PostTelegrafsIDOwnersJSONRequestBody) error); ok {
		r1 = rf(ctx, telegrafID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTelegrafsIDOwnersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsIDOwnersWithResponse'
type ClientWithResponsesInterface_PostTelegrafsIDOwnersWithResponse_Call struct {
	*mock.Call
}

// PostTelegrafsIDOwnersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PostTelegrafsIDOwnersParams
//  - body domain.PostTelegrafsIDOwnersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostTelegrafsIDOwnersWithResponse(ctx interface{}, telegrafID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithResponse_Call {
	return &ClientWithResponsesInterface_PostTelegrafsIDOwnersWithResponse_Call{Call: _e.mock.On("PostTelegrafsIDOwnersWithResponse", ctx, telegrafID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PostTelegrafsIDOwnersParams, body domain.PostTelegrafsIDOwnersJSONRequestBody)) *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostTelegrafsIDOwnersParams), args[3].(domain.PostTelegrafsIDOwnersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithResponse_Call) Return(_a0 *domain.PostTelegrafsIDOwnersResponse, _a1 error) *ClientWithResponsesInterface_PostTelegrafsIDOwnersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostTelegrafsWithBodyWithResponse(ctx context.Context, params *domain.PostTelegrafsParams, contentType string, body io.Reader) (*domain.PostTelegrafsResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostTelegrafsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostTelegrafsParams, string, io.Reader) *domain.PostTelegrafsResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTelegrafsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostTelegrafsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTelegrafsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsWithBodyWithResponse'
type ClientWithResponsesInterface_PostTelegrafsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostTelegrafsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostTelegrafsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostTelegrafsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostTelegrafsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostTelegrafsWithBodyWithResponse_Call{Call: _e.mock.On("PostTelegrafsWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostTelegrafsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostTelegrafsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostTelegrafsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostTelegrafsParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTelegrafsWithBodyWithResponse_Call) Return(_a0 *domain.PostTelegrafsResponse, _a1 error) *ClientWithResponsesInterface_PostTelegrafsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostTelegrafsWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostTelegrafsWithResponse(ctx context.Context, params *domain.PostTelegrafsParams, body domain.PostTelegrafsJSONRequestBody) (*domain.PostTelegrafsResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostTelegrafsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostTelegrafsParams, domain.PostTelegrafsJSONRequestBody) *domain.PostTelegrafsResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostTelegrafsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostTelegrafsParams, domain.PostTelegrafsJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostTelegrafsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTelegrafsWithResponse'
type ClientWithResponsesInterface_PostTelegrafsWithResponse_Call struct {
	*mock.Call
}

// PostTelegrafsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostTelegrafsParams
//  - body domain.PostTelegrafsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostTelegrafsWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostTelegrafsWithResponse_Call {
	return &ClientWithResponsesInterface_PostTelegrafsWithResponse_Call{Call: _e.mock.On("PostTelegrafsWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostTelegrafsWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostTelegrafsParams, body domain.PostTelegrafsJSONRequestBody)) *ClientWithResponsesInterface_PostTelegrafsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostTelegrafsParams), args[2].(domain.PostTelegrafsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostTelegrafsWithResponse_Call) Return(_a0 *domain.PostTelegrafsResponse, _a1 error) *ClientWithResponsesInterface_PostTelegrafsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostUsersIDPasswordWithBodyWithResponse provides a mock function with given fields: ctx, userID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostUsersIDPasswordWithBodyWithResponse(ctx context.Context, userID string, params *domain.PostUsersIDPasswordParams, contentType string, body io.Reader) (*domain.PostUsersIDPasswordResponse, error) {
	ret := _m.Called(ctx, userID, params, contentType, body)

	var r0 *domain.PostUsersIDPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostUsersIDPasswordParams, string, io.Reader) *domain.PostUsersIDPasswordResponse); ok {
		r0 = rf(ctx, userID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostUsersIDPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostUsersIDPasswordParams, string, io.Reader) error); ok {
		r1 = rf(ctx, userID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostUsersIDPasswordWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUsersIDPasswordWithBodyWithResponse'
type ClientWithResponsesInterface_PostUsersIDPasswordWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostUsersIDPasswordWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.PostUsersIDPasswordParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostUsersIDPasswordWithBodyWithResponse(ctx interface{}, userID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostUsersIDPasswordWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostUsersIDPasswordWithBodyWithResponse_Call{Call: _e.mock.On("PostUsersIDPasswordWithBodyWithResponse", ctx, userID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostUsersIDPasswordWithBodyWithResponse_Call) Run(run func(ctx context.Context, userID string, params *domain.PostUsersIDPasswordParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostUsersIDPasswordWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostUsersIDPasswordParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostUsersIDPasswordWithBodyWithResponse_Call) Return(_a0 *domain.PostUsersIDPasswordResponse, _a1 error) *ClientWithResponsesInterface_PostUsersIDPasswordWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostUsersIDPasswordWithResponse provides a mock function with given fields: ctx, userID, params, body
func (_m *ClientWithResponsesInterface) PostUsersIDPasswordWithResponse(ctx context.Context, userID string, params *domain.PostUsersIDPasswordParams, body domain.PostUsersIDPasswordJSONRequestBody) (*domain.PostUsersIDPasswordResponse, error) {
	ret := _m.Called(ctx, userID, params, body)

	var r0 *domain.PostUsersIDPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostUsersIDPasswordParams, domain.PostUsersIDPasswordJSONRequestBody) *domain.PostUsersIDPasswordResponse); ok {
		r0 = rf(ctx, userID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostUsersIDPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostUsersIDPasswordParams, domain.PostUsersIDPasswordJSONRequestBody) error); ok {
		r1 = rf(ctx, userID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostUsersIDPasswordWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUsersIDPasswordWithResponse'
type ClientWithResponsesInterface_PostUsersIDPasswordWithResponse_Call struct {
	*mock.Call
}

// PostUsersIDPasswordWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - params *domain.PostUsersIDPasswordParams
//  - body domain.PostUsersIDPasswordJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostUsersIDPasswordWithResponse(ctx interface{}, userID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostUsersIDPasswordWithResponse_Call {
	return &ClientWithResponsesInterface_PostUsersIDPasswordWithResponse_Call{Call: _e.mock.On("PostUsersIDPasswordWithResponse", ctx, userID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostUsersIDPasswordWithResponse_Call) Run(run func(ctx context.Context, userID string, params *domain.PostUsersIDPasswordParams, body domain.PostUsersIDPasswordJSONRequestBody)) *ClientWithResponsesInterface_PostUsersIDPasswordWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostUsersIDPasswordParams), args[3].(domain.PostUsersIDPasswordJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostUsersIDPasswordWithResponse_Call) Return(_a0 *domain.PostUsersIDPasswordResponse, _a1 error) *ClientWithResponsesInterface_PostUsersIDPasswordWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostUsersWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostUsersWithBodyWithResponse(ctx context.Context, params *domain.PostUsersParams, contentType string, body io.Reader) (*domain.PostUsersResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostUsersParams, string, io.Reader) *domain.PostUsersResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostUsersParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostUsersWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUsersWithBodyWithResponse'
type ClientWithResponsesInterface_PostUsersWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostUsersWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostUsersParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostUsersWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostUsersWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostUsersWithBodyWithResponse_Call{Call: _e.mock.On("PostUsersWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostUsersWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostUsersParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostUsersWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostUsersParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostUsersWithBodyWithResponse_Call) Return(_a0 *domain.PostUsersResponse, _a1 error) *ClientWithResponsesInterface_PostUsersWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostUsersWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostUsersWithResponse(ctx context.Context, params *domain.PostUsersParams, body domain.PostUsersJSONRequestBody) (*domain.PostUsersResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostUsersParams, domain.PostUsersJSONRequestBody) *domain.PostUsersResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostUsersParams, domain.PostUsersJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostUsersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUsersWithResponse'
type ClientWithResponsesInterface_PostUsersWithResponse_Call struct {
	*mock.Call
}

// PostUsersWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostUsersParams
//  - body domain.PostUsersJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostUsersWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostUsersWithResponse_Call {
	return &ClientWithResponsesInterface_PostUsersWithResponse_Call{Call: _e.mock.On("PostUsersWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostUsersWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostUsersParams, body domain.PostUsersJSONRequestBody)) *ClientWithResponsesInterface_PostUsersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostUsersParams), args[2].(domain.PostUsersJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostUsersWithResponse_Call) Return(_a0 *domain.PostUsersResponse, _a1 error) *ClientWithResponsesInterface_PostUsersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostValidateReplicationByIDWithResponse provides a mock function with given fields: ctx, replicationID, params
func (_m *ClientWithResponsesInterface) PostValidateReplicationByIDWithResponse(ctx context.Context, replicationID string, params *domain.PostValidateReplicationByIDParams) (*domain.PostValidateReplicationByIDResponse, error) {
	ret := _m.Called(ctx, replicationID, params)

	var r0 *domain.PostValidateReplicationByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostValidateReplicationByIDParams) *domain.PostValidateReplicationByIDResponse); ok {
		r0 = rf(ctx, replicationID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostValidateReplicationByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostValidateReplicationByIDParams) error); ok {
		r1 = rf(ctx, replicationID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostValidateReplicationByIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostValidateReplicationByIDWithResponse'
type ClientWithResponsesInterface_PostValidateReplicationByIDWithResponse_Call struct {
	*mock.Call
}

// PostValidateReplicationByIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - replicationID string
//  - params *domain.PostValidateReplicationByIDParams
func (_e *ClientWithResponsesInterface_Expecter) PostValidateReplicationByIDWithResponse(ctx interface{}, replicationID interface{}, params interface{}) *ClientWithResponsesInterface_PostValidateReplicationByIDWithResponse_Call {
	return &ClientWithResponsesInterface_PostValidateReplicationByIDWithResponse_Call{Call: _e.mock.On("PostValidateReplicationByIDWithResponse", ctx, replicationID, params)}
}

func (_c *ClientWithResponsesInterface_PostValidateReplicationByIDWithResponse_Call) Run(run func(ctx context.Context, replicationID string, params *domain.PostValidateReplicationByIDParams)) *ClientWithResponsesInterface_PostValidateReplicationByIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostValidateReplicationByIDParams))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostValidateReplicationByIDWithResponse_Call) Return(_a0 *domain.PostValidateReplicationByIDResponse, _a1 error) *ClientWithResponsesInterface_PostValidateReplicationByIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostVariablesIDLabelsWithBodyWithResponse provides a mock function with given fields: ctx, variableID, params, contentType, body
func (_m *ClientWithResponsesInterface) PostVariablesIDLabelsWithBodyWithResponse(ctx context.Context, variableID string, params *domain.PostVariablesIDLabelsParams, contentType string, body io.Reader) (*domain.PostVariablesIDLabelsResponse, error) {
	ret := _m.Called(ctx, variableID, params, contentType, body)

	var r0 *domain.PostVariablesIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostVariablesIDLabelsParams, string, io.Reader) *domain.PostVariablesIDLabelsResponse); ok {
		r0 = rf(ctx, variableID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostVariablesIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostVariablesIDLabelsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, variableID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostVariablesIDLabelsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostVariablesIDLabelsWithBodyWithResponse'
type ClientWithResponsesInterface_PostVariablesIDLabelsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostVariablesIDLabelsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PostVariablesIDLabelsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostVariablesIDLabelsWithBodyWithResponse(ctx interface{}, variableID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostVariablesIDLabelsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostVariablesIDLabelsWithBodyWithResponse_Call{Call: _e.mock.On("PostVariablesIDLabelsWithBodyWithResponse", ctx, variableID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostVariablesIDLabelsWithBodyWithResponse_Call) Run(run func(ctx context.Context, variableID string, params *domain.PostVariablesIDLabelsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostVariablesIDLabelsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostVariablesIDLabelsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostVariablesIDLabelsWithBodyWithResponse_Call) Return(_a0 *domain.PostVariablesIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostVariablesIDLabelsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostVariablesIDLabelsWithResponse provides a mock function with given fields: ctx, variableID, params, body
func (_m *ClientWithResponsesInterface) PostVariablesIDLabelsWithResponse(ctx context.Context, variableID string, params *domain.PostVariablesIDLabelsParams, body domain.PostVariablesIDLabelsJSONRequestBody) (*domain.PostVariablesIDLabelsResponse, error) {
	ret := _m.Called(ctx, variableID, params, body)

	var r0 *domain.PostVariablesIDLabelsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PostVariablesIDLabelsParams, domain.PostVariablesIDLabelsJSONRequestBody) *domain.PostVariablesIDLabelsResponse); ok {
		r0 = rf(ctx, variableID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostVariablesIDLabelsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PostVariablesIDLabelsParams, domain.PostVariablesIDLabelsJSONRequestBody) error); ok {
		r1 = rf(ctx, variableID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostVariablesIDLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostVariablesIDLabelsWithResponse'
type ClientWithResponsesInterface_PostVariablesIDLabelsWithResponse_Call struct {
	*mock.Call
}

// PostVariablesIDLabelsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PostVariablesIDLabelsParams
//  - body domain.PostVariablesIDLabelsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostVariablesIDLabelsWithResponse(ctx interface{}, variableID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostVariablesIDLabelsWithResponse_Call {
	return &ClientWithResponsesInterface_PostVariablesIDLabelsWithResponse_Call{Call: _e.mock.On("PostVariablesIDLabelsWithResponse", ctx, variableID, params, body)}
}

func (_c *ClientWithResponsesInterface_PostVariablesIDLabelsWithResponse_Call) Run(run func(ctx context.Context, variableID string, params *domain.PostVariablesIDLabelsParams, body domain.PostVariablesIDLabelsJSONRequestBody)) *ClientWithResponsesInterface_PostVariablesIDLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PostVariablesIDLabelsParams), args[3].(domain.PostVariablesIDLabelsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostVariablesIDLabelsWithResponse_Call) Return(_a0 *domain.PostVariablesIDLabelsResponse, _a1 error) *ClientWithResponsesInterface_PostVariablesIDLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostVariablesWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostVariablesWithBodyWithResponse(ctx context.Context, params *domain.PostVariablesParams, contentType string, body io.Reader) (*domain.PostVariablesResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostVariablesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostVariablesParams, string, io.Reader) *domain.PostVariablesResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostVariablesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostVariablesParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostVariablesWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostVariablesWithBodyWithResponse'
type ClientWithResponsesInterface_PostVariablesWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostVariablesWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostVariablesParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostVariablesWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostVariablesWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostVariablesWithBodyWithResponse_Call{Call: _e.mock.On("PostVariablesWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostVariablesWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostVariablesParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostVariablesWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostVariablesParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostVariablesWithBodyWithResponse_Call) Return(_a0 *domain.PostVariablesResponse, _a1 error) *ClientWithResponsesInterface_PostVariablesWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostVariablesWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PostVariablesWithResponse(ctx context.Context, params *domain.PostVariablesParams, body domain.PostVariablesJSONRequestBody) (*domain.PostVariablesResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PostVariablesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostVariablesParams, domain.PostVariablesJSONRequestBody) *domain.PostVariablesResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostVariablesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostVariablesParams, domain.PostVariablesJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostVariablesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostVariablesWithResponse'
type ClientWithResponsesInterface_PostVariablesWithResponse_Call struct {
	*mock.Call
}

// PostVariablesWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostVariablesParams
//  - body domain.PostVariablesJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PostVariablesWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PostVariablesWithResponse_Call {
	return &ClientWithResponsesInterface_PostVariablesWithResponse_Call{Call: _e.mock.On("PostVariablesWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PostVariablesWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostVariablesParams, body domain.PostVariablesJSONRequestBody)) *ClientWithResponsesInterface_PostVariablesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostVariablesParams), args[2].(domain.PostVariablesJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostVariablesWithResponse_Call) Return(_a0 *domain.PostVariablesResponse, _a1 error) *ClientWithResponsesInterface_PostVariablesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PostWriteWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PostWriteWithBodyWithResponse(ctx context.Context, params *domain.PostWriteParams, contentType string, body io.Reader) (*domain.PostWriteResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PostWriteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PostWriteParams, string, io.Reader) *domain.PostWriteResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PostWriteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PostWriteParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PostWriteWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostWriteWithBodyWithResponse'
type ClientWithResponsesInterface_PostWriteWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostWriteWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PostWriteParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PostWriteWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PostWriteWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PostWriteWithBodyWithResponse_Call{Call: _e.mock.On("PostWriteWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PostWriteWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PostWriteParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PostWriteWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PostWriteParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PostWriteWithBodyWithResponse_Call) Return(_a0 *domain.PostWriteResponse, _a1 error) *ClientWithResponsesInterface_PostWriteWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutChecksIDWithBodyWithResponse provides a mock function with given fields: ctx, checkID, params, contentType, body
func (_m *ClientWithResponsesInterface) PutChecksIDWithBodyWithResponse(ctx context.Context, checkID string, params *domain.PutChecksIDParams, contentType string, body io.Reader) (*domain.PutChecksIDResponse, error) {
	ret := _m.Called(ctx, checkID, params, contentType, body)

	var r0 *domain.PutChecksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutChecksIDParams, string, io.Reader) *domain.PutChecksIDResponse); ok {
		r0 = rf(ctx, checkID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutChecksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutChecksIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, checkID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutChecksIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutChecksIDWithBodyWithResponse'
type ClientWithResponsesInterface_PutChecksIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PutChecksIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PutChecksIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PutChecksIDWithBodyWithResponse(ctx interface{}, checkID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PutChecksIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PutChecksIDWithBodyWithResponse_Call{Call: _e.mock.On("PutChecksIDWithBodyWithResponse", ctx, checkID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PutChecksIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.PutChecksIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PutChecksIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutChecksIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutChecksIDWithBodyWithResponse_Call) Return(_a0 *domain.PutChecksIDResponse, _a1 error) *ClientWithResponsesInterface_PutChecksIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutChecksIDWithResponse provides a mock function with given fields: ctx, checkID, params, body
func (_m *ClientWithResponsesInterface) PutChecksIDWithResponse(ctx context.Context, checkID string, params *domain.PutChecksIDParams, body domain.PutChecksIDJSONRequestBody) (*domain.PutChecksIDResponse, error) {
	ret := _m.Called(ctx, checkID, params, body)

	var r0 *domain.PutChecksIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutChecksIDParams, domain.PutChecksIDJSONRequestBody) *domain.PutChecksIDResponse); ok {
		r0 = rf(ctx, checkID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutChecksIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutChecksIDParams, domain.PutChecksIDJSONRequestBody) error); ok {
		r1 = rf(ctx, checkID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutChecksIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutChecksIDWithResponse'
type ClientWithResponsesInterface_PutChecksIDWithResponse_Call struct {
	*mock.Call
}

// PutChecksIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - checkID string
//  - params *domain.PutChecksIDParams
//  - body domain.PutChecksIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PutChecksIDWithResponse(ctx interface{}, checkID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PutChecksIDWithResponse_Call {
	return &ClientWithResponsesInterface_PutChecksIDWithResponse_Call{Call: _e.mock.On("PutChecksIDWithResponse", ctx, checkID, params, body)}
}

func (_c *ClientWithResponsesInterface_PutChecksIDWithResponse_Call) Run(run func(ctx context.Context, checkID string, params *domain.PutChecksIDParams, body domain.PutChecksIDJSONRequestBody)) *ClientWithResponsesInterface_PutChecksIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutChecksIDParams), args[3].(domain.PutChecksIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutChecksIDWithResponse_Call) Return(_a0 *domain.PutChecksIDResponse, _a1 error) *ClientWithResponsesInterface_PutChecksIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutDashboardsIDCellsWithBodyWithResponse provides a mock function with given fields: ctx, dashboardID, params, contentType, body
func (_m *ClientWithResponsesInterface) PutDashboardsIDCellsWithBodyWithResponse(ctx context.Context, dashboardID string, params *domain.PutDashboardsIDCellsParams, contentType string, body io.Reader) (*domain.PutDashboardsIDCellsResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, contentType, body)

	var r0 *domain.PutDashboardsIDCellsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutDashboardsIDCellsParams, string, io.Reader) *domain.PutDashboardsIDCellsResponse); ok {
		r0 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutDashboardsIDCellsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutDashboardsIDCellsParams, string, io.Reader) error); ok {
		r1 = rf(ctx, dashboardID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutDashboardsIDCellsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDashboardsIDCellsWithBodyWithResponse'
type ClientWithResponsesInterface_PutDashboardsIDCellsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PutDashboardsIDCellsWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PutDashboardsIDCellsParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PutDashboardsIDCellsWithBodyWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PutDashboardsIDCellsWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PutDashboardsIDCellsWithBodyWithResponse_Call{Call: _e.mock.On("PutDashboardsIDCellsWithBodyWithResponse", ctx, dashboardID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PutDashboardsIDCellsWithBodyWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PutDashboardsIDCellsParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PutDashboardsIDCellsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutDashboardsIDCellsParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutDashboardsIDCellsWithBodyWithResponse_Call) Return(_a0 *domain.PutDashboardsIDCellsResponse, _a1 error) *ClientWithResponsesInterface_PutDashboardsIDCellsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutDashboardsIDCellsWithResponse provides a mock function with given fields: ctx, dashboardID, params, body
func (_m *ClientWithResponsesInterface) PutDashboardsIDCellsWithResponse(ctx context.Context, dashboardID string, params *domain.PutDashboardsIDCellsParams, body domain.PutDashboardsIDCellsJSONRequestBody) (*domain.PutDashboardsIDCellsResponse, error) {
	ret := _m.Called(ctx, dashboardID, params, body)

	var r0 *domain.PutDashboardsIDCellsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutDashboardsIDCellsParams, domain.PutDashboardsIDCellsJSONRequestBody) *domain.PutDashboardsIDCellsResponse); ok {
		r0 = rf(ctx, dashboardID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutDashboardsIDCellsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutDashboardsIDCellsParams, domain.PutDashboardsIDCellsJSONRequestBody) error); ok {
		r1 = rf(ctx, dashboardID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutDashboardsIDCellsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDashboardsIDCellsWithResponse'
type ClientWithResponsesInterface_PutDashboardsIDCellsWithResponse_Call struct {
	*mock.Call
}

// PutDashboardsIDCellsWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - dashboardID string
//  - params *domain.PutDashboardsIDCellsParams
//  - body domain.PutDashboardsIDCellsJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PutDashboardsIDCellsWithResponse(ctx interface{}, dashboardID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PutDashboardsIDCellsWithResponse_Call {
	return &ClientWithResponsesInterface_PutDashboardsIDCellsWithResponse_Call{Call: _e.mock.On("PutDashboardsIDCellsWithResponse", ctx, dashboardID, params, body)}
}

func (_c *ClientWithResponsesInterface_PutDashboardsIDCellsWithResponse_Call) Run(run func(ctx context.Context, dashboardID string, params *domain.PutDashboardsIDCellsParams, body domain.PutDashboardsIDCellsJSONRequestBody)) *ClientWithResponsesInterface_PutDashboardsIDCellsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutDashboardsIDCellsParams), args[3].(domain.PutDashboardsIDCellsJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutDashboardsIDCellsWithResponse_Call) Return(_a0 *domain.PutDashboardsIDCellsResponse, _a1 error) *ClientWithResponsesInterface_PutDashboardsIDCellsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutMePasswordWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body
func (_m *ClientWithResponsesInterface) PutMePasswordWithBodyWithResponse(ctx context.Context, params *domain.PutMePasswordParams, contentType string, body io.Reader) (*domain.PutMePasswordResponse, error) {
	ret := _m.Called(ctx, params, contentType, body)

	var r0 *domain.PutMePasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PutMePasswordParams, string, io.Reader) *domain.PutMePasswordResponse); ok {
		r0 = rf(ctx, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutMePasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PutMePasswordParams, string, io.Reader) error); ok {
		r1 = rf(ctx, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutMePasswordWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMePasswordWithBodyWithResponse'
type ClientWithResponsesInterface_PutMePasswordWithBodyWithResponse_Call struct {
	*mock.Call
}

// PutMePasswordWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PutMePasswordParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PutMePasswordWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PutMePasswordWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PutMePasswordWithBodyWithResponse_Call{Call: _e.mock.On("PutMePasswordWithBodyWithResponse", ctx, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PutMePasswordWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *domain.PutMePasswordParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PutMePasswordWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PutMePasswordParams), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutMePasswordWithBodyWithResponse_Call) Return(_a0 *domain.PutMePasswordResponse, _a1 error) *ClientWithResponsesInterface_PutMePasswordWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutMePasswordWithResponse provides a mock function with given fields: ctx, params, body
func (_m *ClientWithResponsesInterface) PutMePasswordWithResponse(ctx context.Context, params *domain.PutMePasswordParams, body domain.PutMePasswordJSONRequestBody) (*domain.PutMePasswordResponse, error) {
	ret := _m.Called(ctx, params, body)

	var r0 *domain.PutMePasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PutMePasswordParams, domain.PutMePasswordJSONRequestBody) *domain.PutMePasswordResponse); ok {
		r0 = rf(ctx, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutMePasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PutMePasswordParams, domain.PutMePasswordJSONRequestBody) error); ok {
		r1 = rf(ctx, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutMePasswordWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMePasswordWithResponse'
type ClientWithResponsesInterface_PutMePasswordWithResponse_Call struct {
	*mock.Call
}

// PutMePasswordWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - params *domain.PutMePasswordParams
//  - body domain.PutMePasswordJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PutMePasswordWithResponse(ctx interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PutMePasswordWithResponse_Call {
	return &ClientWithResponsesInterface_PutMePasswordWithResponse_Call{Call: _e.mock.On("PutMePasswordWithResponse", ctx, params, body)}
}

func (_c *ClientWithResponsesInterface_PutMePasswordWithResponse_Call) Run(run func(ctx context.Context, params *domain.PutMePasswordParams, body domain.PutMePasswordJSONRequestBody)) *ClientWithResponsesInterface_PutMePasswordWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.PutMePasswordParams), args[2].(domain.PutMePasswordJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutMePasswordWithResponse_Call) Return(_a0 *domain.PutMePasswordResponse, _a1 error) *ClientWithResponsesInterface_PutMePasswordWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutNotificationEndpointsIDWithBodyWithResponse provides a mock function with given fields: ctx, endpointID, params, contentType, body
func (_m *ClientWithResponsesInterface) PutNotificationEndpointsIDWithBodyWithResponse(ctx context.Context, endpointID string, params *domain.PutNotificationEndpointsIDParams, contentType string, body io.Reader) (*domain.PutNotificationEndpointsIDResponse, error) {
	ret := _m.Called(ctx, endpointID, params, contentType, body)

	var r0 *domain.PutNotificationEndpointsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutNotificationEndpointsIDParams, string, io.Reader) *domain.PutNotificationEndpointsIDResponse); ok {
		r0 = rf(ctx, endpointID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutNotificationEndpointsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutNotificationEndpointsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, endpointID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutNotificationEndpointsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutNotificationEndpointsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PutNotificationEndpointsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PutNotificationEndpointsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PutNotificationEndpointsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PutNotificationEndpointsIDWithBodyWithResponse(ctx interface{}, endpointID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PutNotificationEndpointsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PutNotificationEndpointsIDWithBodyWithResponse_Call{Call: _e.mock.On("PutNotificationEndpointsIDWithBodyWithResponse", ctx, endpointID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PutNotificationEndpointsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PutNotificationEndpointsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PutNotificationEndpointsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutNotificationEndpointsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutNotificationEndpointsIDWithBodyWithResponse_Call) Return(_a0 *domain.PutNotificationEndpointsIDResponse, _a1 error) *ClientWithResponsesInterface_PutNotificationEndpointsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutNotificationEndpointsIDWithResponse provides a mock function with given fields: ctx, endpointID, params, body
func (_m *ClientWithResponsesInterface) PutNotificationEndpointsIDWithResponse(ctx context.Context, endpointID string, params *domain.PutNotificationEndpointsIDParams, body domain.PutNotificationEndpointsIDJSONRequestBody) (*domain.PutNotificationEndpointsIDResponse, error) {
	ret := _m.Called(ctx, endpointID, params, body)

	var r0 *domain.PutNotificationEndpointsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutNotificationEndpointsIDParams, domain.PutNotificationEndpointsIDJSONRequestBody) *domain.PutNotificationEndpointsIDResponse); ok {
		r0 = rf(ctx, endpointID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutNotificationEndpointsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutNotificationEndpointsIDParams, domain.PutNotificationEndpointsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, endpointID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutNotificationEndpointsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutNotificationEndpointsIDWithResponse'
type ClientWithResponsesInterface_PutNotificationEndpointsIDWithResponse_Call struct {
	*mock.Call
}

// PutNotificationEndpointsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - endpointID string
//  - params *domain.PutNotificationEndpointsIDParams
//  - body domain.PutNotificationEndpointsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PutNotificationEndpointsIDWithResponse(ctx interface{}, endpointID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PutNotificationEndpointsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PutNotificationEndpointsIDWithResponse_Call{Call: _e.mock.On("PutNotificationEndpointsIDWithResponse", ctx, endpointID, params, body)}
}

func (_c *ClientWithResponsesInterface_PutNotificationEndpointsIDWithResponse_Call) Run(run func(ctx context.Context, endpointID string, params *domain.PutNotificationEndpointsIDParams, body domain.PutNotificationEndpointsIDJSONRequestBody)) *ClientWithResponsesInterface_PutNotificationEndpointsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutNotificationEndpointsIDParams), args[3].(domain.PutNotificationEndpointsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutNotificationEndpointsIDWithResponse_Call) Return(_a0 *domain.PutNotificationEndpointsIDResponse, _a1 error) *ClientWithResponsesInterface_PutNotificationEndpointsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutNotificationRulesIDWithBodyWithResponse provides a mock function with given fields: ctx, ruleID, params, contentType, body
func (_m *ClientWithResponsesInterface) PutNotificationRulesIDWithBodyWithResponse(ctx context.Context, ruleID string, params *domain.PutNotificationRulesIDParams, contentType string, body io.Reader) (*domain.PutNotificationRulesIDResponse, error) {
	ret := _m.Called(ctx, ruleID, params, contentType, body)

	var r0 *domain.PutNotificationRulesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutNotificationRulesIDParams, string, io.Reader) *domain.PutNotificationRulesIDResponse); ok {
		r0 = rf(ctx, ruleID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutNotificationRulesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutNotificationRulesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, ruleID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutNotificationRulesIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutNotificationRulesIDWithBodyWithResponse'
type ClientWithResponsesInterface_PutNotificationRulesIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PutNotificationRulesIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PutNotificationRulesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PutNotificationRulesIDWithBodyWithResponse(ctx interface{}, ruleID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PutNotificationRulesIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PutNotificationRulesIDWithBodyWithResponse_Call{Call: _e.mock.On("PutNotificationRulesIDWithBodyWithResponse", ctx, ruleID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PutNotificationRulesIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PutNotificationRulesIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PutNotificationRulesIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutNotificationRulesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutNotificationRulesIDWithBodyWithResponse_Call) Return(_a0 *domain.PutNotificationRulesIDResponse, _a1 error) *ClientWithResponsesInterface_PutNotificationRulesIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutNotificationRulesIDWithResponse provides a mock function with given fields: ctx, ruleID, params, body
func (_m *ClientWithResponsesInterface) PutNotificationRulesIDWithResponse(ctx context.Context, ruleID string, params *domain.PutNotificationRulesIDParams, body domain.PutNotificationRulesIDJSONRequestBody) (*domain.PutNotificationRulesIDResponse, error) {
	ret := _m.Called(ctx, ruleID, params, body)

	var r0 *domain.PutNotificationRulesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutNotificationRulesIDParams, domain.PutNotificationRulesIDJSONRequestBody) *domain.PutNotificationRulesIDResponse); ok {
		r0 = rf(ctx, ruleID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutNotificationRulesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutNotificationRulesIDParams, domain.PutNotificationRulesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, ruleID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutNotificationRulesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutNotificationRulesIDWithResponse'
type ClientWithResponsesInterface_PutNotificationRulesIDWithResponse_Call struct {
	*mock.Call
}

// PutNotificationRulesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - ruleID string
//  - params *domain.PutNotificationRulesIDParams
//  - body domain.PutNotificationRulesIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PutNotificationRulesIDWithResponse(ctx interface{}, ruleID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PutNotificationRulesIDWithResponse_Call {
	return &ClientWithResponsesInterface_PutNotificationRulesIDWithResponse_Call{Call: _e.mock.On("PutNotificationRulesIDWithResponse", ctx, ruleID, params, body)}
}

func (_c *ClientWithResponsesInterface_PutNotificationRulesIDWithResponse_Call) Run(run func(ctx context.Context, ruleID string, params *domain.PutNotificationRulesIDParams, body domain.PutNotificationRulesIDJSONRequestBody)) *ClientWithResponsesInterface_PutNotificationRulesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutNotificationRulesIDParams), args[3].(domain.PutNotificationRulesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutNotificationRulesIDWithResponse_Call) Return(_a0 *domain.PutNotificationRulesIDResponse, _a1 error) *ClientWithResponsesInterface_PutNotificationRulesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutTelegrafsIDWithBodyWithResponse provides a mock function with given fields: ctx, telegrafID, params, contentType, body
func (_m *ClientWithResponsesInterface) PutTelegrafsIDWithBodyWithResponse(ctx context.Context, telegrafID string, params *domain.PutTelegrafsIDParams, contentType string, body io.Reader) (*domain.PutTelegrafsIDResponse, error) {
	ret := _m.Called(ctx, telegrafID, params, contentType, body)

	var r0 *domain.PutTelegrafsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutTelegrafsIDParams, string, io.Reader) *domain.PutTelegrafsIDResponse); ok {
		r0 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutTelegrafsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutTelegrafsIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, telegrafID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutTelegrafsIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTelegrafsIDWithBodyWithResponse'
type ClientWithResponsesInterface_PutTelegrafsIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PutTelegrafsIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PutTelegrafsIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PutTelegrafsIDWithBodyWithResponse(ctx interface{}, telegrafID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PutTelegrafsIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PutTelegrafsIDWithBodyWithResponse_Call{Call: _e.mock.On("PutTelegrafsIDWithBodyWithResponse", ctx, telegrafID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PutTelegrafsIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PutTelegrafsIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PutTelegrafsIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutTelegrafsIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutTelegrafsIDWithBodyWithResponse_Call) Return(_a0 *domain.PutTelegrafsIDResponse, _a1 error) *ClientWithResponsesInterface_PutTelegrafsIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutTelegrafsIDWithResponse provides a mock function with given fields: ctx, telegrafID, params, body
func (_m *ClientWithResponsesInterface) PutTelegrafsIDWithResponse(ctx context.Context, telegrafID string, params *domain.PutTelegrafsIDParams, body domain.PutTelegrafsIDJSONRequestBody) (*domain.PutTelegrafsIDResponse, error) {
	ret := _m.Called(ctx, telegrafID, params, body)

	var r0 *domain.PutTelegrafsIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutTelegrafsIDParams, domain.PutTelegrafsIDJSONRequestBody) *domain.PutTelegrafsIDResponse); ok {
		r0 = rf(ctx, telegrafID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutTelegrafsIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutTelegrafsIDParams, domain.PutTelegrafsIDJSONRequestBody) error); ok {
		r1 = rf(ctx, telegrafID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutTelegrafsIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTelegrafsIDWithResponse'
type ClientWithResponsesInterface_PutTelegrafsIDWithResponse_Call struct {
	*mock.Call
}

// PutTelegrafsIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - telegrafID string
//  - params *domain.PutTelegrafsIDParams
//  - body domain.PutTelegrafsIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PutTelegrafsIDWithResponse(ctx interface{}, telegrafID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PutTelegrafsIDWithResponse_Call {
	return &ClientWithResponsesInterface_PutTelegrafsIDWithResponse_Call{Call: _e.mock.On("PutTelegrafsIDWithResponse", ctx, telegrafID, params, body)}
}

func (_c *ClientWithResponsesInterface_PutTelegrafsIDWithResponse_Call) Run(run func(ctx context.Context, telegrafID string, params *domain.PutTelegrafsIDParams, body domain.PutTelegrafsIDJSONRequestBody)) *ClientWithResponsesInterface_PutTelegrafsIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutTelegrafsIDParams), args[3].(domain.PutTelegrafsIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutTelegrafsIDWithResponse_Call) Return(_a0 *domain.PutTelegrafsIDResponse, _a1 error) *ClientWithResponsesInterface_PutTelegrafsIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutVariablesIDWithBodyWithResponse provides a mock function with given fields: ctx, variableID, params, contentType, body
func (_m *ClientWithResponsesInterface) PutVariablesIDWithBodyWithResponse(ctx context.Context, variableID string, params *domain.PutVariablesIDParams, contentType string, body io.Reader) (*domain.PutVariablesIDResponse, error) {
	ret := _m.Called(ctx, variableID, params, contentType, body)

	var r0 *domain.PutVariablesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutVariablesIDParams, string, io.Reader) *domain.PutVariablesIDResponse); ok {
		r0 = rf(ctx, variableID, params, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutVariablesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutVariablesIDParams, string, io.Reader) error); ok {
		r1 = rf(ctx, variableID, params, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutVariablesIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutVariablesIDWithBodyWithResponse'
type ClientWithResponsesInterface_PutVariablesIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PutVariablesIDWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PutVariablesIDParams
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) PutVariablesIDWithBodyWithResponse(ctx interface{}, variableID interface{}, params interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_PutVariablesIDWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_PutVariablesIDWithBodyWithResponse_Call{Call: _e.mock.On("PutVariablesIDWithBodyWithResponse", ctx, variableID, params, contentType, body)}
}

func (_c *ClientWithResponsesInterface_PutVariablesIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, variableID string, params *domain.PutVariablesIDParams, contentType string, body io.Reader)) *ClientWithResponsesInterface_PutVariablesIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutVariablesIDParams), args[3].(string), args[4].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutVariablesIDWithBodyWithResponse_Call) Return(_a0 *domain.PutVariablesIDResponse, _a1 error) *ClientWithResponsesInterface_PutVariablesIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutVariablesIDWithResponse provides a mock function with given fields: ctx, variableID, params, body
func (_m *ClientWithResponsesInterface) PutVariablesIDWithResponse(ctx context.Context, variableID string, params *domain.PutVariablesIDParams, body domain.PutVariablesIDJSONRequestBody) (*domain.PutVariablesIDResponse, error) {
	ret := _m.Called(ctx, variableID, params, body)

	var r0 *domain.PutVariablesIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.PutVariablesIDParams, domain.PutVariablesIDJSONRequestBody) *domain.PutVariablesIDResponse); ok {
		r0 = rf(ctx, variableID, params, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PutVariablesIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.PutVariablesIDParams, domain.PutVariablesIDJSONRequestBody) error); ok {
		r1 = rf(ctx, variableID, params, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_PutVariablesIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutVariablesIDWithResponse'
type ClientWithResponsesInterface_PutVariablesIDWithResponse_Call struct {
	*mock.Call
}

// PutVariablesIDWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - variableID string
//  - params *domain.PutVariablesIDParams
//  - body domain.PutVariablesIDJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) PutVariablesIDWithResponse(ctx interface{}, variableID interface{}, params interface{}, body interface{}) *ClientWithResponsesInterface_PutVariablesIDWithResponse_Call {
	return &ClientWithResponsesInterface_PutVariablesIDWithResponse_Call{Call: _e.mock.On("PutVariablesIDWithResponse", ctx, variableID, params, body)}
}

func (_c *ClientWithResponsesInterface_PutVariablesIDWithResponse_Call) Run(run func(ctx context.Context, variableID string, params *domain.PutVariablesIDParams, body domain.PutVariablesIDJSONRequestBody)) *ClientWithResponsesInterface_PutVariablesIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.PutVariablesIDParams), args[3].(domain.PutVariablesIDJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_PutVariablesIDWithResponse_Call) Return(_a0 *domain.PutVariablesIDResponse, _a1 error) *ClientWithResponsesInterface_PutVariablesIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ReadStackWithResponse provides a mock function with given fields: ctx, stackId
func (_m *ClientWithResponsesInterface) ReadStackWithResponse(ctx context.Context, stackId string) (*domain.ReadStackResponse, error) {
	ret := _m.Called(ctx, stackId)

	var r0 *domain.ReadStackResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ReadStackResponse); ok {
		r0 = rf(ctx, stackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ReadStackResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_ReadStackWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadStackWithResponse'
type ClientWithResponsesInterface_ReadStackWithResponse_Call struct {
	*mock.Call
}

// ReadStackWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
func (_e *ClientWithResponsesInterface_Expecter) ReadStackWithResponse(ctx interface{}, stackId interface{}) *ClientWithResponsesInterface_ReadStackWithResponse_Call {
	return &ClientWithResponsesInterface_ReadStackWithResponse_Call{Call: _e.mock.On("ReadStackWithResponse", ctx, stackId)}
}

func (_c *ClientWithResponsesInterface_ReadStackWithResponse_Call) Run(run func(ctx context.Context, stackId string)) *ClientWithResponsesInterface_ReadStackWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_ReadStackWithResponse_Call) Return(_a0 *domain.ReadStackResponse, _a1 error) *ClientWithResponsesInterface_ReadStackWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UninstallStackWithResponse provides a mock function with given fields: ctx, stackId
func (_m *ClientWithResponsesInterface) UninstallStackWithResponse(ctx context.Context, stackId string) (*domain.UninstallStackResponse, error) {
	ret := _m.Called(ctx, stackId)

	var r0 *domain.UninstallStackResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UninstallStackResponse); ok {
		r0 = rf(ctx, stackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UninstallStackResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_UninstallStackWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UninstallStackWithResponse'
type ClientWithResponsesInterface_UninstallStackWithResponse_Call struct {
	*mock.Call
}

// UninstallStackWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
func (_e *ClientWithResponsesInterface_Expecter) UninstallStackWithResponse(ctx interface{}, stackId interface{}) *ClientWithResponsesInterface_UninstallStackWithResponse_Call {
	return &ClientWithResponsesInterface_UninstallStackWithResponse_Call{Call: _e.mock.On("UninstallStackWithResponse", ctx, stackId)}
}

func (_c *ClientWithResponsesInterface_UninstallStackWithResponse_Call) Run(run func(ctx context.Context, stackId string)) *ClientWithResponsesInterface_UninstallStackWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_UninstallStackWithResponse_Call) Return(_a0 *domain.UninstallStackResponse, _a1 error) *ClientWithResponsesInterface_UninstallStackWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStackWithBodyWithResponse provides a mock function with given fields: ctx, stackId, contentType, body
func (_m *ClientWithResponsesInterface) UpdateStackWithBodyWithResponse(ctx context.Context, stackId string, contentType string, body io.Reader) (*domain.UpdateStackResponse, error) {
	ret := _m.Called(ctx, stackId, contentType, body)

	var r0 *domain.UpdateStackResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) *domain.UpdateStackResponse); ok {
		r0 = rf(ctx, stackId, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UpdateStackResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader) error); ok {
		r1 = rf(ctx, stackId, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_UpdateStackWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStackWithBodyWithResponse'
type ClientWithResponsesInterface_UpdateStackWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateStackWithBodyWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
//  - contentType string
//  - body io.Reader
func (_e *ClientWithResponsesInterface_Expecter) UpdateStackWithBodyWithResponse(ctx interface{}, stackId interface{}, contentType interface{}, body interface{}) *ClientWithResponsesInterface_UpdateStackWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_UpdateStackWithBodyWithResponse_Call{Call: _e.mock.On("UpdateStackWithBodyWithResponse", ctx, stackId, contentType, body)}
}

func (_c *ClientWithResponsesInterface_UpdateStackWithBodyWithResponse_Call) Run(run func(ctx context.Context, stackId string, contentType string, body io.Reader)) *ClientWithResponsesInterface_UpdateStackWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_UpdateStackWithBodyWithResponse_Call) Return(_a0 *domain.UpdateStackResponse, _a1 error) *ClientWithResponsesInterface_UpdateStackWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStackWithResponse provides a mock function with given fields: ctx, stackId, body
func (_m *ClientWithResponsesInterface) UpdateStackWithResponse(ctx context.Context, stackId string, body domain.UpdateStackJSONRequestBody) (*domain.UpdateStackResponse, error) {
	ret := _m.Called(ctx, stackId, body)

	var r0 *domain.UpdateStackResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateStackJSONRequestBody) *domain.UpdateStackResponse); ok {
		r0 = rf(ctx, stackId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UpdateStackResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, domain.UpdateStackJSONRequestBody) error); ok {
		r1 = rf(ctx, stackId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_UpdateStackWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStackWithResponse'
type ClientWithResponsesInterface_UpdateStackWithResponse_Call struct {
	*mock.Call
}

// UpdateStackWithResponse is a helper method to define mock.On call
//  - ctx context.Context
//  - stackId string
//  - body domain.UpdateStackJSONRequestBody
func (_e *ClientWithResponsesInterface_Expecter) UpdateStackWithResponse(ctx interface{}, stackId interface{}, body interface{}) *ClientWithResponsesInterface_UpdateStackWithResponse_Call {
	return &ClientWithResponsesInterface_UpdateStackWithResponse_Call{Call: _e.mock.On("UpdateStackWithResponse", ctx, stackId, body)}
}

func (_c *ClientWithResponsesInterface_UpdateStackWithResponse_Call) Run(run func(ctx context.Context, stackId string, body domain.UpdateStackJSONRequestBody)) *ClientWithResponsesInterface_UpdateStackWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.UpdateStackJSONRequestBody))
	})
	return _c
}

func (_c *ClientWithResponsesInterface_UpdateStackWithResponse_Call) Return(_a0 *domain.UpdateStackResponse, _a1 error) *ClientWithResponsesInterface_UpdateStackWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewClientWithResponsesInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientWithResponsesInterface(t mockConstructorTestingTNewClientWithResponsesInterface) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
