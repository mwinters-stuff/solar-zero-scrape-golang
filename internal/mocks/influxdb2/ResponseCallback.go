// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ResponseCallback is an autogenerated mock type for the ResponseCallback type
type ResponseCallback struct {
	mock.Mock
}

type ResponseCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *ResponseCallback) EXPECT() *ResponseCallback_Expecter {
	return &ResponseCallback_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: resp
func (_m *ResponseCallback) Execute(resp *http.Response) error {
	ret := _m.Called(resp)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Response) error); ok {
		r0 = rf(resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResponseCallback_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ResponseCallback_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - resp *http.Response
func (_e *ResponseCallback_Expecter) Execute(resp interface{}) *ResponseCallback_Execute_Call {
	return &ResponseCallback_Execute_Call{Call: _e.mock.On("Execute", resp)}
}

func (_c *ResponseCallback_Execute_Call) Run(run func(resp *http.Response)) *ResponseCallback_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Response))
	})
	return _c
}

func (_c *ResponseCallback_Execute_Call) Return(_a0 error) *ResponseCallback_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewResponseCallback interface {
	mock.TestingT
	Cleanup(func())
}

// NewResponseCallback creates a new instance of ResponseCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResponseCallback(t mockConstructorTestingTNewResponseCallback) *ResponseCallback {
	mock := &ResponseCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
