// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/influxdata/influxdb-client-go/v2/domain"
	mock "github.com/stretchr/testify/mock"
)

// UsersAPI is an autogenerated mock type for the UsersAPI type
type UsersAPI struct {
	mock.Mock
}

type UsersAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersAPI) EXPECT() *UsersAPI_Expecter {
	return &UsersAPI_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UsersAPI) CreateUser(ctx context.Context, user *domain.User) (*domain.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) *domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersAPI_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UsersAPI_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user *domain.User
func (_e *UsersAPI_Expecter) CreateUser(ctx interface{}, user interface{}) *UsersAPI_CreateUser_Call {
	return &UsersAPI_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UsersAPI_CreateUser_Call) Run(run func(ctx context.Context, user *domain.User)) *UsersAPI_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *UsersAPI_CreateUser_Call) Return(_a0 *domain.User, _a1 error) *UsersAPI_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateUserWithName provides a mock function with given fields: ctx, userName
func (_m *UsersAPI) CreateUserWithName(ctx context.Context, userName string) (*domain.User, error) {
	ret := _m.Called(ctx, userName)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersAPI_CreateUserWithName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserWithName'
type UsersAPI_CreateUserWithName_Call struct {
	*mock.Call
}

// CreateUserWithName is a helper method to define mock.On call
//  - ctx context.Context
//  - userName string
func (_e *UsersAPI_Expecter) CreateUserWithName(ctx interface{}, userName interface{}) *UsersAPI_CreateUserWithName_Call {
	return &UsersAPI_CreateUserWithName_Call{Call: _e.mock.On("CreateUserWithName", ctx, userName)}
}

func (_c *UsersAPI_CreateUserWithName_Call) Run(run func(ctx context.Context, userName string)) *UsersAPI_CreateUserWithName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersAPI_CreateUserWithName_Call) Return(_a0 *domain.User, _a1 error) *UsersAPI_CreateUserWithName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, user
func (_m *UsersAPI) DeleteUser(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersAPI_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UsersAPI_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user *domain.User
func (_e *UsersAPI_Expecter) DeleteUser(ctx interface{}, user interface{}) *UsersAPI_DeleteUser_Call {
	return &UsersAPI_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, user)}
}

func (_c *UsersAPI_DeleteUser_Call) Run(run func(ctx context.Context, user *domain.User)) *UsersAPI_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *UsersAPI_DeleteUser_Call) Return(_a0 error) *UsersAPI_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteUserWithID provides a mock function with given fields: ctx, userID
func (_m *UsersAPI) DeleteUserWithID(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersAPI_DeleteUserWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserWithID'
type UsersAPI_DeleteUserWithID_Call struct {
	*mock.Call
}

// DeleteUserWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
func (_e *UsersAPI_Expecter) DeleteUserWithID(ctx interface{}, userID interface{}) *UsersAPI_DeleteUserWithID_Call {
	return &UsersAPI_DeleteUserWithID_Call{Call: _e.mock.On("DeleteUserWithID", ctx, userID)}
}

func (_c *UsersAPI_DeleteUserWithID_Call) Run(run func(ctx context.Context, userID string)) *UsersAPI_DeleteUserWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersAPI_DeleteUserWithID_Call) Return(_a0 error) *UsersAPI_DeleteUserWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindUserByID provides a mock function with given fields: ctx, userID
func (_m *UsersAPI) FindUserByID(ctx context.Context, userID string) (*domain.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersAPI_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type UsersAPI_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
func (_e *UsersAPI_Expecter) FindUserByID(ctx interface{}, userID interface{}) *UsersAPI_FindUserByID_Call {
	return &UsersAPI_FindUserByID_Call{Call: _e.mock.On("FindUserByID", ctx, userID)}
}

func (_c *UsersAPI_FindUserByID_Call) Run(run func(ctx context.Context, userID string)) *UsersAPI_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersAPI_FindUserByID_Call) Return(_a0 *domain.User, _a1 error) *UsersAPI_FindUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindUserByName provides a mock function with given fields: ctx, userName
func (_m *UsersAPI) FindUserByName(ctx context.Context, userName string) (*domain.User, error) {
	ret := _m.Called(ctx, userName)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersAPI_FindUserByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByName'
type UsersAPI_FindUserByName_Call struct {
	*mock.Call
}

// FindUserByName is a helper method to define mock.On call
//  - ctx context.Context
//  - userName string
func (_e *UsersAPI_Expecter) FindUserByName(ctx interface{}, userName interface{}) *UsersAPI_FindUserByName_Call {
	return &UsersAPI_FindUserByName_Call{Call: _e.mock.On("FindUserByName", ctx, userName)}
}

func (_c *UsersAPI_FindUserByName_Call) Run(run func(ctx context.Context, userName string)) *UsersAPI_FindUserByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersAPI_FindUserByName_Call) Return(_a0 *domain.User, _a1 error) *UsersAPI_FindUserByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUsers provides a mock function with given fields: ctx
func (_m *UsersAPI) GetUsers(ctx context.Context) (*[]domain.User, error) {
	ret := _m.Called(ctx)

	var r0 *[]domain.User
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersAPI_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UsersAPI_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//  - ctx context.Context
func (_e *UsersAPI_Expecter) GetUsers(ctx interface{}) *UsersAPI_GetUsers_Call {
	return &UsersAPI_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx)}
}

func (_c *UsersAPI_GetUsers_Call) Run(run func(ctx context.Context)) *UsersAPI_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UsersAPI_GetUsers_Call) Return(_a0 *[]domain.User, _a1 error) *UsersAPI_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Me provides a mock function with given fields: ctx
func (_m *UsersAPI) Me(ctx context.Context) (*domain.User, error) {
	ret := _m.Called(ctx)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context) *domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersAPI_Me_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Me'
type UsersAPI_Me_Call struct {
	*mock.Call
}

// Me is a helper method to define mock.On call
//  - ctx context.Context
func (_e *UsersAPI_Expecter) Me(ctx interface{}) *UsersAPI_Me_Call {
	return &UsersAPI_Me_Call{Call: _e.mock.On("Me", ctx)}
}

func (_c *UsersAPI_Me_Call) Run(run func(ctx context.Context)) *UsersAPI_Me_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UsersAPI_Me_Call) Return(_a0 *domain.User, _a1 error) *UsersAPI_Me_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// MeUpdatePassword provides a mock function with given fields: ctx, oldPassword, newPassword
func (_m *UsersAPI) MeUpdatePassword(ctx context.Context, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersAPI_MeUpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MeUpdatePassword'
type UsersAPI_MeUpdatePassword_Call struct {
	*mock.Call
}

// MeUpdatePassword is a helper method to define mock.On call
//  - ctx context.Context
//  - oldPassword string
//  - newPassword string
func (_e *UsersAPI_Expecter) MeUpdatePassword(ctx interface{}, oldPassword interface{}, newPassword interface{}) *UsersAPI_MeUpdatePassword_Call {
	return &UsersAPI_MeUpdatePassword_Call{Call: _e.mock.On("MeUpdatePassword", ctx, oldPassword, newPassword)}
}

func (_c *UsersAPI_MeUpdatePassword_Call) Run(run func(ctx context.Context, oldPassword string, newPassword string)) *UsersAPI_MeUpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UsersAPI_MeUpdatePassword_Call) Return(_a0 error) *UsersAPI_MeUpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

// SignIn provides a mock function with given fields: ctx, username, password
func (_m *UsersAPI) SignIn(ctx context.Context, username string, password string) error {
	ret := _m.Called(ctx, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersAPI_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type UsersAPI_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//  - ctx context.Context
//  - username string
//  - password string
func (_e *UsersAPI_Expecter) SignIn(ctx interface{}, username interface{}, password interface{}) *UsersAPI_SignIn_Call {
	return &UsersAPI_SignIn_Call{Call: _e.mock.On("SignIn", ctx, username, password)}
}

func (_c *UsersAPI_SignIn_Call) Run(run func(ctx context.Context, username string, password string)) *UsersAPI_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UsersAPI_SignIn_Call) Return(_a0 error) *UsersAPI_SignIn_Call {
	_c.Call.Return(_a0)
	return _c
}

// SignOut provides a mock function with given fields: ctx
func (_m *UsersAPI) SignOut(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersAPI_SignOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignOut'
type UsersAPI_SignOut_Call struct {
	*mock.Call
}

// SignOut is a helper method to define mock.On call
//  - ctx context.Context
func (_e *UsersAPI_Expecter) SignOut(ctx interface{}) *UsersAPI_SignOut_Call {
	return &UsersAPI_SignOut_Call{Call: _e.mock.On("SignOut", ctx)}
}

func (_c *UsersAPI_SignOut_Call) Run(run func(ctx context.Context)) *UsersAPI_SignOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UsersAPI_SignOut_Call) Return(_a0 error) *UsersAPI_SignOut_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UsersAPI) UpdateUser(ctx context.Context, user *domain.User) (*domain.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) *domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersAPI_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UsersAPI_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user *domain.User
func (_e *UsersAPI_Expecter) UpdateUser(ctx interface{}, user interface{}) *UsersAPI_UpdateUser_Call {
	return &UsersAPI_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *UsersAPI_UpdateUser_Call) Run(run func(ctx context.Context, user *domain.User)) *UsersAPI_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *UsersAPI_UpdateUser_Call) Return(_a0 *domain.User, _a1 error) *UsersAPI_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUserPassword provides a mock function with given fields: ctx, user, password
func (_m *UsersAPI) UpdateUserPassword(ctx context.Context, user *domain.User, password string) error {
	ret := _m.Called(ctx, user, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User, string) error); ok {
		r0 = rf(ctx, user, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersAPI_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type UsersAPI_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//  - ctx context.Context
//  - user *domain.User
//  - password string
func (_e *UsersAPI_Expecter) UpdateUserPassword(ctx interface{}, user interface{}, password interface{}) *UsersAPI_UpdateUserPassword_Call {
	return &UsersAPI_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, user, password)}
}

func (_c *UsersAPI_UpdateUserPassword_Call) Run(run func(ctx context.Context, user *domain.User, password string)) *UsersAPI_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User), args[2].(string))
	})
	return _c
}

func (_c *UsersAPI_UpdateUserPassword_Call) Return(_a0 error) *UsersAPI_UpdateUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateUserPasswordWithID provides a mock function with given fields: ctx, userID, password
func (_m *UsersAPI) UpdateUserPasswordWithID(ctx context.Context, userID string, password string) error {
	ret := _m.Called(ctx, userID, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersAPI_UpdateUserPasswordWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPasswordWithID'
type UsersAPI_UpdateUserPasswordWithID_Call struct {
	*mock.Call
}

// UpdateUserPasswordWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID string
//  - password string
func (_e *UsersAPI_Expecter) UpdateUserPasswordWithID(ctx interface{}, userID interface{}, password interface{}) *UsersAPI_UpdateUserPasswordWithID_Call {
	return &UsersAPI_UpdateUserPasswordWithID_Call{Call: _e.mock.On("UpdateUserPasswordWithID", ctx, userID, password)}
}

func (_c *UsersAPI_UpdateUserPasswordWithID_Call) Run(run func(ctx context.Context, userID string, password string)) *UsersAPI_UpdateUserPasswordWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UsersAPI_UpdateUserPasswordWithID_Call) Return(_a0 error) *UsersAPI_UpdateUserPasswordWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUsersAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersAPI creates a new instance of UsersAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersAPI(t mockConstructorTestingTNewUsersAPI) *UsersAPI {
	mock := &UsersAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
