// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/influxdata/influxdb-client-go/v2/api"

	domain "github.com/influxdata/influxdb-client-go/v2/domain"

	mock "github.com/stretchr/testify/mock"
)

// BucketsAPI is an autogenerated mock type for the BucketsAPI type
type BucketsAPI struct {
	mock.Mock
}

type BucketsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *BucketsAPI) EXPECT() *BucketsAPI_Expecter {
	return &BucketsAPI_Expecter{mock: &_m.Mock}
}

// AddMember provides a mock function with given fields: ctx, bucket, user
func (_m *BucketsAPI) AddMember(ctx context.Context, bucket *domain.Bucket, user *domain.User) (*domain.ResourceMember, error) {
	ret := _m.Called(ctx, bucket, user)

	var r0 *domain.ResourceMember
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bucket, *domain.User) *domain.ResourceMember); ok {
		r0 = rf(ctx, bucket, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResourceMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Bucket, *domain.User) error); ok {
		r1 = rf(ctx, bucket, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_AddMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMember'
type BucketsAPI_AddMember_Call struct {
	*mock.Call
}

// AddMember is a helper method to define mock.On call
//  - ctx context.Context
//  - bucket *domain.Bucket
//  - user *domain.User
func (_e *BucketsAPI_Expecter) AddMember(ctx interface{}, bucket interface{}, user interface{}) *BucketsAPI_AddMember_Call {
	return &BucketsAPI_AddMember_Call{Call: _e.mock.On("AddMember", ctx, bucket, user)}
}

func (_c *BucketsAPI_AddMember_Call) Run(run func(ctx context.Context, bucket *domain.Bucket, user *domain.User)) *BucketsAPI_AddMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bucket), args[2].(*domain.User))
	})
	return _c
}

func (_c *BucketsAPI_AddMember_Call) Return(_a0 *domain.ResourceMember, _a1 error) *BucketsAPI_AddMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddMemberWithID provides a mock function with given fields: ctx, bucketID, memberID
func (_m *BucketsAPI) AddMemberWithID(ctx context.Context, bucketID string, memberID string) (*domain.ResourceMember, error) {
	ret := _m.Called(ctx, bucketID, memberID)

	var r0 *domain.ResourceMember
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.ResourceMember); ok {
		r0 = rf(ctx, bucketID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResourceMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketID, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_AddMemberWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMemberWithID'
type BucketsAPI_AddMemberWithID_Call struct {
	*mock.Call
}

// AddMemberWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - memberID string
func (_e *BucketsAPI_Expecter) AddMemberWithID(ctx interface{}, bucketID interface{}, memberID interface{}) *BucketsAPI_AddMemberWithID_Call {
	return &BucketsAPI_AddMemberWithID_Call{Call: _e.mock.On("AddMemberWithID", ctx, bucketID, memberID)}
}

func (_c *BucketsAPI_AddMemberWithID_Call) Run(run func(ctx context.Context, bucketID string, memberID string)) *BucketsAPI_AddMemberWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *BucketsAPI_AddMemberWithID_Call) Return(_a0 *domain.ResourceMember, _a1 error) *BucketsAPI_AddMemberWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddOwner provides a mock function with given fields: ctx, bucket, user
func (_m *BucketsAPI) AddOwner(ctx context.Context, bucket *domain.Bucket, user *domain.User) (*domain.ResourceOwner, error) {
	ret := _m.Called(ctx, bucket, user)

	var r0 *domain.ResourceOwner
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bucket, *domain.User) *domain.ResourceOwner); ok {
		r0 = rf(ctx, bucket, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResourceOwner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Bucket, *domain.User) error); ok {
		r1 = rf(ctx, bucket, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_AddOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOwner'
type BucketsAPI_AddOwner_Call struct {
	*mock.Call
}

// AddOwner is a helper method to define mock.On call
//  - ctx context.Context
//  - bucket *domain.Bucket
//  - user *domain.User
func (_e *BucketsAPI_Expecter) AddOwner(ctx interface{}, bucket interface{}, user interface{}) *BucketsAPI_AddOwner_Call {
	return &BucketsAPI_AddOwner_Call{Call: _e.mock.On("AddOwner", ctx, bucket, user)}
}

func (_c *BucketsAPI_AddOwner_Call) Run(run func(ctx context.Context, bucket *domain.Bucket, user *domain.User)) *BucketsAPI_AddOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bucket), args[2].(*domain.User))
	})
	return _c
}

func (_c *BucketsAPI_AddOwner_Call) Return(_a0 *domain.ResourceOwner, _a1 error) *BucketsAPI_AddOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddOwnerWithID provides a mock function with given fields: ctx, bucketID, memberID
func (_m *BucketsAPI) AddOwnerWithID(ctx context.Context, bucketID string, memberID string) (*domain.ResourceOwner, error) {
	ret := _m.Called(ctx, bucketID, memberID)

	var r0 *domain.ResourceOwner
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.ResourceOwner); ok {
		r0 = rf(ctx, bucketID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResourceOwner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketID, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_AddOwnerWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOwnerWithID'
type BucketsAPI_AddOwnerWithID_Call struct {
	*mock.Call
}

// AddOwnerWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - memberID string
func (_e *BucketsAPI_Expecter) AddOwnerWithID(ctx interface{}, bucketID interface{}, memberID interface{}) *BucketsAPI_AddOwnerWithID_Call {
	return &BucketsAPI_AddOwnerWithID_Call{Call: _e.mock.On("AddOwnerWithID", ctx, bucketID, memberID)}
}

func (_c *BucketsAPI_AddOwnerWithID_Call) Run(run func(ctx context.Context, bucketID string, memberID string)) *BucketsAPI_AddOwnerWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *BucketsAPI_AddOwnerWithID_Call) Return(_a0 *domain.ResourceOwner, _a1 error) *BucketsAPI_AddOwnerWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateBucket provides a mock function with given fields: ctx, bucket
func (_m *BucketsAPI) CreateBucket(ctx context.Context, bucket *domain.Bucket) (*domain.Bucket, error) {
	ret := _m.Called(ctx, bucket)

	var r0 *domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bucket) *domain.Bucket); ok {
		r0 = rf(ctx, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Bucket) error); ok {
		r1 = rf(ctx, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_CreateBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBucket'
type BucketsAPI_CreateBucket_Call struct {
	*mock.Call
}

// CreateBucket is a helper method to define mock.On call
//  - ctx context.Context
//  - bucket *domain.Bucket
func (_e *BucketsAPI_Expecter) CreateBucket(ctx interface{}, bucket interface{}) *BucketsAPI_CreateBucket_Call {
	return &BucketsAPI_CreateBucket_Call{Call: _e.mock.On("CreateBucket", ctx, bucket)}
}

func (_c *BucketsAPI_CreateBucket_Call) Run(run func(ctx context.Context, bucket *domain.Bucket)) *BucketsAPI_CreateBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bucket))
	})
	return _c
}

func (_c *BucketsAPI_CreateBucket_Call) Return(_a0 *domain.Bucket, _a1 error) *BucketsAPI_CreateBucket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateBucketWithName provides a mock function with given fields: ctx, org, bucketName, rules
func (_m *BucketsAPI) CreateBucketWithName(ctx context.Context, org *domain.Organization, bucketName string, rules ...domain.RetentionRule) (*domain.Bucket, error) {
	_va := make([]interface{}, len(rules))
	for _i := range rules {
		_va[_i] = rules[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, org, bucketName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Organization, string, ...domain.RetentionRule) *domain.Bucket); ok {
		r0 = rf(ctx, org, bucketName, rules...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Organization, string, ...domain.RetentionRule) error); ok {
		r1 = rf(ctx, org, bucketName, rules...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_CreateBucketWithName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBucketWithName'
type BucketsAPI_CreateBucketWithName_Call struct {
	*mock.Call
}

// CreateBucketWithName is a helper method to define mock.On call
//  - ctx context.Context
//  - org *domain.Organization
//  - bucketName string
//  - rules ...domain.RetentionRule
func (_e *BucketsAPI_Expecter) CreateBucketWithName(ctx interface{}, org interface{}, bucketName interface{}, rules ...interface{}) *BucketsAPI_CreateBucketWithName_Call {
	return &BucketsAPI_CreateBucketWithName_Call{Call: _e.mock.On("CreateBucketWithName",
		append([]interface{}{ctx, org, bucketName}, rules...)...)}
}

func (_c *BucketsAPI_CreateBucketWithName_Call) Run(run func(ctx context.Context, org *domain.Organization, bucketName string, rules ...domain.RetentionRule)) *BucketsAPI_CreateBucketWithName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]domain.RetentionRule, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(domain.RetentionRule)
			}
		}
		run(args[0].(context.Context), args[1].(*domain.Organization), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *BucketsAPI_CreateBucketWithName_Call) Return(_a0 *domain.Bucket, _a1 error) *BucketsAPI_CreateBucketWithName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateBucketWithNameWithID provides a mock function with given fields: ctx, orgID, bucketName, rules
func (_m *BucketsAPI) CreateBucketWithNameWithID(ctx context.Context, orgID string, bucketName string, rules ...domain.RetentionRule) (*domain.Bucket, error) {
	_va := make([]interface{}, len(rules))
	for _i := range rules {
		_va[_i] = rules[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgID, bucketName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...domain.RetentionRule) *domain.Bucket); ok {
		r0 = rf(ctx, orgID, bucketName, rules...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...domain.RetentionRule) error); ok {
		r1 = rf(ctx, orgID, bucketName, rules...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_CreateBucketWithNameWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBucketWithNameWithID'
type BucketsAPI_CreateBucketWithNameWithID_Call struct {
	*mock.Call
}

// CreateBucketWithNameWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - bucketName string
//  - rules ...domain.RetentionRule
func (_e *BucketsAPI_Expecter) CreateBucketWithNameWithID(ctx interface{}, orgID interface{}, bucketName interface{}, rules ...interface{}) *BucketsAPI_CreateBucketWithNameWithID_Call {
	return &BucketsAPI_CreateBucketWithNameWithID_Call{Call: _e.mock.On("CreateBucketWithNameWithID",
		append([]interface{}{ctx, orgID, bucketName}, rules...)...)}
}

func (_c *BucketsAPI_CreateBucketWithNameWithID_Call) Run(run func(ctx context.Context, orgID string, bucketName string, rules ...domain.RetentionRule)) *BucketsAPI_CreateBucketWithNameWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]domain.RetentionRule, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(domain.RetentionRule)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *BucketsAPI_CreateBucketWithNameWithID_Call) Return(_a0 *domain.Bucket, _a1 error) *BucketsAPI_CreateBucketWithNameWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteBucket provides a mock function with given fields: ctx, bucket
func (_m *BucketsAPI) DeleteBucket(ctx context.Context, bucket *domain.Bucket) error {
	ret := _m.Called(ctx, bucket)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bucket) error); ok {
		r0 = rf(ctx, bucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketsAPI_DeleteBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucket'
type BucketsAPI_DeleteBucket_Call struct {
	*mock.Call
}

// DeleteBucket is a helper method to define mock.On call
//  - ctx context.Context
//  - bucket *domain.Bucket
func (_e *BucketsAPI_Expecter) DeleteBucket(ctx interface{}, bucket interface{}) *BucketsAPI_DeleteBucket_Call {
	return &BucketsAPI_DeleteBucket_Call{Call: _e.mock.On("DeleteBucket", ctx, bucket)}
}

func (_c *BucketsAPI_DeleteBucket_Call) Run(run func(ctx context.Context, bucket *domain.Bucket)) *BucketsAPI_DeleteBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bucket))
	})
	return _c
}

func (_c *BucketsAPI_DeleteBucket_Call) Return(_a0 error) *BucketsAPI_DeleteBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteBucketWithID provides a mock function with given fields: ctx, bucketID
func (_m *BucketsAPI) DeleteBucketWithID(ctx context.Context, bucketID string) error {
	ret := _m.Called(ctx, bucketID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bucketID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketsAPI_DeleteBucketWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucketWithID'
type BucketsAPI_DeleteBucketWithID_Call struct {
	*mock.Call
}

// DeleteBucketWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
func (_e *BucketsAPI_Expecter) DeleteBucketWithID(ctx interface{}, bucketID interface{}) *BucketsAPI_DeleteBucketWithID_Call {
	return &BucketsAPI_DeleteBucketWithID_Call{Call: _e.mock.On("DeleteBucketWithID", ctx, bucketID)}
}

func (_c *BucketsAPI_DeleteBucketWithID_Call) Run(run func(ctx context.Context, bucketID string)) *BucketsAPI_DeleteBucketWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BucketsAPI_DeleteBucketWithID_Call) Return(_a0 error) *BucketsAPI_DeleteBucketWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindBucketByID provides a mock function with given fields: ctx, bucketID
func (_m *BucketsAPI) FindBucketByID(ctx context.Context, bucketID string) (*domain.Bucket, error) {
	ret := _m.Called(ctx, bucketID)

	var r0 *domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Bucket); ok {
		r0 = rf(ctx, bucketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_FindBucketByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBucketByID'
type BucketsAPI_FindBucketByID_Call struct {
	*mock.Call
}

// FindBucketByID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
func (_e *BucketsAPI_Expecter) FindBucketByID(ctx interface{}, bucketID interface{}) *BucketsAPI_FindBucketByID_Call {
	return &BucketsAPI_FindBucketByID_Call{Call: _e.mock.On("FindBucketByID", ctx, bucketID)}
}

func (_c *BucketsAPI_FindBucketByID_Call) Run(run func(ctx context.Context, bucketID string)) *BucketsAPI_FindBucketByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BucketsAPI_FindBucketByID_Call) Return(_a0 *domain.Bucket, _a1 error) *BucketsAPI_FindBucketByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindBucketByName provides a mock function with given fields: ctx, bucketName
func (_m *BucketsAPI) FindBucketByName(ctx context.Context, bucketName string) (*domain.Bucket, error) {
	ret := _m.Called(ctx, bucketName)

	var r0 *domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Bucket); ok {
		r0 = rf(ctx, bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_FindBucketByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBucketByName'
type BucketsAPI_FindBucketByName_Call struct {
	*mock.Call
}

// FindBucketByName is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketName string
func (_e *BucketsAPI_Expecter) FindBucketByName(ctx interface{}, bucketName interface{}) *BucketsAPI_FindBucketByName_Call {
	return &BucketsAPI_FindBucketByName_Call{Call: _e.mock.On("FindBucketByName", ctx, bucketName)}
}

func (_c *BucketsAPI_FindBucketByName_Call) Run(run func(ctx context.Context, bucketName string)) *BucketsAPI_FindBucketByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BucketsAPI_FindBucketByName_Call) Return(_a0 *domain.Bucket, _a1 error) *BucketsAPI_FindBucketByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindBucketsByOrgID provides a mock function with given fields: ctx, orgID, pagingOptions
func (_m *BucketsAPI) FindBucketsByOrgID(ctx context.Context, orgID string, pagingOptions ...api.PagingOption) (*[]domain.Bucket, error) {
	_va := make([]interface{}, len(pagingOptions))
	for _i := range pagingOptions {
		_va[_i] = pagingOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *[]domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.PagingOption) *[]domain.Bucket); ok {
		r0 = rf(ctx, orgID, pagingOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.PagingOption) error); ok {
		r1 = rf(ctx, orgID, pagingOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_FindBucketsByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBucketsByOrgID'
type BucketsAPI_FindBucketsByOrgID_Call struct {
	*mock.Call
}

// FindBucketsByOrgID is a helper method to define mock.On call
//  - ctx context.Context
//  - orgID string
//  - pagingOptions ...api.PagingOption
func (_e *BucketsAPI_Expecter) FindBucketsByOrgID(ctx interface{}, orgID interface{}, pagingOptions ...interface{}) *BucketsAPI_FindBucketsByOrgID_Call {
	return &BucketsAPI_FindBucketsByOrgID_Call{Call: _e.mock.On("FindBucketsByOrgID",
		append([]interface{}{ctx, orgID}, pagingOptions...)...)}
}

func (_c *BucketsAPI_FindBucketsByOrgID_Call) Run(run func(ctx context.Context, orgID string, pagingOptions ...api.PagingOption)) *BucketsAPI_FindBucketsByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.PagingOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.PagingOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *BucketsAPI_FindBucketsByOrgID_Call) Return(_a0 *[]domain.Bucket, _a1 error) *BucketsAPI_FindBucketsByOrgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindBucketsByOrgName provides a mock function with given fields: ctx, orgName, pagingOptions
func (_m *BucketsAPI) FindBucketsByOrgName(ctx context.Context, orgName string, pagingOptions ...api.PagingOption) (*[]domain.Bucket, error) {
	_va := make([]interface{}, len(pagingOptions))
	for _i := range pagingOptions {
		_va[_i] = pagingOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *[]domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.PagingOption) *[]domain.Bucket); ok {
		r0 = rf(ctx, orgName, pagingOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.PagingOption) error); ok {
		r1 = rf(ctx, orgName, pagingOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_FindBucketsByOrgName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBucketsByOrgName'
type BucketsAPI_FindBucketsByOrgName_Call struct {
	*mock.Call
}

// FindBucketsByOrgName is a helper method to define mock.On call
//  - ctx context.Context
//  - orgName string
//  - pagingOptions ...api.PagingOption
func (_e *BucketsAPI_Expecter) FindBucketsByOrgName(ctx interface{}, orgName interface{}, pagingOptions ...interface{}) *BucketsAPI_FindBucketsByOrgName_Call {
	return &BucketsAPI_FindBucketsByOrgName_Call{Call: _e.mock.On("FindBucketsByOrgName",
		append([]interface{}{ctx, orgName}, pagingOptions...)...)}
}

func (_c *BucketsAPI_FindBucketsByOrgName_Call) Run(run func(ctx context.Context, orgName string, pagingOptions ...api.PagingOption)) *BucketsAPI_FindBucketsByOrgName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.PagingOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.PagingOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *BucketsAPI_FindBucketsByOrgName_Call) Return(_a0 *[]domain.Bucket, _a1 error) *BucketsAPI_FindBucketsByOrgName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBuckets provides a mock function with given fields: ctx, pagingOptions
func (_m *BucketsAPI) GetBuckets(ctx context.Context, pagingOptions ...api.PagingOption) (*[]domain.Bucket, error) {
	_va := make([]interface{}, len(pagingOptions))
	for _i := range pagingOptions {
		_va[_i] = pagingOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *[]domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, ...api.PagingOption) *[]domain.Bucket); ok {
		r0 = rf(ctx, pagingOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...api.PagingOption) error); ok {
		r1 = rf(ctx, pagingOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_GetBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuckets'
type BucketsAPI_GetBuckets_Call struct {
	*mock.Call
}

// GetBuckets is a helper method to define mock.On call
//  - ctx context.Context
//  - pagingOptions ...api.PagingOption
func (_e *BucketsAPI_Expecter) GetBuckets(ctx interface{}, pagingOptions ...interface{}) *BucketsAPI_GetBuckets_Call {
	return &BucketsAPI_GetBuckets_Call{Call: _e.mock.On("GetBuckets",
		append([]interface{}{ctx}, pagingOptions...)...)}
}

func (_c *BucketsAPI_GetBuckets_Call) Run(run func(ctx context.Context, pagingOptions ...api.PagingOption)) *BucketsAPI_GetBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.PagingOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(api.PagingOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *BucketsAPI_GetBuckets_Call) Return(_a0 *[]domain.Bucket, _a1 error) *BucketsAPI_GetBuckets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMembers provides a mock function with given fields: ctx, bucket
func (_m *BucketsAPI) GetMembers(ctx context.Context, bucket *domain.Bucket) (*[]domain.ResourceMember, error) {
	ret := _m.Called(ctx, bucket)

	var r0 *[]domain.ResourceMember
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bucket) *[]domain.ResourceMember); ok {
		r0 = rf(ctx, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.ResourceMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Bucket) error); ok {
		r1 = rf(ctx, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_GetMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMembers'
type BucketsAPI_GetMembers_Call struct {
	*mock.Call
}

// GetMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - bucket *domain.Bucket
func (_e *BucketsAPI_Expecter) GetMembers(ctx interface{}, bucket interface{}) *BucketsAPI_GetMembers_Call {
	return &BucketsAPI_GetMembers_Call{Call: _e.mock.On("GetMembers", ctx, bucket)}
}

func (_c *BucketsAPI_GetMembers_Call) Run(run func(ctx context.Context, bucket *domain.Bucket)) *BucketsAPI_GetMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bucket))
	})
	return _c
}

func (_c *BucketsAPI_GetMembers_Call) Return(_a0 *[]domain.ResourceMember, _a1 error) *BucketsAPI_GetMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMembersWithID provides a mock function with given fields: ctx, bucketID
func (_m *BucketsAPI) GetMembersWithID(ctx context.Context, bucketID string) (*[]domain.ResourceMember, error) {
	ret := _m.Called(ctx, bucketID)

	var r0 *[]domain.ResourceMember
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.ResourceMember); ok {
		r0 = rf(ctx, bucketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.ResourceMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_GetMembersWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMembersWithID'
type BucketsAPI_GetMembersWithID_Call struct {
	*mock.Call
}

// GetMembersWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
func (_e *BucketsAPI_Expecter) GetMembersWithID(ctx interface{}, bucketID interface{}) *BucketsAPI_GetMembersWithID_Call {
	return &BucketsAPI_GetMembersWithID_Call{Call: _e.mock.On("GetMembersWithID", ctx, bucketID)}
}

func (_c *BucketsAPI_GetMembersWithID_Call) Run(run func(ctx context.Context, bucketID string)) *BucketsAPI_GetMembersWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BucketsAPI_GetMembersWithID_Call) Return(_a0 *[]domain.ResourceMember, _a1 error) *BucketsAPI_GetMembersWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOwners provides a mock function with given fields: ctx, bucket
func (_m *BucketsAPI) GetOwners(ctx context.Context, bucket *domain.Bucket) (*[]domain.ResourceOwner, error) {
	ret := _m.Called(ctx, bucket)

	var r0 *[]domain.ResourceOwner
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bucket) *[]domain.ResourceOwner); ok {
		r0 = rf(ctx, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.ResourceOwner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Bucket) error); ok {
		r1 = rf(ctx, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_GetOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwners'
type BucketsAPI_GetOwners_Call struct {
	*mock.Call
}

// GetOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - bucket *domain.Bucket
func (_e *BucketsAPI_Expecter) GetOwners(ctx interface{}, bucket interface{}) *BucketsAPI_GetOwners_Call {
	return &BucketsAPI_GetOwners_Call{Call: _e.mock.On("GetOwners", ctx, bucket)}
}

func (_c *BucketsAPI_GetOwners_Call) Run(run func(ctx context.Context, bucket *domain.Bucket)) *BucketsAPI_GetOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bucket))
	})
	return _c
}

func (_c *BucketsAPI_GetOwners_Call) Return(_a0 *[]domain.ResourceOwner, _a1 error) *BucketsAPI_GetOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOwnersWithID provides a mock function with given fields: ctx, bucketID
func (_m *BucketsAPI) GetOwnersWithID(ctx context.Context, bucketID string) (*[]domain.ResourceOwner, error) {
	ret := _m.Called(ctx, bucketID)

	var r0 *[]domain.ResourceOwner
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]domain.ResourceOwner); ok {
		r0 = rf(ctx, bucketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.ResourceOwner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_GetOwnersWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnersWithID'
type BucketsAPI_GetOwnersWithID_Call struct {
	*mock.Call
}

// GetOwnersWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
func (_e *BucketsAPI_Expecter) GetOwnersWithID(ctx interface{}, bucketID interface{}) *BucketsAPI_GetOwnersWithID_Call {
	return &BucketsAPI_GetOwnersWithID_Call{Call: _e.mock.On("GetOwnersWithID", ctx, bucketID)}
}

func (_c *BucketsAPI_GetOwnersWithID_Call) Run(run func(ctx context.Context, bucketID string)) *BucketsAPI_GetOwnersWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BucketsAPI_GetOwnersWithID_Call) Return(_a0 *[]domain.ResourceOwner, _a1 error) *BucketsAPI_GetOwnersWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveMember provides a mock function with given fields: ctx, bucket, user
func (_m *BucketsAPI) RemoveMember(ctx context.Context, bucket *domain.Bucket, user *domain.User) error {
	ret := _m.Called(ctx, bucket, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bucket, *domain.User) error); ok {
		r0 = rf(ctx, bucket, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketsAPI_RemoveMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMember'
type BucketsAPI_RemoveMember_Call struct {
	*mock.Call
}

// RemoveMember is a helper method to define mock.On call
//  - ctx context.Context
//  - bucket *domain.Bucket
//  - user *domain.User
func (_e *BucketsAPI_Expecter) RemoveMember(ctx interface{}, bucket interface{}, user interface{}) *BucketsAPI_RemoveMember_Call {
	return &BucketsAPI_RemoveMember_Call{Call: _e.mock.On("RemoveMember", ctx, bucket, user)}
}

func (_c *BucketsAPI_RemoveMember_Call) Run(run func(ctx context.Context, bucket *domain.Bucket, user *domain.User)) *BucketsAPI_RemoveMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bucket), args[2].(*domain.User))
	})
	return _c
}

func (_c *BucketsAPI_RemoveMember_Call) Return(_a0 error) *BucketsAPI_RemoveMember_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveMemberWithID provides a mock function with given fields: ctx, bucketID, memberID
func (_m *BucketsAPI) RemoveMemberWithID(ctx context.Context, bucketID string, memberID string) error {
	ret := _m.Called(ctx, bucketID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucketID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketsAPI_RemoveMemberWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMemberWithID'
type BucketsAPI_RemoveMemberWithID_Call struct {
	*mock.Call
}

// RemoveMemberWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - memberID string
func (_e *BucketsAPI_Expecter) RemoveMemberWithID(ctx interface{}, bucketID interface{}, memberID interface{}) *BucketsAPI_RemoveMemberWithID_Call {
	return &BucketsAPI_RemoveMemberWithID_Call{Call: _e.mock.On("RemoveMemberWithID", ctx, bucketID, memberID)}
}

func (_c *BucketsAPI_RemoveMemberWithID_Call) Run(run func(ctx context.Context, bucketID string, memberID string)) *BucketsAPI_RemoveMemberWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *BucketsAPI_RemoveMemberWithID_Call) Return(_a0 error) *BucketsAPI_RemoveMemberWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveOwner provides a mock function with given fields: ctx, bucket, user
func (_m *BucketsAPI) RemoveOwner(ctx context.Context, bucket *domain.Bucket, user *domain.User) error {
	ret := _m.Called(ctx, bucket, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bucket, *domain.User) error); ok {
		r0 = rf(ctx, bucket, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketsAPI_RemoveOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOwner'
type BucketsAPI_RemoveOwner_Call struct {
	*mock.Call
}

// RemoveOwner is a helper method to define mock.On call
//  - ctx context.Context
//  - bucket *domain.Bucket
//  - user *domain.User
func (_e *BucketsAPI_Expecter) RemoveOwner(ctx interface{}, bucket interface{}, user interface{}) *BucketsAPI_RemoveOwner_Call {
	return &BucketsAPI_RemoveOwner_Call{Call: _e.mock.On("RemoveOwner", ctx, bucket, user)}
}

func (_c *BucketsAPI_RemoveOwner_Call) Run(run func(ctx context.Context, bucket *domain.Bucket, user *domain.User)) *BucketsAPI_RemoveOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bucket), args[2].(*domain.User))
	})
	return _c
}

func (_c *BucketsAPI_RemoveOwner_Call) Return(_a0 error) *BucketsAPI_RemoveOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveOwnerWithID provides a mock function with given fields: ctx, bucketID, memberID
func (_m *BucketsAPI) RemoveOwnerWithID(ctx context.Context, bucketID string, memberID string) error {
	ret := _m.Called(ctx, bucketID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucketID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketsAPI_RemoveOwnerWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOwnerWithID'
type BucketsAPI_RemoveOwnerWithID_Call struct {
	*mock.Call
}

// RemoveOwnerWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - bucketID string
//  - memberID string
func (_e *BucketsAPI_Expecter) RemoveOwnerWithID(ctx interface{}, bucketID interface{}, memberID interface{}) *BucketsAPI_RemoveOwnerWithID_Call {
	return &BucketsAPI_RemoveOwnerWithID_Call{Call: _e.mock.On("RemoveOwnerWithID", ctx, bucketID, memberID)}
}

func (_c *BucketsAPI_RemoveOwnerWithID_Call) Run(run func(ctx context.Context, bucketID string, memberID string)) *BucketsAPI_RemoveOwnerWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *BucketsAPI_RemoveOwnerWithID_Call) Return(_a0 error) *BucketsAPI_RemoveOwnerWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateBucket provides a mock function with given fields: ctx, bucket
func (_m *BucketsAPI) UpdateBucket(ctx context.Context, bucket *domain.Bucket) (*domain.Bucket, error) {
	ret := _m.Called(ctx, bucket)

	var r0 *domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Bucket) *domain.Bucket); ok {
		r0 = rf(ctx, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Bucket) error); ok {
		r1 = rf(ctx, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BucketsAPI_UpdateBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBucket'
type BucketsAPI_UpdateBucket_Call struct {
	*mock.Call
}

// UpdateBucket is a helper method to define mock.On call
//  - ctx context.Context
//  - bucket *domain.Bucket
func (_e *BucketsAPI_Expecter) UpdateBucket(ctx interface{}, bucket interface{}) *BucketsAPI_UpdateBucket_Call {
	return &BucketsAPI_UpdateBucket_Call{Call: _e.mock.On("UpdateBucket", ctx, bucket)}
}

func (_c *BucketsAPI_UpdateBucket_Call) Run(run func(ctx context.Context, bucket *domain.Bucket)) *BucketsAPI_UpdateBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Bucket))
	})
	return _c
}

func (_c *BucketsAPI_UpdateBucket_Call) Return(_a0 *domain.Bucket, _a1 error) *BucketsAPI_UpdateBucket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewBucketsAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewBucketsAPI creates a new instance of BucketsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBucketsAPI(t mockConstructorTestingTNewBucketsAPI) *BucketsAPI {
	mock := &BucketsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
