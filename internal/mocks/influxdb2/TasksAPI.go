// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/influxdata/influxdb-client-go/v2/api"

	domain "github.com/influxdata/influxdb-client-go/v2/domain"

	mock "github.com/stretchr/testify/mock"
)

// TasksAPI is an autogenerated mock type for the TasksAPI type
type TasksAPI struct {
	mock.Mock
}

type TasksAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *TasksAPI) EXPECT() *TasksAPI_Expecter {
	return &TasksAPI_Expecter{mock: &_m.Mock}
}

// AddLabel provides a mock function with given fields: ctx, task, label
func (_m *TasksAPI) AddLabel(ctx context.Context, task *domain.Task, label *domain.Label) (*domain.Label, error) {
	ret := _m.Called(ctx, task, label)

	var r0 *domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task, *domain.Label) *domain.Label); ok {
		r0 = rf(ctx, task, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task, *domain.Label) error); ok {
		r1 = rf(ctx, task, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_AddLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLabel'
type TasksAPI_AddLabel_Call struct {
	*mock.Call
}

// AddLabel is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
//  - label *domain.Label
func (_e *TasksAPI_Expecter) AddLabel(ctx interface{}, task interface{}, label interface{}) *TasksAPI_AddLabel_Call {
	return &TasksAPI_AddLabel_Call{Call: _e.mock.On("AddLabel", ctx, task, label)}
}

func (_c *TasksAPI_AddLabel_Call) Run(run func(ctx context.Context, task *domain.Task, label *domain.Label)) *TasksAPI_AddLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task), args[2].(*domain.Label))
	})
	return _c
}

func (_c *TasksAPI_AddLabel_Call) Return(_a0 *domain.Label, _a1 error) *TasksAPI_AddLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddLabelWithID provides a mock function with given fields: ctx, taskID, labelID
func (_m *TasksAPI) AddLabelWithID(ctx context.Context, taskID string, labelID string) (*domain.Label, error) {
	ret := _m.Called(ctx, taskID, labelID)

	var r0 *domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Label); ok {
		r0 = rf(ctx, taskID, labelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, taskID, labelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_AddLabelWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLabelWithID'
type TasksAPI_AddLabelWithID_Call struct {
	*mock.Call
}

// AddLabelWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - labelID string
func (_e *TasksAPI_Expecter) AddLabelWithID(ctx interface{}, taskID interface{}, labelID interface{}) *TasksAPI_AddLabelWithID_Call {
	return &TasksAPI_AddLabelWithID_Call{Call: _e.mock.On("AddLabelWithID", ctx, taskID, labelID)}
}

func (_c *TasksAPI_AddLabelWithID_Call) Run(run func(ctx context.Context, taskID string, labelID string)) *TasksAPI_AddLabelWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_AddLabelWithID_Call) Return(_a0 *domain.Label, _a1 error) *TasksAPI_AddLabelWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddMember provides a mock function with given fields: ctx, task, user
func (_m *TasksAPI) AddMember(ctx context.Context, task *domain.Task, user *domain.User) (*domain.ResourceMember, error) {
	ret := _m.Called(ctx, task, user)

	var r0 *domain.ResourceMember
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task, *domain.User) *domain.ResourceMember); ok {
		r0 = rf(ctx, task, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResourceMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task, *domain.User) error); ok {
		r1 = rf(ctx, task, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_AddMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMember'
type TasksAPI_AddMember_Call struct {
	*mock.Call
}

// AddMember is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
//  - user *domain.User
func (_e *TasksAPI_Expecter) AddMember(ctx interface{}, task interface{}, user interface{}) *TasksAPI_AddMember_Call {
	return &TasksAPI_AddMember_Call{Call: _e.mock.On("AddMember", ctx, task, user)}
}

func (_c *TasksAPI_AddMember_Call) Run(run func(ctx context.Context, task *domain.Task, user *domain.User)) *TasksAPI_AddMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task), args[2].(*domain.User))
	})
	return _c
}

func (_c *TasksAPI_AddMember_Call) Return(_a0 *domain.ResourceMember, _a1 error) *TasksAPI_AddMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddMemberWithID provides a mock function with given fields: ctx, taskID, memberID
func (_m *TasksAPI) AddMemberWithID(ctx context.Context, taskID string, memberID string) (*domain.ResourceMember, error) {
	ret := _m.Called(ctx, taskID, memberID)

	var r0 *domain.ResourceMember
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.ResourceMember); ok {
		r0 = rf(ctx, taskID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResourceMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, taskID, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_AddMemberWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMemberWithID'
type TasksAPI_AddMemberWithID_Call struct {
	*mock.Call
}

// AddMemberWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - memberID string
func (_e *TasksAPI_Expecter) AddMemberWithID(ctx interface{}, taskID interface{}, memberID interface{}) *TasksAPI_AddMemberWithID_Call {
	return &TasksAPI_AddMemberWithID_Call{Call: _e.mock.On("AddMemberWithID", ctx, taskID, memberID)}
}

func (_c *TasksAPI_AddMemberWithID_Call) Run(run func(ctx context.Context, taskID string, memberID string)) *TasksAPI_AddMemberWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_AddMemberWithID_Call) Return(_a0 *domain.ResourceMember, _a1 error) *TasksAPI_AddMemberWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddOwner provides a mock function with given fields: ctx, task, user
func (_m *TasksAPI) AddOwner(ctx context.Context, task *domain.Task, user *domain.User) (*domain.ResourceOwner, error) {
	ret := _m.Called(ctx, task, user)

	var r0 *domain.ResourceOwner
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task, *domain.User) *domain.ResourceOwner); ok {
		r0 = rf(ctx, task, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResourceOwner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task, *domain.User) error); ok {
		r1 = rf(ctx, task, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_AddOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOwner'
type TasksAPI_AddOwner_Call struct {
	*mock.Call
}

// AddOwner is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
//  - user *domain.User
func (_e *TasksAPI_Expecter) AddOwner(ctx interface{}, task interface{}, user interface{}) *TasksAPI_AddOwner_Call {
	return &TasksAPI_AddOwner_Call{Call: _e.mock.On("AddOwner", ctx, task, user)}
}

func (_c *TasksAPI_AddOwner_Call) Run(run func(ctx context.Context, task *domain.Task, user *domain.User)) *TasksAPI_AddOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task), args[2].(*domain.User))
	})
	return _c
}

func (_c *TasksAPI_AddOwner_Call) Return(_a0 *domain.ResourceOwner, _a1 error) *TasksAPI_AddOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddOwnerWithID provides a mock function with given fields: ctx, taskID, memberID
func (_m *TasksAPI) AddOwnerWithID(ctx context.Context, taskID string, memberID string) (*domain.ResourceOwner, error) {
	ret := _m.Called(ctx, taskID, memberID)

	var r0 *domain.ResourceOwner
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.ResourceOwner); ok {
		r0 = rf(ctx, taskID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ResourceOwner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, taskID, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_AddOwnerWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOwnerWithID'
type TasksAPI_AddOwnerWithID_Call struct {
	*mock.Call
}

// AddOwnerWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - memberID string
func (_e *TasksAPI_Expecter) AddOwnerWithID(ctx interface{}, taskID interface{}, memberID interface{}) *TasksAPI_AddOwnerWithID_Call {
	return &TasksAPI_AddOwnerWithID_Call{Call: _e.mock.On("AddOwnerWithID", ctx, taskID, memberID)}
}

func (_c *TasksAPI_AddOwnerWithID_Call) Run(run func(ctx context.Context, taskID string, memberID string)) *TasksAPI_AddOwnerWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_AddOwnerWithID_Call) Return(_a0 *domain.ResourceOwner, _a1 error) *TasksAPI_AddOwnerWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CancelRun provides a mock function with given fields: ctx, run
func (_m *TasksAPI) CancelRun(ctx context.Context, run *domain.Run) error {
	ret := _m.Called(ctx, run)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Run) error); ok {
		r0 = rf(ctx, run)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_CancelRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRun'
type TasksAPI_CancelRun_Call struct {
	*mock.Call
}

// CancelRun is a helper method to define mock.On call
//  - ctx context.Context
//  - run *domain.Run
func (_e *TasksAPI_Expecter) CancelRun(ctx interface{}, run interface{}) *TasksAPI_CancelRun_Call {
	return &TasksAPI_CancelRun_Call{Call: _e.mock.On("CancelRun", ctx, run)}
}

func (_c *TasksAPI_CancelRun_Call) Run(run func(ctx context.Context, run *domain.Run)) *TasksAPI_CancelRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Run))
	})
	return _c
}

func (_c *TasksAPI_CancelRun_Call) Return(_a0 error) *TasksAPI_CancelRun_Call {
	_c.Call.Return(_a0)
	return _c
}

// CancelRunWithID provides a mock function with given fields: ctx, taskID, runID
func (_m *TasksAPI) CancelRunWithID(ctx context.Context, taskID string, runID string) error {
	ret := _m.Called(ctx, taskID, runID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, taskID, runID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_CancelRunWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelRunWithID'
type TasksAPI_CancelRunWithID_Call struct {
	*mock.Call
}

// CancelRunWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
func (_e *TasksAPI_Expecter) CancelRunWithID(ctx interface{}, taskID interface{}, runID interface{}) *TasksAPI_CancelRunWithID_Call {
	return &TasksAPI_CancelRunWithID_Call{Call: _e.mock.On("CancelRunWithID", ctx, taskID, runID)}
}

func (_c *TasksAPI_CancelRunWithID_Call) Run(run func(ctx context.Context, taskID string, runID string)) *TasksAPI_CancelRunWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_CancelRunWithID_Call) Return(_a0 error) *TasksAPI_CancelRunWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *TasksAPI) CreateTask(ctx context.Context, task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) *domain.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type TasksAPI_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
func (_e *TasksAPI_Expecter) CreateTask(ctx interface{}, task interface{}) *TasksAPI_CreateTask_Call {
	return &TasksAPI_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, task)}
}

func (_c *TasksAPI_CreateTask_Call) Run(run func(ctx context.Context, task *domain.Task)) *TasksAPI_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *TasksAPI_CreateTask_Call) Return(_a0 *domain.Task, _a1 error) *TasksAPI_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateTaskByFlux provides a mock function with given fields: ctx, flux, orgID
func (_m *TasksAPI) CreateTaskByFlux(ctx context.Context, flux string, orgID string) (*domain.Task, error) {
	ret := _m.Called(ctx, flux, orgID)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Task); ok {
		r0 = rf(ctx, flux, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, flux, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_CreateTaskByFlux_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskByFlux'
type TasksAPI_CreateTaskByFlux_Call struct {
	*mock.Call
}

// CreateTaskByFlux is a helper method to define mock.On call
//  - ctx context.Context
//  - flux string
//  - orgID string
func (_e *TasksAPI_Expecter) CreateTaskByFlux(ctx interface{}, flux interface{}, orgID interface{}) *TasksAPI_CreateTaskByFlux_Call {
	return &TasksAPI_CreateTaskByFlux_Call{Call: _e.mock.On("CreateTaskByFlux", ctx, flux, orgID)}
}

func (_c *TasksAPI_CreateTaskByFlux_Call) Run(run func(ctx context.Context, flux string, orgID string)) *TasksAPI_CreateTaskByFlux_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_CreateTaskByFlux_Call) Return(_a0 *domain.Task, _a1 error) *TasksAPI_CreateTaskByFlux_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateTaskWithCron provides a mock function with given fields: ctx, name, flux, cron, orgID
func (_m *TasksAPI) CreateTaskWithCron(ctx context.Context, name string, flux string, cron string, orgID string) (*domain.Task, error) {
	ret := _m.Called(ctx, name, flux, cron, orgID)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *domain.Task); ok {
		r0 = rf(ctx, name, flux, cron, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, flux, cron, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_CreateTaskWithCron_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskWithCron'
type TasksAPI_CreateTaskWithCron_Call struct {
	*mock.Call
}

// CreateTaskWithCron is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
//  - flux string
//  - cron string
//  - orgID string
func (_e *TasksAPI_Expecter) CreateTaskWithCron(ctx interface{}, name interface{}, flux interface{}, cron interface{}, orgID interface{}) *TasksAPI_CreateTaskWithCron_Call {
	return &TasksAPI_CreateTaskWithCron_Call{Call: _e.mock.On("CreateTaskWithCron", ctx, name, flux, cron, orgID)}
}

func (_c *TasksAPI_CreateTaskWithCron_Call) Run(run func(ctx context.Context, name string, flux string, cron string, orgID string)) *TasksAPI_CreateTaskWithCron_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *TasksAPI_CreateTaskWithCron_Call) Return(_a0 *domain.Task, _a1 error) *TasksAPI_CreateTaskWithCron_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateTaskWithEvery provides a mock function with given fields: ctx, name, flux, every, orgID
func (_m *TasksAPI) CreateTaskWithEvery(ctx context.Context, name string, flux string, every string, orgID string) (*domain.Task, error) {
	ret := _m.Called(ctx, name, flux, every, orgID)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *domain.Task); ok {
		r0 = rf(ctx, name, flux, every, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, flux, every, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_CreateTaskWithEvery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskWithEvery'
type TasksAPI_CreateTaskWithEvery_Call struct {
	*mock.Call
}

// CreateTaskWithEvery is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
//  - flux string
//  - every string
//  - orgID string
func (_e *TasksAPI_Expecter) CreateTaskWithEvery(ctx interface{}, name interface{}, flux interface{}, every interface{}, orgID interface{}) *TasksAPI_CreateTaskWithEvery_Call {
	return &TasksAPI_CreateTaskWithEvery_Call{Call: _e.mock.On("CreateTaskWithEvery", ctx, name, flux, every, orgID)}
}

func (_c *TasksAPI_CreateTaskWithEvery_Call) Run(run func(ctx context.Context, name string, flux string, every string, orgID string)) *TasksAPI_CreateTaskWithEvery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *TasksAPI_CreateTaskWithEvery_Call) Return(_a0 *domain.Task, _a1 error) *TasksAPI_CreateTaskWithEvery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, task
func (_m *TasksAPI) DeleteTask(ctx context.Context, task *domain.Task) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type TasksAPI_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
func (_e *TasksAPI_Expecter) DeleteTask(ctx interface{}, task interface{}) *TasksAPI_DeleteTask_Call {
	return &TasksAPI_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, task)}
}

func (_c *TasksAPI_DeleteTask_Call) Run(run func(ctx context.Context, task *domain.Task)) *TasksAPI_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *TasksAPI_DeleteTask_Call) Return(_a0 error) *TasksAPI_DeleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteTaskWithID provides a mock function with given fields: ctx, taskID
func (_m *TasksAPI) DeleteTaskWithID(ctx context.Context, taskID string) error {
	ret := _m.Called(ctx, taskID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_DeleteTaskWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTaskWithID'
type TasksAPI_DeleteTaskWithID_Call struct {
	*mock.Call
}

// DeleteTaskWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
func (_e *TasksAPI_Expecter) DeleteTaskWithID(ctx interface{}, taskID interface{}) *TasksAPI_DeleteTaskWithID_Call {
	return &TasksAPI_DeleteTaskWithID_Call{Call: _e.mock.On("DeleteTaskWithID", ctx, taskID)}
}

func (_c *TasksAPI_DeleteTaskWithID_Call) Run(run func(ctx context.Context, taskID string)) *TasksAPI_DeleteTaskWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TasksAPI_DeleteTaskWithID_Call) Return(_a0 error) *TasksAPI_DeleteTaskWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindLabels provides a mock function with given fields: ctx, task
func (_m *TasksAPI) FindLabels(ctx context.Context, task *domain.Task) ([]domain.Label, error) {
	ret := _m.Called(ctx, task)

	var r0 []domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) []domain.Label); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLabels'
type TasksAPI_FindLabels_Call struct {
	*mock.Call
}

// FindLabels is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
func (_e *TasksAPI_Expecter) FindLabels(ctx interface{}, task interface{}) *TasksAPI_FindLabels_Call {
	return &TasksAPI_FindLabels_Call{Call: _e.mock.On("FindLabels", ctx, task)}
}

func (_c *TasksAPI_FindLabels_Call) Run(run func(ctx context.Context, task *domain.Task)) *TasksAPI_FindLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *TasksAPI_FindLabels_Call) Return(_a0 []domain.Label, _a1 error) *TasksAPI_FindLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindLabelsWithID provides a mock function with given fields: ctx, taskID
func (_m *TasksAPI) FindLabelsWithID(ctx context.Context, taskID string) ([]domain.Label, error) {
	ret := _m.Called(ctx, taskID)

	var r0 []domain.Label
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Label); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindLabelsWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLabelsWithID'
type TasksAPI_FindLabelsWithID_Call struct {
	*mock.Call
}

// FindLabelsWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
func (_e *TasksAPI_Expecter) FindLabelsWithID(ctx interface{}, taskID interface{}) *TasksAPI_FindLabelsWithID_Call {
	return &TasksAPI_FindLabelsWithID_Call{Call: _e.mock.On("FindLabelsWithID", ctx, taskID)}
}

func (_c *TasksAPI_FindLabelsWithID_Call) Run(run func(ctx context.Context, taskID string)) *TasksAPI_FindLabelsWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TasksAPI_FindLabelsWithID_Call) Return(_a0 []domain.Label, _a1 error) *TasksAPI_FindLabelsWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindLogs provides a mock function with given fields: ctx, task
func (_m *TasksAPI) FindLogs(ctx context.Context, task *domain.Task) ([]domain.LogEvent, error) {
	ret := _m.Called(ctx, task)

	var r0 []domain.LogEvent
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) []domain.LogEvent); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LogEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLogs'
type TasksAPI_FindLogs_Call struct {
	*mock.Call
}

// FindLogs is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
func (_e *TasksAPI_Expecter) FindLogs(ctx interface{}, task interface{}) *TasksAPI_FindLogs_Call {
	return &TasksAPI_FindLogs_Call{Call: _e.mock.On("FindLogs", ctx, task)}
}

func (_c *TasksAPI_FindLogs_Call) Run(run func(ctx context.Context, task *domain.Task)) *TasksAPI_FindLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *TasksAPI_FindLogs_Call) Return(_a0 []domain.LogEvent, _a1 error) *TasksAPI_FindLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindLogsWithID provides a mock function with given fields: ctx, taskID
func (_m *TasksAPI) FindLogsWithID(ctx context.Context, taskID string) ([]domain.LogEvent, error) {
	ret := _m.Called(ctx, taskID)

	var r0 []domain.LogEvent
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.LogEvent); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LogEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindLogsWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLogsWithID'
type TasksAPI_FindLogsWithID_Call struct {
	*mock.Call
}

// FindLogsWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
func (_e *TasksAPI_Expecter) FindLogsWithID(ctx interface{}, taskID interface{}) *TasksAPI_FindLogsWithID_Call {
	return &TasksAPI_FindLogsWithID_Call{Call: _e.mock.On("FindLogsWithID", ctx, taskID)}
}

func (_c *TasksAPI_FindLogsWithID_Call) Run(run func(ctx context.Context, taskID string)) *TasksAPI_FindLogsWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TasksAPI_FindLogsWithID_Call) Return(_a0 []domain.LogEvent, _a1 error) *TasksAPI_FindLogsWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindMembers provides a mock function with given fields: ctx, task
func (_m *TasksAPI) FindMembers(ctx context.Context, task *domain.Task) ([]domain.ResourceMember, error) {
	ret := _m.Called(ctx, task)

	var r0 []domain.ResourceMember
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) []domain.ResourceMember); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ResourceMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMembers'
type TasksAPI_FindMembers_Call struct {
	*mock.Call
}

// FindMembers is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
func (_e *TasksAPI_Expecter) FindMembers(ctx interface{}, task interface{}) *TasksAPI_FindMembers_Call {
	return &TasksAPI_FindMembers_Call{Call: _e.mock.On("FindMembers", ctx, task)}
}

func (_c *TasksAPI_FindMembers_Call) Run(run func(ctx context.Context, task *domain.Task)) *TasksAPI_FindMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *TasksAPI_FindMembers_Call) Return(_a0 []domain.ResourceMember, _a1 error) *TasksAPI_FindMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindMembersWithID provides a mock function with given fields: ctx, taskID
func (_m *TasksAPI) FindMembersWithID(ctx context.Context, taskID string) ([]domain.ResourceMember, error) {
	ret := _m.Called(ctx, taskID)

	var r0 []domain.ResourceMember
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.ResourceMember); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ResourceMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindMembersWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMembersWithID'
type TasksAPI_FindMembersWithID_Call struct {
	*mock.Call
}

// FindMembersWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
func (_e *TasksAPI_Expecter) FindMembersWithID(ctx interface{}, taskID interface{}) *TasksAPI_FindMembersWithID_Call {
	return &TasksAPI_FindMembersWithID_Call{Call: _e.mock.On("FindMembersWithID", ctx, taskID)}
}

func (_c *TasksAPI_FindMembersWithID_Call) Run(run func(ctx context.Context, taskID string)) *TasksAPI_FindMembersWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TasksAPI_FindMembersWithID_Call) Return(_a0 []domain.ResourceMember, _a1 error) *TasksAPI_FindMembersWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindOwners provides a mock function with given fields: ctx, task
func (_m *TasksAPI) FindOwners(ctx context.Context, task *domain.Task) ([]domain.ResourceOwner, error) {
	ret := _m.Called(ctx, task)

	var r0 []domain.ResourceOwner
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) []domain.ResourceOwner); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ResourceOwner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOwners'
type TasksAPI_FindOwners_Call struct {
	*mock.Call
}

// FindOwners is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
func (_e *TasksAPI_Expecter) FindOwners(ctx interface{}, task interface{}) *TasksAPI_FindOwners_Call {
	return &TasksAPI_FindOwners_Call{Call: _e.mock.On("FindOwners", ctx, task)}
}

func (_c *TasksAPI_FindOwners_Call) Run(run func(ctx context.Context, task *domain.Task)) *TasksAPI_FindOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *TasksAPI_FindOwners_Call) Return(_a0 []domain.ResourceOwner, _a1 error) *TasksAPI_FindOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindOwnersWithID provides a mock function with given fields: ctx, taskID
func (_m *TasksAPI) FindOwnersWithID(ctx context.Context, taskID string) ([]domain.ResourceOwner, error) {
	ret := _m.Called(ctx, taskID)

	var r0 []domain.ResourceOwner
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.ResourceOwner); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ResourceOwner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindOwnersWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOwnersWithID'
type TasksAPI_FindOwnersWithID_Call struct {
	*mock.Call
}

// FindOwnersWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
func (_e *TasksAPI_Expecter) FindOwnersWithID(ctx interface{}, taskID interface{}) *TasksAPI_FindOwnersWithID_Call {
	return &TasksAPI_FindOwnersWithID_Call{Call: _e.mock.On("FindOwnersWithID", ctx, taskID)}
}

func (_c *TasksAPI_FindOwnersWithID_Call) Run(run func(ctx context.Context, taskID string)) *TasksAPI_FindOwnersWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TasksAPI_FindOwnersWithID_Call) Return(_a0 []domain.ResourceOwner, _a1 error) *TasksAPI_FindOwnersWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindRunLogs provides a mock function with given fields: ctx, run
func (_m *TasksAPI) FindRunLogs(ctx context.Context, run *domain.Run) ([]domain.LogEvent, error) {
	ret := _m.Called(ctx, run)

	var r0 []domain.LogEvent
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Run) []domain.LogEvent); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LogEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindRunLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRunLogs'
type TasksAPI_FindRunLogs_Call struct {
	*mock.Call
}

// FindRunLogs is a helper method to define mock.On call
//  - ctx context.Context
//  - run *domain.Run
func (_e *TasksAPI_Expecter) FindRunLogs(ctx interface{}, run interface{}) *TasksAPI_FindRunLogs_Call {
	return &TasksAPI_FindRunLogs_Call{Call: _e.mock.On("FindRunLogs", ctx, run)}
}

func (_c *TasksAPI_FindRunLogs_Call) Run(run func(ctx context.Context, run *domain.Run)) *TasksAPI_FindRunLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Run))
	})
	return _c
}

func (_c *TasksAPI_FindRunLogs_Call) Return(_a0 []domain.LogEvent, _a1 error) *TasksAPI_FindRunLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindRunLogsWithID provides a mock function with given fields: ctx, taskID, runID
func (_m *TasksAPI) FindRunLogsWithID(ctx context.Context, taskID string, runID string) ([]domain.LogEvent, error) {
	ret := _m.Called(ctx, taskID, runID)

	var r0 []domain.LogEvent
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []domain.LogEvent); ok {
		r0 = rf(ctx, taskID, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LogEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, taskID, runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindRunLogsWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRunLogsWithID'
type TasksAPI_FindRunLogsWithID_Call struct {
	*mock.Call
}

// FindRunLogsWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
func (_e *TasksAPI_Expecter) FindRunLogsWithID(ctx interface{}, taskID interface{}, runID interface{}) *TasksAPI_FindRunLogsWithID_Call {
	return &TasksAPI_FindRunLogsWithID_Call{Call: _e.mock.On("FindRunLogsWithID", ctx, taskID, runID)}
}

func (_c *TasksAPI_FindRunLogsWithID_Call) Run(run func(ctx context.Context, taskID string, runID string)) *TasksAPI_FindRunLogsWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_FindRunLogsWithID_Call) Return(_a0 []domain.LogEvent, _a1 error) *TasksAPI_FindRunLogsWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindRuns provides a mock function with given fields: ctx, task, filter
func (_m *TasksAPI) FindRuns(ctx context.Context, task *domain.Task, filter *api.RunFilter) ([]domain.Run, error) {
	ret := _m.Called(ctx, task, filter)

	var r0 []domain.Run
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task, *api.RunFilter) []domain.Run); ok {
		r0 = rf(ctx, task, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task, *api.RunFilter) error); ok {
		r1 = rf(ctx, task, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRuns'
type TasksAPI_FindRuns_Call struct {
	*mock.Call
}

// FindRuns is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
//  - filter *api.RunFilter
func (_e *TasksAPI_Expecter) FindRuns(ctx interface{}, task interface{}, filter interface{}) *TasksAPI_FindRuns_Call {
	return &TasksAPI_FindRuns_Call{Call: _e.mock.On("FindRuns", ctx, task, filter)}
}

func (_c *TasksAPI_FindRuns_Call) Run(run func(ctx context.Context, task *domain.Task, filter *api.RunFilter)) *TasksAPI_FindRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task), args[2].(*api.RunFilter))
	})
	return _c
}

func (_c *TasksAPI_FindRuns_Call) Return(_a0 []domain.Run, _a1 error) *TasksAPI_FindRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindRunsWithID provides a mock function with given fields: ctx, taskID, filter
func (_m *TasksAPI) FindRunsWithID(ctx context.Context, taskID string, filter *api.RunFilter) ([]domain.Run, error) {
	ret := _m.Called(ctx, taskID, filter)

	var r0 []domain.Run
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.RunFilter) []domain.Run); ok {
		r0 = rf(ctx, taskID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.RunFilter) error); ok {
		r1 = rf(ctx, taskID, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindRunsWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRunsWithID'
type TasksAPI_FindRunsWithID_Call struct {
	*mock.Call
}

// FindRunsWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - filter *api.RunFilter
func (_e *TasksAPI_Expecter) FindRunsWithID(ctx interface{}, taskID interface{}, filter interface{}) *TasksAPI_FindRunsWithID_Call {
	return &TasksAPI_FindRunsWithID_Call{Call: _e.mock.On("FindRunsWithID", ctx, taskID, filter)}
}

func (_c *TasksAPI_FindRunsWithID_Call) Run(run func(ctx context.Context, taskID string, filter *api.RunFilter)) *TasksAPI_FindRunsWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*api.RunFilter))
	})
	return _c
}

func (_c *TasksAPI_FindRunsWithID_Call) Return(_a0 []domain.Run, _a1 error) *TasksAPI_FindRunsWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindTasks provides a mock function with given fields: ctx, filter
func (_m *TasksAPI) FindTasks(ctx context.Context, filter *api.TaskFilter) ([]domain.Task, error) {
	ret := _m.Called(ctx, filter)

	var r0 []domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, *api.TaskFilter) []domain.Task); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.TaskFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_FindTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTasks'
type TasksAPI_FindTasks_Call struct {
	*mock.Call
}

// FindTasks is a helper method to define mock.On call
//  - ctx context.Context
//  - filter *api.TaskFilter
func (_e *TasksAPI_Expecter) FindTasks(ctx interface{}, filter interface{}) *TasksAPI_FindTasks_Call {
	return &TasksAPI_FindTasks_Call{Call: _e.mock.On("FindTasks", ctx, filter)}
}

func (_c *TasksAPI_FindTasks_Call) Run(run func(ctx context.Context, filter *api.TaskFilter)) *TasksAPI_FindTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.TaskFilter))
	})
	return _c
}

func (_c *TasksAPI_FindTasks_Call) Return(_a0 []domain.Task, _a1 error) *TasksAPI_FindTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRun provides a mock function with given fields: ctx, run
func (_m *TasksAPI) GetRun(ctx context.Context, run *domain.Run) (*domain.Run, error) {
	ret := _m.Called(ctx, run)

	var r0 *domain.Run
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Run) *domain.Run); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_GetRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRun'
type TasksAPI_GetRun_Call struct {
	*mock.Call
}

// GetRun is a helper method to define mock.On call
//  - ctx context.Context
//  - run *domain.Run
func (_e *TasksAPI_Expecter) GetRun(ctx interface{}, run interface{}) *TasksAPI_GetRun_Call {
	return &TasksAPI_GetRun_Call{Call: _e.mock.On("GetRun", ctx, run)}
}

func (_c *TasksAPI_GetRun_Call) Run(run func(ctx context.Context, run *domain.Run)) *TasksAPI_GetRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Run))
	})
	return _c
}

func (_c *TasksAPI_GetRun_Call) Return(_a0 *domain.Run, _a1 error) *TasksAPI_GetRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRunByID provides a mock function with given fields: ctx, taskID, runID
func (_m *TasksAPI) GetRunByID(ctx context.Context, taskID string, runID string) (*domain.Run, error) {
	ret := _m.Called(ctx, taskID, runID)

	var r0 *domain.Run
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Run); ok {
		r0 = rf(ctx, taskID, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, taskID, runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_GetRunByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRunByID'
type TasksAPI_GetRunByID_Call struct {
	*mock.Call
}

// GetRunByID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
func (_e *TasksAPI_Expecter) GetRunByID(ctx interface{}, taskID interface{}, runID interface{}) *TasksAPI_GetRunByID_Call {
	return &TasksAPI_GetRunByID_Call{Call: _e.mock.On("GetRunByID", ctx, taskID, runID)}
}

func (_c *TasksAPI_GetRunByID_Call) Run(run func(ctx context.Context, taskID string, runID string)) *TasksAPI_GetRunByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_GetRunByID_Call) Return(_a0 *domain.Run, _a1 error) *TasksAPI_GetRunByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTask provides a mock function with given fields: ctx, task
func (_m *TasksAPI) GetTask(ctx context.Context, task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) *domain.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type TasksAPI_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
func (_e *TasksAPI_Expecter) GetTask(ctx interface{}, task interface{}) *TasksAPI_GetTask_Call {
	return &TasksAPI_GetTask_Call{Call: _e.mock.On("GetTask", ctx, task)}
}

func (_c *TasksAPI_GetTask_Call) Run(run func(ctx context.Context, task *domain.Task)) *TasksAPI_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *TasksAPI_GetTask_Call) Return(_a0 *domain.Task, _a1 error) *TasksAPI_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTaskByID provides a mock function with given fields: ctx, taskID
func (_m *TasksAPI) GetTaskByID(ctx context.Context, taskID string) (*domain.Task, error) {
	ret := _m.Called(ctx, taskID)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Task); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type TasksAPI_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
func (_e *TasksAPI_Expecter) GetTaskByID(ctx interface{}, taskID interface{}) *TasksAPI_GetTaskByID_Call {
	return &TasksAPI_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", ctx, taskID)}
}

func (_c *TasksAPI_GetTaskByID_Call) Run(run func(ctx context.Context, taskID string)) *TasksAPI_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TasksAPI_GetTaskByID_Call) Return(_a0 *domain.Task, _a1 error) *TasksAPI_GetTaskByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveLabel provides a mock function with given fields: ctx, task, label
func (_m *TasksAPI) RemoveLabel(ctx context.Context, task *domain.Task, label *domain.Label) error {
	ret := _m.Called(ctx, task, label)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task, *domain.Label) error); ok {
		r0 = rf(ctx, task, label)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_RemoveLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLabel'
type TasksAPI_RemoveLabel_Call struct {
	*mock.Call
}

// RemoveLabel is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
//  - label *domain.Label
func (_e *TasksAPI_Expecter) RemoveLabel(ctx interface{}, task interface{}, label interface{}) *TasksAPI_RemoveLabel_Call {
	return &TasksAPI_RemoveLabel_Call{Call: _e.mock.On("RemoveLabel", ctx, task, label)}
}

func (_c *TasksAPI_RemoveLabel_Call) Run(run func(ctx context.Context, task *domain.Task, label *domain.Label)) *TasksAPI_RemoveLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task), args[2].(*domain.Label))
	})
	return _c
}

func (_c *TasksAPI_RemoveLabel_Call) Return(_a0 error) *TasksAPI_RemoveLabel_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveLabelWithID provides a mock function with given fields: ctx, taskID, labelID
func (_m *TasksAPI) RemoveLabelWithID(ctx context.Context, taskID string, labelID string) error {
	ret := _m.Called(ctx, taskID, labelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, taskID, labelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_RemoveLabelWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLabelWithID'
type TasksAPI_RemoveLabelWithID_Call struct {
	*mock.Call
}

// RemoveLabelWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - labelID string
func (_e *TasksAPI_Expecter) RemoveLabelWithID(ctx interface{}, taskID interface{}, labelID interface{}) *TasksAPI_RemoveLabelWithID_Call {
	return &TasksAPI_RemoveLabelWithID_Call{Call: _e.mock.On("RemoveLabelWithID", ctx, taskID, labelID)}
}

func (_c *TasksAPI_RemoveLabelWithID_Call) Run(run func(ctx context.Context, taskID string, labelID string)) *TasksAPI_RemoveLabelWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_RemoveLabelWithID_Call) Return(_a0 error) *TasksAPI_RemoveLabelWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveMember provides a mock function with given fields: ctx, task, user
func (_m *TasksAPI) RemoveMember(ctx context.Context, task *domain.Task, user *domain.User) error {
	ret := _m.Called(ctx, task, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task, *domain.User) error); ok {
		r0 = rf(ctx, task, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_RemoveMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMember'
type TasksAPI_RemoveMember_Call struct {
	*mock.Call
}

// RemoveMember is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
//  - user *domain.User
func (_e *TasksAPI_Expecter) RemoveMember(ctx interface{}, task interface{}, user interface{}) *TasksAPI_RemoveMember_Call {
	return &TasksAPI_RemoveMember_Call{Call: _e.mock.On("RemoveMember", ctx, task, user)}
}

func (_c *TasksAPI_RemoveMember_Call) Run(run func(ctx context.Context, task *domain.Task, user *domain.User)) *TasksAPI_RemoveMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task), args[2].(*domain.User))
	})
	return _c
}

func (_c *TasksAPI_RemoveMember_Call) Return(_a0 error) *TasksAPI_RemoveMember_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveMemberWithID provides a mock function with given fields: ctx, taskID, memberID
func (_m *TasksAPI) RemoveMemberWithID(ctx context.Context, taskID string, memberID string) error {
	ret := _m.Called(ctx, taskID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, taskID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_RemoveMemberWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMemberWithID'
type TasksAPI_RemoveMemberWithID_Call struct {
	*mock.Call
}

// RemoveMemberWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - memberID string
func (_e *TasksAPI_Expecter) RemoveMemberWithID(ctx interface{}, taskID interface{}, memberID interface{}) *TasksAPI_RemoveMemberWithID_Call {
	return &TasksAPI_RemoveMemberWithID_Call{Call: _e.mock.On("RemoveMemberWithID", ctx, taskID, memberID)}
}

func (_c *TasksAPI_RemoveMemberWithID_Call) Run(run func(ctx context.Context, taskID string, memberID string)) *TasksAPI_RemoveMemberWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_RemoveMemberWithID_Call) Return(_a0 error) *TasksAPI_RemoveMemberWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveOwner provides a mock function with given fields: ctx, task, user
func (_m *TasksAPI) RemoveOwner(ctx context.Context, task *domain.Task, user *domain.User) error {
	ret := _m.Called(ctx, task, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task, *domain.User) error); ok {
		r0 = rf(ctx, task, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_RemoveOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOwner'
type TasksAPI_RemoveOwner_Call struct {
	*mock.Call
}

// RemoveOwner is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
//  - user *domain.User
func (_e *TasksAPI_Expecter) RemoveOwner(ctx interface{}, task interface{}, user interface{}) *TasksAPI_RemoveOwner_Call {
	return &TasksAPI_RemoveOwner_Call{Call: _e.mock.On("RemoveOwner", ctx, task, user)}
}

func (_c *TasksAPI_RemoveOwner_Call) Run(run func(ctx context.Context, task *domain.Task, user *domain.User)) *TasksAPI_RemoveOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task), args[2].(*domain.User))
	})
	return _c
}

func (_c *TasksAPI_RemoveOwner_Call) Return(_a0 error) *TasksAPI_RemoveOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemoveOwnerWithID provides a mock function with given fields: ctx, taskID, memberID
func (_m *TasksAPI) RemoveOwnerWithID(ctx context.Context, taskID string, memberID string) error {
	ret := _m.Called(ctx, taskID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, taskID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TasksAPI_RemoveOwnerWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOwnerWithID'
type TasksAPI_RemoveOwnerWithID_Call struct {
	*mock.Call
}

// RemoveOwnerWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - memberID string
func (_e *TasksAPI_Expecter) RemoveOwnerWithID(ctx interface{}, taskID interface{}, memberID interface{}) *TasksAPI_RemoveOwnerWithID_Call {
	return &TasksAPI_RemoveOwnerWithID_Call{Call: _e.mock.On("RemoveOwnerWithID", ctx, taskID, memberID)}
}

func (_c *TasksAPI_RemoveOwnerWithID_Call) Run(run func(ctx context.Context, taskID string, memberID string)) *TasksAPI_RemoveOwnerWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_RemoveOwnerWithID_Call) Return(_a0 error) *TasksAPI_RemoveOwnerWithID_Call {
	_c.Call.Return(_a0)
	return _c
}

// RetryRun provides a mock function with given fields: ctx, run
func (_m *TasksAPI) RetryRun(ctx context.Context, run *domain.Run) (*domain.Run, error) {
	ret := _m.Called(ctx, run)

	var r0 *domain.Run
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Run) *domain.Run); ok {
		r0 = rf(ctx, run)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Run) error); ok {
		r1 = rf(ctx, run)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_RetryRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetryRun'
type TasksAPI_RetryRun_Call struct {
	*mock.Call
}

// RetryRun is a helper method to define mock.On call
//  - ctx context.Context
//  - run *domain.Run
func (_e *TasksAPI_Expecter) RetryRun(ctx interface{}, run interface{}) *TasksAPI_RetryRun_Call {
	return &TasksAPI_RetryRun_Call{Call: _e.mock.On("RetryRun", ctx, run)}
}

func (_c *TasksAPI_RetryRun_Call) Run(run func(ctx context.Context, run *domain.Run)) *TasksAPI_RetryRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Run))
	})
	return _c
}

func (_c *TasksAPI_RetryRun_Call) Return(_a0 *domain.Run, _a1 error) *TasksAPI_RetryRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RetryRunWithID provides a mock function with given fields: ctx, taskID, runID
func (_m *TasksAPI) RetryRunWithID(ctx context.Context, taskID string, runID string) (*domain.Run, error) {
	ret := _m.Called(ctx, taskID, runID)

	var r0 *domain.Run
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Run); ok {
		r0 = rf(ctx, taskID, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, taskID, runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_RetryRunWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetryRunWithID'
type TasksAPI_RetryRunWithID_Call struct {
	*mock.Call
}

// RetryRunWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
//  - runID string
func (_e *TasksAPI_Expecter) RetryRunWithID(ctx interface{}, taskID interface{}, runID interface{}) *TasksAPI_RetryRunWithID_Call {
	return &TasksAPI_RetryRunWithID_Call{Call: _e.mock.On("RetryRunWithID", ctx, taskID, runID)}
}

func (_c *TasksAPI_RetryRunWithID_Call) Run(run func(ctx context.Context, taskID string, runID string)) *TasksAPI_RetryRunWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TasksAPI_RetryRunWithID_Call) Return(_a0 *domain.Run, _a1 error) *TasksAPI_RetryRunWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RunManually provides a mock function with given fields: ctx, task
func (_m *TasksAPI) RunManually(ctx context.Context, task *domain.Task) (*domain.Run, error) {
	ret := _m.Called(ctx, task)

	var r0 *domain.Run
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) *domain.Run); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_RunManually_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunManually'
type TasksAPI_RunManually_Call struct {
	*mock.Call
}

// RunManually is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
func (_e *TasksAPI_Expecter) RunManually(ctx interface{}, task interface{}) *TasksAPI_RunManually_Call {
	return &TasksAPI_RunManually_Call{Call: _e.mock.On("RunManually", ctx, task)}
}

func (_c *TasksAPI_RunManually_Call) Run(run func(ctx context.Context, task *domain.Task)) *TasksAPI_RunManually_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *TasksAPI_RunManually_Call) Return(_a0 *domain.Run, _a1 error) *TasksAPI_RunManually_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RunManuallyWithID provides a mock function with given fields: ctx, taskID
func (_m *TasksAPI) RunManuallyWithID(ctx context.Context, taskID string) (*domain.Run, error) {
	ret := _m.Called(ctx, taskID)

	var r0 *domain.Run
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Run); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_RunManuallyWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunManuallyWithID'
type TasksAPI_RunManuallyWithID_Call struct {
	*mock.Call
}

// RunManuallyWithID is a helper method to define mock.On call
//  - ctx context.Context
//  - taskID string
func (_e *TasksAPI_Expecter) RunManuallyWithID(ctx interface{}, taskID interface{}) *TasksAPI_RunManuallyWithID_Call {
	return &TasksAPI_RunManuallyWithID_Call{Call: _e.mock.On("RunManuallyWithID", ctx, taskID)}
}

func (_c *TasksAPI_RunManuallyWithID_Call) Run(run func(ctx context.Context, taskID string)) *TasksAPI_RunManuallyWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TasksAPI_RunManuallyWithID_Call) Return(_a0 *domain.Run, _a1 error) *TasksAPI_RunManuallyWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateTask provides a mock function with given fields: ctx, task
func (_m *TasksAPI) UpdateTask(ctx context.Context, task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) *domain.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksAPI_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type TasksAPI_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//  - ctx context.Context
//  - task *domain.Task
func (_e *TasksAPI_Expecter) UpdateTask(ctx interface{}, task interface{}) *TasksAPI_UpdateTask_Call {
	return &TasksAPI_UpdateTask_Call{Call: _e.mock.On("UpdateTask", ctx, task)}
}

func (_c *TasksAPI_UpdateTask_Call) Run(run func(ctx context.Context, task *domain.Task)) *TasksAPI_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *TasksAPI_UpdateTask_Call) Return(_a0 *domain.Task, _a1 error) *TasksAPI_UpdateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTasksAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewTasksAPI creates a new instance of TasksAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTasksAPI(t mockConstructorTestingTNewTasksAPI) *TasksAPI {
	mock := &TasksAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
