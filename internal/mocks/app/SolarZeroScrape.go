// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	jsontypes "github.com/mwinters-stuff/solar-zero-scrape-golang/solarzero/jsontypes"
	mock "github.com/stretchr/testify/mock"
)

// SolarZeroScrape is an autogenerated mock type for the SolarZeroScrape type
type SolarZeroScrape struct {
	mock.Mock
}

type SolarZeroScrape_Expecter struct {
	mock *mock.Mock
}

func (_m *SolarZeroScrape) EXPECT() *SolarZeroScrape_Expecter {
	return &SolarZeroScrape_Expecter{mock: &_m.Mock}
}

// AuthenticateFully provides a mock function with given fields:
func (_m *SolarZeroScrape) AuthenticateFully() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SolarZeroScrape_AuthenticateFully_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateFully'
type SolarZeroScrape_AuthenticateFully_Call struct {
	*mock.Call
}

// AuthenticateFully is a helper method to define mock.On call
func (_e *SolarZeroScrape_Expecter) AuthenticateFully() *SolarZeroScrape_AuthenticateFully_Call {
	return &SolarZeroScrape_AuthenticateFully_Call{Call: _e.mock.On("AuthenticateFully")}
}

func (_c *SolarZeroScrape_AuthenticateFully_Call) Run(run func()) *SolarZeroScrape_AuthenticateFully_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SolarZeroScrape_AuthenticateFully_Call) Return(_a0 bool) *SolarZeroScrape_AuthenticateFully_Call {
	_c.Call.Return(_a0)
	return _c
}

// CurrentData provides a mock function with given fields:
func (_m *SolarZeroScrape) CurrentData() jsontypes.CurrentData {
	ret := _m.Called()

	var r0 jsontypes.CurrentData
	if rf, ok := ret.Get(0).(func() jsontypes.CurrentData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(jsontypes.CurrentData)
	}

	return r0
}

// SolarZeroScrape_CurrentData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentData'
type SolarZeroScrape_CurrentData_Call struct {
	*mock.Call
}

// CurrentData is a helper method to define mock.On call
func (_e *SolarZeroScrape_Expecter) CurrentData() *SolarZeroScrape_CurrentData_Call {
	return &SolarZeroScrape_CurrentData_Call{Call: _e.mock.On("CurrentData")}
}

func (_c *SolarZeroScrape_CurrentData_Call) Run(run func()) *SolarZeroScrape_CurrentData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SolarZeroScrape_CurrentData_Call) Return(_a0 jsontypes.CurrentData) *SolarZeroScrape_CurrentData_Call {
	_c.Call.Return(_a0)
	return _c
}

// DayData provides a mock function with given fields:
func (_m *SolarZeroScrape) DayData() jsontypes.DayData {
	ret := _m.Called()

	var r0 jsontypes.DayData
	if rf, ok := ret.Get(0).(func() jsontypes.DayData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsontypes.DayData)
		}
	}

	return r0
}

// SolarZeroScrape_DayData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DayData'
type SolarZeroScrape_DayData_Call struct {
	*mock.Call
}

// DayData is a helper method to define mock.On call
func (_e *SolarZeroScrape_Expecter) DayData() *SolarZeroScrape_DayData_Call {
	return &SolarZeroScrape_DayData_Call{Call: _e.mock.On("DayData")}
}

func (_c *SolarZeroScrape_DayData_Call) Run(run func()) *SolarZeroScrape_DayData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SolarZeroScrape_DayData_Call) Return(_a0 jsontypes.DayData) *SolarZeroScrape_DayData_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetData provides a mock function with given fields:
func (_m *SolarZeroScrape) GetData() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SolarZeroScrape_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type SolarZeroScrape_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
func (_e *SolarZeroScrape_Expecter) GetData() *SolarZeroScrape_GetData_Call {
	return &SolarZeroScrape_GetData_Call{Call: _e.mock.On("GetData")}
}

func (_c *SolarZeroScrape_GetData_Call) Run(run func()) *SolarZeroScrape_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SolarZeroScrape_GetData_Call) Return(_a0 bool) *SolarZeroScrape_GetData_Call {
	_c.Call.Return(_a0)
	return _c
}

// Healthy provides a mock function with given fields:
func (_m *SolarZeroScrape) Healthy() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SolarZeroScrape_Healthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Healthy'
type SolarZeroScrape_Healthy_Call struct {
	*mock.Call
}

// Healthy is a helper method to define mock.On call
func (_e *SolarZeroScrape_Expecter) Healthy() *SolarZeroScrape_Healthy_Call {
	return &SolarZeroScrape_Healthy_Call{Call: _e.mock.On("Healthy")}
}

func (_c *SolarZeroScrape_Healthy_Call) Run(run func()) *SolarZeroScrape_Healthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SolarZeroScrape_Healthy_Call) Return(_a0 bool) *SolarZeroScrape_Healthy_Call {
	_c.Call.Return(_a0)
	return _c
}

// MonthData provides a mock function with given fields:
func (_m *SolarZeroScrape) MonthData() jsontypes.MonthData {
	ret := _m.Called()

	var r0 jsontypes.MonthData
	if rf, ok := ret.Get(0).(func() jsontypes.MonthData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsontypes.MonthData)
		}
	}

	return r0
}

// SolarZeroScrape_MonthData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonthData'
type SolarZeroScrape_MonthData_Call struct {
	*mock.Call
}

// MonthData is a helper method to define mock.On call
func (_e *SolarZeroScrape_Expecter) MonthData() *SolarZeroScrape_MonthData_Call {
	return &SolarZeroScrape_MonthData_Call{Call: _e.mock.On("MonthData")}
}

func (_c *SolarZeroScrape_MonthData_Call) Run(run func()) *SolarZeroScrape_MonthData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SolarZeroScrape_MonthData_Call) Return(_a0 jsontypes.MonthData) *SolarZeroScrape_MonthData_Call {
	_c.Call.Return(_a0)
	return _c
}

// Ready provides a mock function with given fields:
func (_m *SolarZeroScrape) Ready() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SolarZeroScrape_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type SolarZeroScrape_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *SolarZeroScrape_Expecter) Ready() *SolarZeroScrape_Ready_Call {
	return &SolarZeroScrape_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *SolarZeroScrape_Ready_Call) Run(run func()) *SolarZeroScrape_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SolarZeroScrape_Ready_Call) Return(_a0 bool) *SolarZeroScrape_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

// Start provides a mock function with given fields:
func (_m *SolarZeroScrape) Start() {
	_m.Called()
}

// SolarZeroScrape_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type SolarZeroScrape_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *SolarZeroScrape_Expecter) Start() *SolarZeroScrape_Start_Call {
	return &SolarZeroScrape_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *SolarZeroScrape_Start_Call) Run(run func()) *SolarZeroScrape_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SolarZeroScrape_Start_Call) Return() *SolarZeroScrape_Start_Call {
	_c.Call.Return()
	return _c
}

// YearData provides a mock function with given fields:
func (_m *SolarZeroScrape) YearData() jsontypes.YearData {
	ret := _m.Called()

	var r0 jsontypes.YearData
	if rf, ok := ret.Get(0).(func() jsontypes.YearData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsontypes.YearData)
		}
	}

	return r0
}

// SolarZeroScrape_YearData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'YearData'
type SolarZeroScrape_YearData_Call struct {
	*mock.Call
}

// YearData is a helper method to define mock.On call
func (_e *SolarZeroScrape_Expecter) YearData() *SolarZeroScrape_YearData_Call {
	return &SolarZeroScrape_YearData_Call{Call: _e.mock.On("YearData")}
}

func (_c *SolarZeroScrape_YearData_Call) Run(run func()) *SolarZeroScrape_YearData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SolarZeroScrape_YearData_Call) Return(_a0 jsontypes.YearData) *SolarZeroScrape_YearData_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSolarZeroScrape interface {
	mock.TestingT
	Cleanup(func())
}

// NewSolarZeroScrape creates a new instance of SolarZeroScrape. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSolarZeroScrape(t mockConstructorTestingTNewSolarZeroScrape) *SolarZeroScrape {
	mock := &SolarZeroScrape{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
